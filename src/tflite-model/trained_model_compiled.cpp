/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 18.11.2021 12:31:15

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 7360;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,637 } };
const TfArray<1, float> quant0_scale = { 1, { 0.045116707682609558, } };
const TfArray<1, int> quant0_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 832, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[4] = { 1, 49, 13, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data3[8] = { -5160, -1466, -3992, -3204, -4034, -1751, -4007, -1377, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 0.00012758940283674747, 0.00012641509238164872, 0.00014778804325032979, 0.0001140641761594452, 0.0001027204780257307, 0.00012980474275536835, 0.00018176066805608571, 0.00013885713997296989, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[16] = { 303, -2339, -4800, -4444, -64, 3056, -3473, -2574, -482, 6290, -2069, -2276, -4582, -3365, -3344, -2694, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<16, float> quant4_scale = { 16, { 8.9155524619854987e-05, 9.5769792096689343e-05, 0.0001053790474543348, 7.9461380664724857e-05, 0.00012115707068005577, 9.6325980848632753e-05, 6.9441521191038191e-05, 7.8781260526739061e-05, 8.8245171355083585e-05, 0.00012675866310019046, 9.4047383754514158e-05, 5.8886653278023005e-05, 8.154984243446961e-05, 0.00010137277422472835, 6.0123351431684569e-05, 7.382435433100909e-05, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[3] = { -755, 1272, -370, };
const TfArray<1, int> tensor_dimension5 = { 1, { 3 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00010955048492178321, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[3*832] = { 
  -56, -101, -21, 44, 67, 18, 50, -96, -87, -4, -22, 7, -75, 60, 47, -1, -2, 10, 26, -45, -50, -18, 25, 20, -39, 20, 43, -2, -12, -16, -54, -25, 20, 38, -37, -24, -104, 46, -28, 5, 17, -20, -30, 26, -15, -7, 3, 3, -14, 24, -39, 14, -80, -9, 13, -24, 6, -10, -76, -31, 9, -63, 13, -3, 0, 13, 9, 30, 60, -23, 4, -56, -54, -10, 6, 4, -30, 37, -25, 11, -4, -5, 2, -46, 10, -13, 32, 14, -16, 8, 34, 23, 25, 2, -5, -50, 3, 27, -4, 7, 21, -4, -3, 36, -9, -3, -38, 60, 12, -21, -42, -13, -25, -22, -4, -20, 53, -5, 38, 3, 41, 8, -2, -9, 36, -42, -12, -17, 3, 43, -8, 14, 40, -45, -63, -25, -37, 5, -11, 9, -62, 44, -23, 37, 13, -24, -10, -20, 0, 26, 22, 38, 8, 14, -1, 28, -10, 12, -43, -66, 10, 18, -1, -11, 16, -2, 7, 38, -27, -43, -14, 67, 19, 3, -10, 8, -19, -48, 24, -33, -47, -23, 15, -16, -40, 22, 24, -23, 26, 13, 10, 19, 2, 1, -24, 15, 22, -33, -5, -45, -57, -26, -24, 6, -114, 23, -34, 13, -3, -34, 18, -7, -31, 25, 13, 17, -51, 48, 11, 14, -2, -14, -12, -45, -37, 10, -7, 0, 25, 70, -46, 28, 32, 14, 21, 73, 37, -12, -4, -18, -26, -43, -3, 2, 19, -42, -14, -11, 83, -25, -14, 12, 14, 8, -20, -7, 2, 18, -5, 27, 4, -10, -4, -3, -73, -40, -29, 29, -62, 63, 7, 4, 8, 10, 0, 2, -38, -34, 42, 35, 1, -71, 14, 7, -8, -20, -6, -12, 18, 15, -8, 3, 41, 27, -15, 1, -35, -2, 2, 29, 1, 35, -13, 5, 6, -28, 15, -17, -63, -68, -31, 2, -3, 41, 28, -15, 1, -8, -17, 9, 3, 33, -20, 11, 10, 11, 14, -30, -43, -47, -49, -1, -31, 77, -37, 2, 4, -15, -15, 19, 21, -48, 6, 29, -7, 7, 3, 14, 22, -45, -10, -36, -11, 40, 4, -38, -16, 7, -3, 4, -4, -21, 53, 31, 16, -10, -33, -8, 1, 17, 24, -16, 16, -21, 6, -18, -37, -26, 38, -18, -8, 7, -9, 29, 16, 25, -12, -26, 0, -35, 7, -22, 2, -49, -31, 0, -62, 38, -23, -18, -22, -5, 11, 41, -8, -39, 3, 32, 20, 10, 52, 16, 11, -34, -6, -21, 25, 42, 14, -4, -1, -7, -30, -18, -18, -67, 42, 36, 7, 11, -28, -9, -21, -31, 7, -20, 23, -35, -32, 9, -15, -28, -16, -8, 42, 1, -11, 44, 15, 21, -19, -44, 1, 9, -15, -33, -26, -73, -32, 10, -45, 48, -1, -27, -2, -3, -12, 8, 45, -8, 24, 14, 7, -47, 3, 8, 2, -52, -1, 18, -20, 21, -2, -2, -58, 37, 27, -2, 26, -29, -6, -9, 0, 15, 2, 3, -15, -12, -27, -18, 15, 41, -23, 25, 55, 13, -40, -7, 33, -18, -18, -8, 0, 35, -4, -9, 14, -6, -37, 6, 7, -22, -17, 25, -54, 22, -15, -24, 23, 0, 27, -4, -44, 28, 14, -5, 19, -38, 47, 2, 29, -35, 3, -42, -2, -12, 31, 2, -43, -54, -28, 31, -2, -11, 34, -9, 17, 8, -38, -6, -39, -57, 14, -11, -79, -12, 1, -10, -35, 11, -9, -26, -10, 10, -5, 39, 22, 28, 0, 12, -3, 41, 21, 8, -30, -5, -25, 12, -62, 54, 13, -36, -12, 2, -13, 11, 0, -20, -10, 11, 43, -17, 20, -4, 29, -44, 16, -6, 11, 17, 27, -17, 2, -39, -5, 65, -1, -48, 47, -23, 14, 0, 20, -14, 9, -24, -19, 3, -30, -16, 8, -12, -32, 30, -53, -1, -33, -1, 33, -7, 32, 6, 9, 28, -2, -19, -21, 5, -21, -20, -30, 14, -33, 52, 15, 32, -11, -25, 25, -26, -24, -37, 4, 19, -29, -47, 21, -13, 31, -13, -24, -20, 20, 42, 7, -27, 34, -19, 9, -20, 31, 16, 26, -3, 14, -12, 3, 33, 5, -27, 13, -31, 8, 57, -21, 32, 45, 20, 29, -37, -14, -30, -13, -39, 2, 54, 15, 41, -15, 16, -20, 14, 8, 15, 8, 9, -32, 43, 66, 28, 1, -14, 4, -6, -26, 1, -8, 12, 9, -2, -4, -20, 21, -29, 13, 25, 3, 6, 16, -4, 25, -15, -1, -30, 7, -15, -5, -6, -3, 0, -19, -5, 21, -16, 8, 29, -11, 15, -9, 13, 20, -6, 15, -31, -7, -13, -11, 28, 30, 33, 8, 31, 14, -38, 24, -11, -27, 30, -3, 30, -21, 93, 16, 53, -3, 1, 16, -13, -11, 21, 3, 23, 28, -17, -19, -13, 13, -49, -60, -35, -6, 26, -38, -22, -29, 6, -8, -31, 3, -36, 2, -44, -18, -6, -34, 10, -38, -23, 5, -57, 59, 25, 26, -11, -17, 13, -6, 16, 5, 42, -23, -30, 
  45, 63, 23, -7, -8, -15, -12, 55, 35, -101, 11, 16, 52, -42, -43, 21, -13, -3, -5, 25, -2, 16, 4, -6, -18, 60, -36, -19, 14, 27, 45, 27, 57, 13, 36, 2, -51, -1, -9, 0, -31, 44, -30, 8, -6, 13, -20, 15, -10, -21, 42, -8, 0, -52, 9, -5, 9, -16, 45, 72, -5, 15, -5, 2, -11, -6, -41, 2, -9, -3, 6, 1, 28, -46, -15, 11, 12, -31, 6, -3, 12, 13, -1, 21, -76, 22, 20, -8, -20, 26, -12, -11, 15, 6, 18, 22, -5, -17, 26, -17, 18, 24, 0, -33, 0, 39, 29, -64, -33, -9, 4, 23, 16, 20, -17, 37, -34, 36, -24, 3, 10, -1, -29, -2, -36, 13, -33, -14, -26, -37, -53, 35, -15, -20, 3, -20, 28, -69, -33, -5, 58, -16, 11, -32, -28, -12, -15, 17, -64, -36, 25, -48, -33, 30, 29, -27, 15, -12, 7, 23, -19, -19, 13, -8, -65, 25, -2, -14, -4, 53, 11, -66, 1, -19, 12, 6, -30, 35, -1, -6, 32, -3, -7, -21, -22, 5, 9, -2, -22, 26, -8, -17, -6, -36, -30, 4, -17, -32, 28, 20, 37, -84, 0, 1, 59, 11, 15, 6, -14, 30, -13, 7, -20, -10, 8, -18, -20, 3, -14, -25, 3, 11, -2, 10, -3, -3, 24, 8, -76, -15, 31, -29, -55, 72, 7, -32, -29, -19, 1, 14, 14, 34, 2, 18, 21, 65, 19, 54, 16, 21, 59, 32, -9, -17, -3, -6, -19, -36, -28, 11, -12, -20, 16, -12, 51, -31, 18, -23, 43, 3, -13, 12, -12, -1, 6, 14, 10, -25, -11, -47, -19, 32, 23, -6, 15, 1, -4, 9, -38, -12, 0, -31, 8, 39, 5, -10, -13, 14, -6, -21, -14, -14, 9, -18, 29, 12, 42, 26, -8, 34, 12, 18, -31, 31, -43, -12, 12, -26, 9, 0, -37, -40, -69, 36, -24, 21, 2, -14, 51, -50, -5, -38, 17, 26, 18, -19, -10, 2, 5, -9, -51, 41, 46, -24, -21, 5, 8, -25, -25, 30, -5, 8, 22, -5, 20, 15, -28, -12, 11, 2, -14, 54, -37, -38, -40, -15, 25, 2, -34, 50, -46, -30, -119, 51, 36, 7, -17, -2, -22, 16, -3, -35, 5, -22, -51, -39, -72, 54, -14, 18, 14, -24, 23, -26, -30, 12, 43, -27, 23, 7, 21, -11, 2, -2, -56, 41, 18, -28, -1, -24, 10, -39, -12, -8, -6, -14, -11, 38, 22, -18, -36, 10, -37, 8, 1, 60, -54, -51, -6, 7, 3, 17, -44, 0, 10, 35, -66, 31, 8, -42, -36, 44, 19, -29, -66, 20, 9, -33, -49, -23, -49, 24, -22, -45, -8, 0, 28, 4, 5, 15, 8, 21, 25, 16, 30, -12, 19, -10, -90, -21, 12, 1, -2, 31, 3, -12, 9, 42, 2, 5, -18, -11, -25, -12, -63, -1, 1, -45, -53, 82, 24, -17, 17, -1, -1, 28, 10, 19, 28, 25, -8, 0, 25, -22, -9, 36, 24, -55, -49, 17, 28, -3, -41, -47, -37, 43, -23, 6, 49, -8, 25, -35, -46, -36, 26, 83, 62, 18, -27, -26, -18, -23, -29, 1, 15, 15, -41, 8, -46, -7, -22, -5, 16, 19, 2, 47, -19, 5, -31, 35, 25, -20, 17, 1, -24, 3, -42, 10, 53, 30, 6, 17, -2, 33, -62, 47, 16, 20, 1, -6, 15, 16, -36, 29, 31, 2, -45, -27, -67, 44, -42, -35, -30, -26, 35, -105, -13, 1, 36, -9, 46, 75, -14, -3, 2, -1, -102, 30, -16, 7, -50, 33, -10, -26, -11, 14, 14, 25, -14, -9, -27, 27, 27, 9, -16, -51, -27, 35, 1, 13, 1, 10, -3, -19, -3, -3, 40, -16, -71, 23, -18, 15, -33, -1, 10, -55, 29, -4, -23, -2, -29, 5, -33, 33, -11, -7, 58, -31, 30, -93, -23, -3, -1, 3, 28, -28, 0, -1, -42, 16, -10, -6, 68, -20, -7, -11, 13, 1, -1, 13, 9, 13, -46, 34, 10, 0, -82, 3, -1, -27, -76, -10, 11, 7, 6, 30, 27, 20, -57, -2, -30, 48, -127, -21, 12, -36, 8, -8, 6, 13, -8, -17, 19, 11, 15, -34, -38, 28, 7, 15, 36, -32, 28, -55, -34, 4, 14, -10, 10, -2, -8, 29, -49, 2, -34, -54, 7, -28, -17, 31, -23, 13, -3, 20, 21, 9, -14, -5, -1, -3, 41, -4, -20, -51, 1, -6, 33, 10, 18, -42, -1, -9, 8, 26, -12, -23, -33, -33, -8, -21, -4, -7, -12, 38, -14, -14, -9, -9, -38, -61, -66, 19, -6, -11, 5, 6, 42, -13, 24, -8, 18, -53, -9, 48, -24, -10, -5, -22, 10, -20, 17, -44, -27, 30, 27, 3, 31, 5, 22, -13, -4, -8, 14, -4, 32, -29, -54, -13, 0, 22, 1, 30, 27, 21, 8, 14, 3, -12, -15, 34, -16, 30, 39, -49, -10, -23, 33, 52, 7, -46, 39, -23, 
  -19, 4, -1, -26, -37, 4, -32, 25, 17, 58, -12, -25, -4, -26, -2, -25, -12, 17, -19, 13, 57, -1, -29, -14, 29, -52, -22, 25, 5, -4, -1, -3, -76, -31, 26, 12, 108, -24, 30, -3, 10, -35, 53, -36, 4, -17, 10, 0, 9, -21, 3, -4, 43, 43, -11, 32, -19, 31, 16, -45, -12, 32, -2, 4, 26, 25, 33, -29, -38, 32, -8, 49, -2, 38, 14, -24, 23, -29, -4, 4, -2, 5, 9, 5, 47, -20, -44, 6, 37, -34, -10, -3, -16, -3, 7, 18, -6, -7, -1, 19, -30, -11, 16, -5, 18, -30, -6, -6, 33, 33, 20, 9, -14, 7, 2, -17, -11, -17, -4, 11, -56, 4, 17, 11, 1, 26, 51, 24, 22, -4, 48, -44, -21, 59, 33, 53, 2, 52, 58, -7, 6, -37, 0, 8, -12, 28, 7, 7, 59, 5, -31, 8, 48, -29, -26, 5, -9, 0, 18, 43, -6, 7, 1, 10, 13, -3, 12, -34, 32, -12, 10, -11, 5, 11, 24, -12, 43, -8, -32, 34, 2, 21, -16, 21, 44, -17, -35, 15, 2, -43, -6, -1, 10, 30, 36, -28, -26, 59, -2, 39, -10, 83, 26, -9, 23, -37, 17, -12, 6, 11, 0, 13, 25, -19, -5, -8, 53, -44, 12, -14, 0, -4, 18, 15, 30, -20, -6, 2, 28, -38, 8, 16, 7, -91, -25, -30, -13, 11, -4, 4, 17, 12, 1, -14, -20, -4, -14, -47, -87, 7, -30, -47, -10, 13, 20, 25, 17, 19, 37, -15, -10, 48, -6, 18, 26, 62, 30, 13, 24, -61, -1, -10, 5, -1, -10, -13, 31, 36, -28, -5, 19, 20, -21, -17, 5, 16, 11, -8, 22, -17, 15, 11, -38, -64, 1, 2, 23, -30, -4, -9, -1, -25, 9, 16, -44, 24, -37, 12, 53, 27, 22, -5, 23, -49, 7, 4, -17, 22, 0, -2, 15, 26, 45, -45, 0, -31, -16, 19, -5, 70, 47, 8, 9, -97, 1, 7, -9, 8, 21, -2, 19, 15, -36, -11, 14, 3, 0, 3, 8, -8, 17, 28, -8, -30, -13, 22, 36, 12, 7, -28, 13, -37, -7, 12, -9, 6, -5, 5, 37, -29, 15, 36, 58, -32, -48, 10, 37, 19, -1, 8, 16, 38, 18, 3, 21, 3, 72, -5, -10, 7, -12, 23, -15, 69, 59, 11, -8, -7, 5, 7, 30, 14, 9, -17, 38, 10, 9, -15, -19, 11, -64, 3, -1, 39, 15, 22, -28, -48, -16, 5, 11, -16, 51, -1, 21, -17, -15, -20, 1, 4, 11, -4, 56, 19, -17, -1, 12, 11, -1, 3, 37, -27, -6, 29, 13, -18, 3, -6, 20, -3, 38, 8, 14, 26, 23, 26, 4, 59, 18, -18, 33, -65, -42, 4, -11, 18, -2, -12, 11, 17, -31, -4, 7, 16, -5, -6, -5, 21, -10, -9, 28, -1, 20, -5, 77, -36, -8, 30, 9, -46, -20, 9, 2, -26, 10, -30, 6, 10, 0, 3, -23, -20, -2, -19, -48, -32, 31, 32, -4, -1, -19, 7, 21, 0, 47, -23, 32, 3, -12, -7, -20, 71, 52, -1, 21, -85, -46, 5, 14, 4, -16, 7, 52, -15, -21, -1, 15, 16, -25, -2, -16, 37, -18, 23, 20, -38, -2, -7, 47, -13, 19, -28, -18, 19, -22, 4, 11, -17, -13, -16, 9, 38, -31, -7, 88, -46, -20, -16, 32, 6, 12, 8, 14, -33, -27, -11, -2, -17, 47, -29, 37, 1, 8, 3, -21, 67, 32, -19, -3, -50, -40, -35, 15, 6, 5, -5, 88, 0, 11, -4, -9, -11, 3, 30, -13, 7, -27, 4, 0, -17, -7, 0, -12, 3, 11, -28, 7, 8, -26, 17, -19, -29, 6, 18, -12, 30, -16, 25, 93, 2, 13, -7, 58, -24, 45, 47, 1, 3, -5, 0, 0, -25, 30, -66, 14, 24, -31, 19, -12, 60, 38, -18, 29, -54, -21, -8, 17, -1, 1, 7, 35, 32, -47, -15, 36, 56, 0, 13, -14, 5, 6, -5, 24, -59, -16, 12, 29, 1, -5, 16, 25, -7, -29, 3, -13, -12, -10, -17, 30, 44, 4, -26, 67, -58, 9, -8, -46, -27, -4, 35, -2, 14, 8, 26, -4, -26, 32, -60, 1, -21, -19, -1, -14, 42, 36, -15, 23, -31, -48, -47, 15, -11, 26, -8, 47, 43, 13, -2, 4, -11, 0, -2, -23, 9, -6, -15, 16, 5, -21, 14, -40, 5, 23, 51, -15, 27, -21, -4, -8, 28, -9, -6, -7, -16, 1, 13, 46, 3, 9, -4, -3, -3, 1, -9, 15, 25, 39, 7, -15, 6, 21, -43, -6, 51, -40, 13, -42, -11, -16, -10, -17, -53, 2, -102, 21, 15, -35, 16, -16, -5, 7, -3, -21, 5, -1, 16, -34, 9, 32, 31, 0, -21, 6, 28, -5, 26, 37, 32, -6, 7, 4, -2, -23, -9, -5, -14, 30, 22, 22, 1, -29, -52, -43, 36, 13, 26, -4, -71, -4, -2, -11, 44, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,832 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0072027212008833885, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[8*3*3*1] = { 
  /* [0][0][][] */ 56, 99, 39, 
  /* [0][1][][] */ 127, 84, 28, 
  /* [0][2][][] */ 121, 77, 52, 
  /* [1][0][][] */ 82, -74, 18, 
  /* [1][1][][] */ -127, 120, 89, 
  /* [1][2][][] */ 18, -81, -83, 
  /* [2][0][][] */ 68, -94, -64, 
  /* [2][1][][] */ 33, -91, -17, 
  /* [2][2][][] */ -127, 2, 24, 
  /* [3][0][][] */ 70, 91, -51, 
  /* [3][1][][] */ 1, 81, -10, 
  /* [3][2][][] */ -62, 127, -67, 
  /* [4][0][][] */ 101, 72, -104, 
  /* [4][1][][] */ -1, 84, -103, 
  /* [4][2][][] */ 5, 88, -127, 
  /* [5][0][][] */ 43, -37, 40, 
  /* [5][1][][] */ 97, 86, -51, 
  /* [5][2][][] */ -127, -82, 12, 
  /* [6][0][][] */ -82, -69, -46, 
  /* [6][1][][] */ -39, -57, -24, 
  /* [6][2][][] */ 127, -22, -55, 
  /* [7][0][][] */ -25, -127, 61, 
  /* [7][1][][] */ 92, 83, -31, 
  /* [7][2][][] */ -59, 43, -8, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant7_scale = { 8, { 0.0028279856778681278, 0.0028019575402140617, 0.0032756831496953964, 0.0025282024871557951, 0.0022767724003642797, 0.0028770880308002234, 0.004028677474707365, 0.003077732166275382, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[16*3*3*8] = { 
  /* [0][0][][] */ 24,-103,-91,25,-6,-123,-68,-85, 38,-71,-34,-50,-37,-127,-42,-78, 2,-59,18,4,12,-76,-6,-50, 
  /* [0][1][][] */ 54,-73,-64,51,55,-54,-45,-20, -4,-45,16,-25,-41,-76,-22,-24, -12,39,16,8,17,32,29,-3, 
  /* [0][2][][] */ 4,-17,-44,25,37,-22,-48,-22, 57,-9,-44,12,15,-57,-28,-6, 9,47,16,33,-12,0,24,57, 
  /* [1][0][][] */ 64,-53,-127,14,8,-84,-56,-48, -56,-16,37,-9,-29,56,-33,-52, -74,16,-19,-12,21,-42,-35,-45, 
  /* [1][1][][] */ 11,-97,-69,42,53,-65,-25,-28, -78,7,24,-51,-59,26,-11,35, -99,18,22,4,25,-18,24,6, 
  /* [1][2][][] */ 59,-43,-54,52,8,-9,-19,-33, -44,44,-41,-27,-35,-9,-3,29, -47,-20,33,29,46,-36,26,-10, 
  /* [2][0][][] */ 28,-37,-6,-19,-8,-86,-25,-42, 74,-80,24,50,8,-71,-1,-61, -42,-34,49,-42,-13,-68,51,-12, 
  /* [2][1][][] */ 40,1,44,47,12,14,-10,11, 16,-90,-4,-4,21,-127,-21,-75, -35,-55,2,21,-5,-62,9,-37, 
  /* [2][2][][] */ 10,40,-6,-23,-51,25,9,-65, 42,-81,-82,25,18,-66,-56,-78, -35,-61,-14,0,-3,-111,36,-64, 
  /* [3][0][][] */ -85,28,34,-68,-127,45,-24,62, -24,8,49,14,15,50,85,46, 7,-28,6,0,-17,-33,17,12, 
  /* [3][1][][] */ -79,-69,6,-55,-53,-44,-22,88, -42,31,39,-16,-14,91,-3,-31, 12,34,-39,4,-28,-9,-27,-17, 
  /* [3][2][][] */ -53,-50,-43,-11,-43,32,-90,-34, -31,24,18,12,-37,-19,122,-45, -10,53,-32,13,5,-9,-1,13, 
  /* [4][0][][] */ 13,-1,44,12,35,13,29,33, -32,13,6,-9,-8,-52,67,-31, 14,3,22,22,22,8,26,79, 
  /* [4][1][][] */ -20,-63,-91,-27,-40,-25,-69,-68, 4,-27,-41,-3,-13,-70,-35,-31, -10,-11,-84,20,16,-37,-35,-25, 
  /* [4][2][][] */ -6,-109,-71,-10,-27,-91,-109,-53, 8,-53,-61,4,-30,-109,-60,-127, -31,18,-24,8,39,-9,11,5, 
  /* [5][0][][] */ 14,-83,5,-74,-88,10,-55,-18, -84,15,-95,-8,-42,21,-60,-43, -10,52,-45,-15,10,10,-68,2, 
  /* [5][1][][] */ -14,-28,-15,-35,-80,-65,57,56, -11,-106,-32,-111,-36,-47,-11,-30, -41,61,-12,4,-23,-44,-26,-59, 
  /* [5][2][][] */ 9,-62,-39,45,-13,44,8,-3, -102,15,-49,-83,-7,26,8,-67, -127,-31,72,37,67,57,38,-55, 
  /* [6][0][][] */ 34,26,-51,-29,-69,54,-28,-41, -27,-37,-16,-1,7,26,-78,-51, -51,-51,-60,-24,-70,-71,-94,-13, 
  /* [6][1][][] */ 9,-54,17,-73,-106,72,-9,56, -6,16,-69,-5,7,-37,127,-4, -89,16,-68,-76,-68,-2,37,-53, 
  /* [6][2][][] */ -94,2,-17,-21,-70,95,-87,23, 26,9,-82,52,1,19,-71,16, -38,-35,-43,-22,7,10,50,63, 
  /* [7][0][][] */ -46,-41,70,-26,-4,-68,10,18, -5,-98,-25,-13,-21,-101,19,-25, 39,-78,-30,45,25,-23,-27,-55, 
  /* [7][1][][] */ 54,-49,4,7,103,-76,12,23, 8,-83,19,-8,-13,-55,35,-64, -8,-75,-21,24,52,-127,59,-91, 
  /* [7][2][][] */ 90,-40,50,21,63,-20,-37,-13, -62,-33,59,26,-1,-4,-4,-69, 0,-69,55,-11,1,-3,-25,-49, 
  /* [8][0][][] */ -56,-62,12,3,22,-15,-55,-8, -8,21,41,48,35,34,-12,82, -19,2,17,-34,-52,2,38,12, 
  /* [8][1][][] */ -86,-61,-95,-67,-30,-103,-65,-22, -15,-16,25,42,47,45,-48,119, 24,67,-37,-10,-69,-53,-15,5, 
  /* [8][2][][] */ -91,-80,-87,-55,-127,-112,-106,-60, -45,47,0,-22,-34,9,-68,51, 19,-14,-48,-5,-42,9,-74,17, 
  /* [9][0][][] */ 11,-16,27,-21,-1,18,-11,-17, -4,-14,-11,-64,-59,-34,4,-39, -6,13,-2,1,22,-17,1,27, 
  /* [9][1][][] */ -86,24,29,-10,-11,3,10,-35, -22,-17,-17,-66,-74,-8,-20,7, -1,13,-15,12,-8,15,-52,26, 
  /* [9][2][][] */ -84,-54,58,-29,-59,13,35,-21, -105,-56,-44,-93,-78,-127,-27,-118, -11,-9,-53,-47,-48,-18,-26,-36, 
  /* [10][0][][] */ 16,-20,75,-31,-64,-2,-43,47, 90,-68,27,-2,2,-66,-13,-18, -81,10,3,-66,-24,-10,75,-75, 
  /* [10][1][][] */ -6,58,-16,6,-47,14,-16,24, 5,-127,28,5,21,-30,18,-28, -55,5,14,-110,-53,-105,41,-5, 
  /* [10][2][][] */ -57,55,-36,-1,-10,-51,59,-19, 41,-48,-49,28,15,-45,-7,-65, -30,-27,0,-125,-61,-22,-4,-62, 
  /* [11][0][][] */ 29,-112,-65,50,42,-62,8,25, -97,2,12,-44,-38,-16,23,20, 21,-18,-41,32,84,-83,70,12, 
  /* [11][1][][] */ 32,-45,-112,18,15,3,0,-31, -87,-36,17,-18,25,-10,46,-37, 14,-14,-66,28,69,17,-23,8, 
  /* [11][2][][] */ -11,-127,-91,46,26,-12,-47,-111, -71,-10,-8,31,78,-42,43,-42, -34,-4,-22,87,122,10,7,10, 
  /* [12][0][][] */ 17,23,-35,23,46,30,30,24, -102,22,36,16,1,23,15,-7, 3,13,0,-32,-18,-43,19,12, 
  /* [12][1][][] */ 2,16,11,104,28,-44,18,-6, -89,-33,-11,-14,-11,-14,-42,30, 80,-26,-109,31,-10,-24,-127,-11, 
  /* [12][2][][] */ -28,27,40,24,50,7,-35,13, -47,-30,-69,-16,-28,-52,7,-12, 8,-22,-99,-10,-40,32,-99,-26, 
  /* [13][0][][] */ -69,-52,25,-65,-67,-73,34,-74, 16,35,-81,8,-30,-55,-42,5, 42,-7,-6,4,10,24,-31,-12, 
  /* [13][1][][] */ -67,46,127,-75,-16,-13,82,-30, 14,19,8,1,9,49,-63,-4, -20,-51,15,-32,-19,-3,-103,16, 
  /* [13][2][][] */ -36,-2,35,-28,-23,-31,65,-11, 23,40,23,5,61,14,-7,-14, -11,-2,-13,-52,-79,-18,-25,17, 
  /* [14][0][][] */ -53,23,-7,-54,-84,60,-26,-59, -63,24,38,-24,8,56,-55,-20, -73,39,45,-54,-39,20,13,14, 
  /* [14][1][][] */ -48,4,77,-65,-38,68,-37,32, -127,85,47,-85,-64,17,102,28, -24,-17,-75,33,-26,-52,-11,23, 
  /* [14][2][][] */ -17,-3,-36,-15,-54,15,-99,17, 58,80,61,-40,-31,-49,-28,88, 52,-18,24,21,57,9,-65,-20, 
  /* [15][0][][] */ 2,-16,13,4,-1,-60,-61,-55, -21,-32,5,-104,26,33,73,-70, -5,38,7,-70,-127,8,-63,38, 
  /* [15][1][][] */ -1,-23,37,6,10,2,32,23, -51,17,28,-84,-94,42,41,68, -17,-35,11,-69,-82,-12,63,48, 
  /* [15][2][][] */ -30,-1,2,11,28,34,-9,-14, 4,22,45,-60,-45,38,-11,-5, 0,34,-39,-8,-19,4,-13,8, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0052929557859897614, 0.0056856293231248856, 0.0062561081722378731, 0.0047174370847642422, 0.0071928128600120544, 0.00571864889934659, 0.0041225813329219818, 0.0046770595945417881, 0.0052389102056622505, 0.0075253662653267384, 0.0055833738297224045, 0.0034959632903337479, 0.0048414240591228008, 0.0060182651504874229, 0.0035693831741809845, 0.0043827798217535019, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,49,13,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.045116707682609558, } };
const TfArray<1, int> quant9_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,49,13,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.016844185069203377, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,25,7,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.016844185069203377, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,25,7,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.01520959660410881, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,13,4,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.01520959660410881, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,832 } };
const TfArray<1, float> quant14_scale = { 1, { 0.01520959660410881, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.093518704175949097, } };
const TfArray<1, int> quant15_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,2 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,7,3 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,8,4 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,1 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,6,5 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 2496, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5104, (TfLiteIntArray*)&tensor_dimension9, 637, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 5096, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 5104, (TfLiteIntArray*)&tensor_dimension11, 1400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 2800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 2800, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
