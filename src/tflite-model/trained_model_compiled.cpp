/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 09.12.2021 21:31:34

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

#define EI_CLASSIFIER_ALLOCATION_STATIC 1

namespace {

constexpr int kTensorArenaSize = 237280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[72];
TfLiteEvalTensor tflEvalTensors[72];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = {
  0, 0,
  0, 1,
  0, 1,
  0, 0,
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[32] = { -1815, -1108, -1007, -880, 2404, -269, 2909, 1709, -563, -17, -1051, -1374, 2789, -1724, 2010, -1182, -1027, 503, -505, -288, 3130, -1556, 3138, -669, -266, 2467, 1624, -875, -615, -1470, -818, 1459, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 6.1218153859954327e-05, 7.048239785945043e-05, 5.9728758060373366e-05, 5.8804995205719024e-05, 7.543293759226799e-05, 6.7830405896529555e-05, 8.4555700595956296e-05, 6.6601685830391943e-05, 6.5304098825436085e-05, 5.6266053434228525e-05, 6.1830018239561468e-05, 6.0880389355588704e-05, 8.9474473497830331e-05, 7.0455302193295211e-05, 6.9596637331414968e-05, 6.6951535700354725e-05, 6.071171083021909e-05, 6.2735140090808272e-05, 6.4069063228089362e-05, 6.5100030042231083e-05, 7.6080199505668133e-05, 6.6552689531818032e-05, 0.00010242505231872201, 7.0402173150796443e-05, 7.2220296715386212e-05, 9.0992289187852293e-05, 7.7873817645013332e-05, 6.1740283854305744e-05, 7.7076627349015325e-05, 6.3203289755620062e-05, 6.7258784838486463e-05, 7.2133319918066263e-05, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[8] = { -33650, 12509, 16768, -21587, -13640, -21877, 42741, 11760, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 3.9111386286094785e-05, 0.00011089445615652949, 7.5471856689546257e-05, 7.1167472924571484e-05, 8.0640173109713942e-05, 6.1242200899869204e-05, 3.5858705814462155e-05, 8.2413178461138159e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[48] = { -581, 1601, 1586, -33, -834, 340, 864, -355, -150, 121, 1986, -541, -1038, -879, -874, 1151, 177, 1194, 1365, -542, -1791, -1365, 2951, -1131, 695, -1404, 1221, 1020, -1607, 148, -1857, 301, 645, 157, -211, -1541, -179, 630, -863, -63, 1654, 597, -1847, 1085, 330, 2322, -1259, 1288, };
const TfArray<1, int> tensor_dimension4 = { 1, { 48 } };
const TfArray<48, float> quant4_scale = { 48, { 0.0003418586275074631, 0.00042811047751456499, 0.0003286342544015497, 0.00030512225930579007, 0.00052886782214045525, 0.00043909446685574949, 0.00046197121264412999, 0.0003364412987139076, 0.0001957529311766848, 0.00038301906897686422, 0.00035604744334705174, 0.00028258617385290563, 0.00020436488557606936, 0.00052877108100801706, 0.00024226336972787976, 0.00037709603202529252, 0.00025690594338811934, 0.00023156187671702355, 0.00045498029794543982, 0.00022491764684673399, 0.00020322934142313898, 0.000332490453729406, 0.0002286859235027805, 0.00028476797160692513, 0.0002345772081753239, 0.00024390632461290807, 0.00027187773957848549, 0.00037310615880414844, 0.00029766588704660535, 0.00026156954118050635, 0.00027194456197321415, 0.00051812402671203017, 0.000419732736190781, 0.00034344353480264544, 0.00046727669541724026, 0.00043271298636682332, 0.00036548695061355829, 0.00033063325099647045, 0.00078099715756252408, 0.00031731196213513613, 0.00028555956669151783, 0.00028295849915593863, 0.0002206216158811003, 0.00030196711304597557, 0.00030305792461149395, 0.00030871076160110533, 0.00041421054629608989, 0.00032230906072072685, } };
const TfArray<48, int> quant4_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[48] = { -2292, 4254, 1138, -4804, -5262, 3176, 4768, -2976, -2715, -3025, -2820, 4603, 938, -5361, -4297, 655, 560, -3772, -2683, -7647, -426, 8124, -2944, 8528, -2300, -1440, 266, -2511, -2385, 2057, -8971, 532, 2786, -3469, -5499, 4015, -665, -3983, -7406, 5815, -3342, 8617, 5493, -4865, -1808, 6298, -1239, -3810, };
const TfArray<1, int> tensor_dimension5 = { 1, { 48 } };
const TfArray<48, float> quant5_scale = { 48, { 0.00016110778960864991, 0.00016285741003230214, 0.00030054990202188492, 0.00018582318443804979, 0.0001551149325678125, 0.00021362515690270811, 0.00019758650159928948, 0.00012752013572026044, 0.0002345823886571452, 0.00014659251610282809, 0.00030998175498098135, 0.00018174362776335329, 0.00013763416791334748, 0.00013465619122143835, 0.00013119052164256573, 0.0002036856603808701, 0.00016945728566497564, 0.00021065265173092484, 0.00018500960140954703, 0.00012686192349065095, 0.00050299637950956821, 0.00010669681068975478, 0.00028169059078209102, 0.00010579197987681255, 0.0002822644601110369, 0.00021642698266077787, 0.0002317279577255249, 0.00026138967950828373, 0.00021884196030441672, 0.00031584806856699288, 9.530934039503336e-05, 0.0003073657862842083, 0.00016504705126862973, 0.00017483827832620591, 0.00012336982763372362, 7.7904129284434021e-05, 0.00024923274759203196, 0.00018604319484438747, 6.9895329943392426e-05, 0.00012933596735820174, 0.0002198327420046553, 9.3175360234454274e-05, 0.00011037378862965852, 0.00022195435303729028, 0.00021049071801826358, 0.00016225235594902188, 0.00018029034254141152, 0.00014615316467825323, } };
const TfArray<48, int> quant5_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[48] = { -231, -29, -300, -815, -366, -13, -563, 219, -243, 603, -584, 13, -454, -434, 401, -297, -1025, -368, 701, -36, 0, -169, 57, -190, 209, 181, -41, 125, 72, 112, 12, 130, -153, 19, -127, 392, 110, -122, -364, -1372, -418, -765, -186, 74, 238, -406, -203, 210, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00035564080462791026, 0.00025847344659268856, 0.00035166685120202601, 0.0002686290827114135, 0.00026200828142464161, 0.00041166626033373177, 0.00031301219132728875, 0.00033273693406954408, 0.00038597092498093843, 0.00035466373083181679, 0.00026048810104839504, 0.0003451784432400018, 0.00020433111058082432, 0.00035515919444151223, 0.00036043659201823175, 0.00039140597800724208, 0.00021923187887296081, 0.00043331211782060564, 0.00025038450257852674, 0.00028068371466360986, 0.00045519284321926534, 0.00051677320152521133, 0.00041549446177668869, 0.00025838022702373564, 0.00036791770253330469, 0.00043866876512765884, 0.00036468551843427122, 0.00037234145565889776, 0.00029264154727570713, 0.0002822843671310693, 0.00031382168526761234, 0.00035536219365894794, 0.00025386290508322418, 0.00046141949133016169, 0.00031850644154474139, 0.00023240179871208966, 0.00031834430410526693, 0.0002945626329164952, 0.00021530179947149009, 0.00016462449275422841, 0.00021610461408272386, 0.00020070809114258736, 0.00020610692445188761, 0.00033255759626626968, 0.00031467981170862913, 0.00030905223684385419, 0.000528308330103755, 0.00030345239792950451, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -393, -1974, 4399, -1841, 2501, 5481, -653, 4561, 4952, -12766, 34, 4716, -3866, 2849, -2420, -4974, 915, -2252, 1735, 1394, 8612, -4072, -34, -6647, 921, 1382, 1021, -2661, 2196, -1825, 8883, 4156, -3681, 4521, 1329, -1332, -2966, 5218, -4010, -1004, 4317, 3860, -2297, 7278, 4186, 954, -2019, 3204, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00033538619754835963, 0.0003193026059307158, 0.00015264748071786016, 0.00024872456560842693, 0.00016593093459960073, 0.0001008333420031704, 0.00020639423746615648, 0.00016254073125310242, 0.00011742198694264516, 8.7973938207142055e-05, 0.00046529425890184939, 0.00015678451745770872, 0.00015307783905882388, 0.00019616454665083438, 0.00020427217532414943, 0.00012308001169003546, 0.00030971309752203524, 0.00019486121891532093, 0.0002520291309338063, 0.00016974352183751762, 0.00011098769755335525, 0.00016964074166025966, 0.00012728774163406342, 0.00011302346683805808, 0.00023192384105641395, 0.00012386836169753224, 0.0001979479129659012, 0.00023363286163657904, 0.00024811335606500506, 0.00015043164603412151, 0.00011549649207154289, 0.00013348166248761117, 0.00017062932602129877, 0.00020260061137378216, 0.00024035657406784594, 0.0003063390904571861, 0.00032474496401846409, 0.00011101333802798763, 0.00022824370535090566, 0.00031799791031517088, 0.00013029006368014961, 0.00013638284872286022, 0.00017395743634551764, 0.00011321394413243979, 0.00024715595645830035, 0.00017484121781308204, 0.00011543900473043323, 0.00019281925051473081, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { 148, -180, 130, 308, -310, 158, -825, -306, 591, -193, 836, 81, 92, 152, -35, 18, -110, -240, -897, -844, -46, 172, -360, -267, -73, -87, -20, -176, 76, -612, -383, 57, -369, -63, -667, -744, 164, 1041, 130, -168, 155, 113, 637, -317, 61, -196, 333, -379, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00031575921457260847, 0.00024305029364768416, 0.00028657281654886901, 0.00024484682944603264, 0.00032146225566975772, 0.00032934540649875998, 0.00024110895174089819, 0.00032458771602250636, 0.00030943515594117343, 0.00029246063786558807, 0.00018970367091242224, 0.00021373630443122238, 0.00031909646349959075, 0.00028618727810680866, 0.00045078221592120826, 0.00023377126490231603, 0.00035717047285288572, 0.00041027212864719331, 0.0002173372486140579, 0.00020621577277779579, 0.00028595246840268373, 0.00032427601399831474, 0.00023651409719604999, 0.00032157907844521105, 0.00021276582265272737, 0.00025638280203565955, 0.0004663575382437557, 0.00033998049912042916, 0.00032266924972645938, 0.00030455910018645227, 0.00032963172998279333, 0.00031706347363069654, 0.00026071298634633422, 0.00022564228856936097, 0.00024414001381956041, 0.00021436563110910356, 0.00035529086017049849, 0.00018661616195458919, 0.00030118587892502546, 0.00024715965264476836, 0.00024511475930921733, 0.00037132628494873643, 0.00023237153072841465, 0.00031396670965477824, 0.00023905746638774872, 0.00024276664771605283, 0.00039921174175105989, 0.00025512004503980279, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[8] = { 4608, 3403, -2312, 1891, -1127, -148, -7807, 1194, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 0.000156782814883627, 0.00020350614795461297, 0.00029588284087367356, 0.00031669178861193359, 0.00026659676223061979, 0.00036371516762301326, 0.00011246281064813957, 0.00018720886146184057, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { 1941, -3391, -2874, 4743, -4732, 2651, -831, -3409, -2842, -2804, 1514, -4369, -697, 4580, -6570, -3310, 1561, -3329, 1094, -5171, -3341, -2527, 5342, -2207, -2313, -1968, -4079, -528, 2504, 7151, -4727, 7651, -2367, -1953, -1124, 2012, 6978, 93, 9270, -3076, -9672, 2139, 2188, 2538, 1948, -1831, -5259, 1261, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00015379322576336563, 0.00019682823040056974, 0.00017930370813701302, 0.00017441605450585485, 0.00014245478087104857, 0.00022121686197351664, 0.00035653699887916446, 0.00023362689535133541, 0.00017018202925100923, 0.00013812317047268152, 0.00035794140421785414, 0.00013217590458225459, 0.00018326631106901914, 0.0001453497534384951, 0.00014227794599719346, 0.00023454018810298294, 0.00019784500182140619, 0.00019154509936925024, 0.00024853597278706729, 0.00013979371578898281, 0.00013856399164069444, 0.00019756841356866062, 0.00013611983740702271, 0.00025503188953734934, 0.00016979052452370524, 0.00017815569299273193, 0.00019252157653681934, 0.00027143856277689338, 0.00010378255683463067, 0.00013792025856673717, 0.00016524562670383602, 0.00013887521345168352, 0.00017681844474282116, 0.0002556365798227489, 0.00025496771559119225, 0.00028942382778041065, 0.00012748525477945805, 0.00014835745969321579, 9.3263530288822949e-05, 0.00022931379498913884, 0.00011330229608574882, 0.00032372423447668552, 0.00015424976299982518, 0.00016707659233361483, 0.00018496921984478831, 0.00022978898778092116, 0.00013502388901542872, 0.00019607535796239972, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 75, -179, 482, 1113, -977, -479, 84, 130, 270, 82, -153, 403, 1390, -1342, 923, 254, 277, -39, -201, 278, 262, 885, -669, 448, -66, -93, -280, 12, 43, -598, 55, 273, 279, 824, 118, 1059, 853, -918, 247, 116, 99, 89, -602, 119, -89, -1232, 176, 368, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00025120543432421982, 0.0002434591151541099, 0.00019759344286285341, 0.00010728171764640138, 0.00030703310039825737, 0.00024018246040213853, 0.00017189343634527177, 0.00037355840322561562, 0.00026298390002921224, 0.00023259194858837873, 0.00020545515872072428, 0.00018219367484562099, 0.00018966385687235743, 0.00017977028619498014, 0.00020561298879329115, 0.00026434846222400665, 0.00032153003849089146, 0.00021673495939467102, 0.00037118775071576238, 0.00024614864378236234, 0.00035927555290982127, 0.00029225432081148028, 0.0002069470938295126, 0.00024036402464844286, 0.00021757118520326912, 0.00028561305953189731, 0.0002872982295230031, 0.00029697743593715131, 0.0001915506727527827, 0.0002822415845002979, 0.00028950555133633316, 0.00026187265757471323, 0.00035217349068261683, 0.00015649940178263932, 0.00022028428793419152, 0.00017550137999933213, 0.00026974547654390335, 0.00015707877173554152, 0.00024587134248577058, 0.0002026574220508337, 0.00028415824635885656, 0.00022249724133871496, 0.00027094356482848525, 0.00039378079236485064, 0.00028187109273858368, 0.00019260052067693323, 0.00029244954930618405, 0.00016448809765279293, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { -1749, -3255, 3594, 5546, -2012, 1167, -1435, 1001, -4894, 1881, -7821, -930, 2473, -2097, -2650, 4581, 3567, 3529, 7322, -7640, 9763, 2644, 579, 8359, -7424, -925, 2546, -2111, 2503, -3682, 1227, -10183, 3717, 499, -1138, 9486, -3205, -5303, -5685, 3026, 5593, 8274, -1253, -4238, -1377, -4815, 1072, -7330, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00019389174121897668, 0.00019691771012730896, 0.00022892643755767494, 0.00016043697542045265, 0.00023976578086148947, 0.00027550922823138535, 0.00016431914991699159, 0.00018096240819431841, 0.00019265840819571167, 0.00018339665257371962, 0.00013994179607834667, 0.00029463318060152233, 0.00026688823709264398, 0.00035089789889752865, 0.00014536424714606255, 0.00012528411753010005, 0.0002071551134577021, 0.00016032325220294297, 0.00010107153502758592, 9.3644586740992963e-05, 0.0001741580490488559, 0.00025307605392299592, 0.00025412614922970533, 0.00017404062964487821, 9.3514849140774459e-05, 0.00016429598326794803, 0.00024199041945394129, 0.00014885530981700867, 0.00030021811835467815, 0.00024152014520950615, 0.0001817488664528355, 0.00010094112803926691, 0.00018407945754006505, 0.00018264293612446636, 0.00020967077580280602, 0.00012890639482066035, 0.00014152130461297929, 0.00011741193884517998, 0.00015785616415087134, 0.0002095756062772125, 0.00011738324974430725, 0.00012450336362235248, 0.00019971064466517419, 0.00016603476251475513, 0.00022832911054138094, 0.00013375302660278976, 0.00019225191499572247, 0.00016414679703302681, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { -666, -297, 547, -454, 276, -72, -545, 483, 582, -246, -305, 105, 649, 483, -476, -123, -1263, 138, 574, -516, -294, 52, -261, 438, -29, -969, 174, -3372, 484, -7, 203, 670, -136, 541, -872, 328, -1206, -735, 191, 191, -355, 2, 1304, 923, 118, 189, -101, -199, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00019319445709697902, 0.00021402629499789327, 0.00014169233327265829, 0.00017233614926226437, 0.00025210966123268008, 0.00018946421914733946, 0.0002155707188649103, 0.0002032201737165451, 0.0002517507818993181, 0.00021940282022114843, 0.00012702494859695435, 0.0001886752579594031, 0.00020982793648727238, 0.00023349099501501769, 0.00020069582387804985, 0.00019066329696215689, 0.00012697778583969921, 0.00020477492944337428, 0.00020777387544512749, 0.00023693052935414016, 0.00021493139502126724, 0.0002746713871601969, 0.00026150618214160204, 0.00017270974058192223, 0.00019817458814941347, 0.0001534767507109791, 0.00012713305477518588, 0.00010432385897729546, 0.00029433640884235501, 0.0001993161131395027, 0.00015944070764817297, 0.00017876320634968579, 0.00039790480514056981, 0.00030890124617144465, 0.00013267912436276674, 0.00041427722317166626, 0.00016515069000888616, 0.00024306900741066784, 0.00026757310843095183, 0.00020656711421906948, 0.00026429435820318758, 0.00022548745619133115, 0.0002034663048107177, 0.00016200727259274572, 0.00019668917229864746, 0.00027795240748673677, 0.00024380497052334249, 0.00018223511870019138, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { 6523, 508, -613, -2560, -497, -6730, 4852, 7811, 12611, -3691, -5515, -11, 4934, 4225, -4591, 11098, 3635, -1023, -2647, -4558, -6023, 11566, 1870, -4122, -2434, -1729, 2707, -287, 4505, 2911, -8132, -2308, -372, 2563, -4897, 18, -5315, -2754, 3000, 8048, -2289, 7535, 649, 2519, 1829, -2411, -1867, -1921, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 9.8720098321791738e-05, 0.00017873103206511587, 0.00014417755301110446, 0.00020523311104625463, 0.00016906979726627469, 9.8660173534881324e-05, 0.00014527433086186647, 0.00010797489085234702, 7.1472342824563384e-05, 0.00019717311079148203, 0.00021621760970447212, 0.00030780176166445017, 0.00018678154447115958, 0.00019115288159810007, 0.00013597641373053193, 7.3431474447716027e-05, 0.00015118252485990524, 0.00019480717310216278, 0.00021483402815647423, 0.00015464330499526113, 0.00010766671766759828, 8.4100873209536076e-05, 0.00025080345221795142, 0.00021514970285352319, 0.00027678106562234461, 0.00018453350639902055, 0.00014683169138152152, 0.00037325674202293158, 0.00016185142158064991, 0.00010403617488918826, 0.00010483062214916572, 0.00028747849864885211, 0.00021377785014919937, 0.00025174778420478106, 0.00010378695878898725, 0.00018694419122766703, 0.00012029860226903111, 0.00019758324197027832, 0.00021438809926621616, 0.00011957668175455183, 0.00024637035676278174, 0.00013739881978835911, 0.00031234277412295341, 0.00018838513642549515, 0.00014089280739426613, 0.00019493130093906075, 0.00018925107724498957, 0.00017051154281944036, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { 1116, -427, 1261, 1092, 118, -622, 788, -115, -618, 936, 258, 1243, -1322, -339, 354, 1073, 71, -325, 33, 419, 249, 1298, 703, 706, -514, 204, -356, 238, 1099, -72, -129, 957, -277, 993, 602, 1301, 285, 118, -879, 464, -123, 974, 154, 81, 971, 40, -368, -604, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00024662099895067513, 0.00019129093561787158, 0.00026008480926975608, 0.00020953342027496547, 0.00018328876467421651, 0.00014246904174797237, 0.00022426455689128488, 0.0002048177266260609, 0.00018226487736683339, 0.00025753554655238986, 0.00025654450291767716, 0.00029322272166609764, 0.00016779136785771698, 0.0003296644426882267, 0.00023434475588146597, 0.0002362096420256421, 0.00023305401555262506, 0.00016885990044102073, 0.00034408131614327431, 0.00016181966930162162, 0.00021141881006769836, 0.00019876395526807755, 0.00026839258498512208, 0.00017239146109204739, 0.00022723879374098033, 0.00026597347459755838, 0.00018897373229265213, 0.0001990978344110772, 0.0002343478990951553, 0.00017471451428718865, 0.00012510769010987133, 0.00030825525755062699, 0.00040671491296961904, 0.00030740440706722438, 0.00026139660621993244, 0.00024478632258251309, 0.00020983615831937641, 0.00032339742756448686, 0.00018158320744987577, 0.0001968006108654663, 0.00015051043010316789, 0.00019666244043037295, 0.00027580483583733439, 0.0002826069830916822, 0.00017843832029029727, 0.00039351763552986085, 0.0001881916105048731, 0.00023354313452728093, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int8_t tensor_data16[8*3*3*1] = {
  /* [0][0][][] */ -75, 53, -38,
  /* [0][1][][] */ 99, 111, -58,
  /* [0][2][][] */ 54, 111, 127,
  /* [1][0][][] */ 35, 14, -8,
  /* [1][1][][] */ -18, -3, 5,
  /* [1][2][][] */ -4, -127, -41,
  /* [2][0][][] */ 23, -83, -102,
  /* [2][1][][] */ 113, -100, -102,
  /* [2][2][][] */ -61, 127, -11,
  /* [3][0][][] */ -67, 127, -22,
  /* [3][1][][] */ 101, 95, -46,
  /* [3][2][][] */ -31, 52, 26,
  /* [4][0][][] */ 28, 63, -74,
  /* [4][1][][] */ 78, 127, -52,
  /* [4][2][][] */ 60, 21, -107,
  /* [5][0][][] */ 127, 79, 5,
  /* [5][1][][] */ 52, -1, 1,
  /* [5][2][][] */ -61, -63, 118,
  /* [6][0][][] */ -73, -49, -88,
  /* [6][1][][] */ -108, -52, -22,
  /* [6][2][][] */ 56, -3, -127,
  /* [7][0][][] */ -41, -123, -127,
  /* [7][1][][] */ 90, 66, -78,
  /* [7][2][][] */ -22, 105, 1,
};
const TfArray<4, int> tensor_dimension16 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant16_scale = { 8, { 0.0099734030663967133, 0.028278084471821785, 0.019245322793722153, 0.018147705122828484, 0.020563242956995964, 0.015616760589182377, 0.0091439690440893173, 0.021015359088778496, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int8_t tensor_data17[8*1*1*8] = {
  /* [0][0][][] */ -8,5,-18,-100,24,25,-93,127,
  /* [1][0][][] */ 76,101,36,109,92,-127,-91,-60,
  /* [2][0][][] */ -127,-73,47,29,29,124,-113,55,
  /* [3][0][][] */ -93,62,-4,7,-127,-78,40,-33,
  /* [4][0][][] */ -22,55,-22,13,14,-14,127,-6,
  /* [5][0][][] */ -2,68,81,-61,112,-43,127,36,
  /* [6][0][][] */ -110,125,57,-45,-104,12,-94,127,
  /* [7][0][][] */ 127,16,-23,-117,103,-98,-20,21,
};
const TfArray<4, int> tensor_dimension17 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant17_scale = { 8, { 0.0060008992440998554, 0.010426254011690617, 0.0075436001643538475, 0.0083419149741530418, 0.012823591008782387, 0.0072179450653493404, 0.0075725056231021881, 0.010395850986242294, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int8_t tensor_data18[48*1*1*8] = {
  /* [0][0][][] */ 34,-16,127,-81,-27,-47,70,-37,
  /* [1][0][][] */ -10,-56,-61,-127,-59,-16,35,87,
  /* [2][0][][] */ -79,-41,84,58,-36,-127,-60,-52,
  /* [3][0][][] */ 38,-66,-57,127,-31,4,-48,-59,
  /* [4][0][][] */ 34,127,11,3,-38,-41,8,2,
  /* [5][0][][] */ -123,-114,116,47,92,-127,57,18,
  /* [6][0][][] */ -39,43,68,-8,89,-30,-127,-102,
  /* [7][0][][] */ 95,-98,-53,-105,65,28,127,25,
  /* [8][0][][] */ -82,127,-48,-102,-61,70,-81,119,
  /* [9][0][][] */ 46,-127,34,-25,96,-8,57,-32,
  /* [10][0][][] */ -94,-39,42,-127,-12,-19,-69,-85,
  /* [11][0][][] */ 126,-127,-95,30,-68,113,89,69,
  /* [12][0][][] */ -23,-73,113,-100,110,-69,23,127,
  /* [13][0][][] */ -77,58,-26,-6,47,6,127,39,
  /* [14][0][][] */ -53,102,117,-127,28,75,0,37,
  /* [15][0][][] */ -127,-126,25,-61,-121,9,62,79,
  /* [16][0][][] */ 31,-127,113,-96,-8,86,19,-59,
  /* [17][0][][] */ -62,97,-127,56,-115,-95,-41,52,
  /* [18][0][][] */ 27,-73,-43,-101,94,-70,70,-127,
  /* [19][0][][] */ 55,26,-77,93,-95,22,104,-127,
  /* [20][0][][] */ -115,13,-42,-6,94,127,6,48,
  /* [21][0][][] */ -108,80,127,28,97,85,-62,-15,
  /* [22][0][][] */ -106,20,-55,-127,-104,-105,-48,39,
  /* [23][0][][] */ -27,-47,68,-39,127,83,31,34,
  /* [24][0][][] */ 121,-124,-62,-119,-127,-5,46,49,
  /* [25][0][][] */ 109,-99,22,127,-57,120,1,107,
  /* [26][0][][] */ -46,-43,57,57,-21,-105,-44,-127,
  /* [27][0][][] */ -48,91,21,-127,-15,-54,-22,-59,
  /* [28][0][][] */ 127,57,113,4,13,-15,26,-113,
  /* [29][0][][] */ 48,-35,-84,127,69,22,-10,-37,
  /* [30][0][][] */ -24,-21,-102,64,90,127,123,36,
  /* [31][0][][] */ 27,3,-84,-3,-18,-64,-27,127,
  /* [32][0][][] */ 69,127,-52,-116,-68,38,-66,12,
  /* [33][0][][] */ -32,-40,9,-84,-117,34,127,-18,
  /* [34][0][][] */ 34,-36,-48,127,-61,43,-117,60,
  /* [35][0][][] */ -23,114,127,-3,-75,74,18,31,
  /* [36][0][][] */ -10,-97,127,0,-66,53,0,-17,
  /* [37][0][][] */ 14,-127,-46,82,-17,26,4,-73,
  /* [38][0][][] */ -23,36,127,0,0,21,-2,-11,
  /* [39][0][][] */ -13,-36,-64,83,44,127,-55,-94,
  /* [40][0][][] */ -127,-82,-90,26,20,21,6,-66,
  /* [41][0][][] */ -104,-127,-12,-81,63,50,-38,114,
  /* [42][0][][] */ 34,21,-82,42,97,127,-29,98,
  /* [43][0][][] */ -106,-91,18,19,18,-127,67,-14,
  /* [44][0][][] */ 17,-127,79,-11,32,80,-22,-81,
  /* [45][0][][] */ -79,15,-96,-31,-52,-50,-127,15,
  /* [46][0][][] */ 10,41,15,1,127,-13,2,56,
  /* [47][0][][] */ 29,-16,57,-100,-74,-127,-8,39,
};
const TfArray<4, int> tensor_dimension18 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant18_scale = { 48, { 0.004775534849613905, 0.0059804152697324753, 0.0045907995663583279, 0.0042623528279364109, 0.0073879272677004337, 0.0061338543891906738, 0.0064534270204603672, 0.004699858371168375, 0.0027345367707312107, 0.0053505185060203075, 0.0049737431108951569, 0.0039475387893617153, 0.0028548398986458778, 0.007386576384305954, 0.0033842562697827816, 0.0052677779458463192, 0.0035888033453375101, 0.0032347636297345161, 0.0063557685352861881, 0.0031419482547789812, 0.0028389771468937397, 0.0046446677297353745, 0.0031945884693413973, 0.0039780167862772942, 0.0032768857199698687, 0.0034072073176503181, 0.0037979490589350462, 0.0052120420150458813, 0.0041581923142075539, 0.0036539502907544374, 0.0037988827098160982, 0.0072378437034785748, 0.0058633838780224323, 0.0047976751811802387, 0.0065275412052869797, 0.0060447091236710548, 0.0051056067459285259, 0.0046187238767743111, 0.010910004377365112, 0.0044326344504952431, 0.003989074844866991, 0.0039527397602796555, 0.0030819354578852654, 0.0042182775214314461, 0.0042335153557360172, 0.0043124817311763763, 0.0057862424291670322, 0.0045024408027529716, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int8_t tensor_data19[8*1*1*48] = {
  /* [0][0][][] */ 12,61,-15,25,31,88,1,-41,-5,5,-119,-63,38,49,25,12,-94,127,-87,72,-41,-8,9,67,-51,78,-15,-18,89,18,-52,-111,-61,-65,51,-21,22,-39,-7,-54,-74,54,11,-30,65,11,28,-60,
  /* [1][0][][] */ 86,89,77,45,-53,-70,-59,117,100,109,19,26,-42,-75,-56,-16,-56,-40,-35,1,-57,-26,65,99,48,-59,72,127,-55,-34,-25,43,-106,80,119,36,58,-18,55,34,-66,58,-9,-24,-44,50,7,98,
  /* [2][0][][] */ 58,56,10,32,62,-60,67,46,20,-55,63,12,59,105,25,-14,-1,-20,-60,32,12,-127,15,-99,-22,76,-59,-51,-55,25,-58,4,59,58,85,39,3,-44,50,46,-2,-45,-76,69,8,-64,61,-72,
  /* [3][0][][] */ -35,33,-72,-51,-1,-35,127,46,-66,-25,18,-37,49,-9,-17,76,1,-15,79,-35,71,26,-35,56,31,28,-54,-27,-20,7,-28,-1,64,33,20,-39,50,40,-50,24,-26,51,-68,-30,-41,43,2,-40,
  /* [4][0][][] */ 30,-124,123,-104,-49,-23,17,-105,-13,-88,-91,-64,-17,-127,-34,-57,76,110,43,-49,91,1,-73,7,-54,-20,8,-30,0,-29,-87,-45,-98,-54,63,46,-27,-47,-60,27,-76,106,-102,-28,112,27,88,-79,
  /* [5][0][][] */ -44,41,52,-69,-126,-28,-113,-89,-84,82,-6,-6,-31,-48,-97,45,-54,-42,-26,-34,119,-23,-30,4,121,-42,56,-72,7,22,-61,-83,-75,-75,121,13,92,-127,-45,16,82,-19,42,91,93,5,-1,-81,
  /* [6][0][][] */ -124,2,54,48,31,81,-46,26,22,15,-104,-127,-16,35,-22,11,-104,-75,74,9,-72,96,9,-100,0,-15,-57,65,-77,77,-4,4,-37,69,-78,-39,59,83,-18,-81,-68,22,-52,-69,0,100,-68,44,
  /* [7][0][][] */ -7,24,96,35,90,-7,-20,61,15,30,66,-81,22,17,-59,-74,-8,41,71,27,-119,-84,38,-79,85,2,51,-45,29,-80,-47,78,54,-22,-24,-127,101,-10,58,-45,-67,9,48,-43,-19,12,-52,-73,
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0031971819698810577, 0.0025874513667076826, 0.0031353046651929617, 0.0046027111820876598, 0.003082809504121542, 0.0021588597446680069, 0.0033022731076925993, 0.0033463346771895885, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int8_t tensor_data20[48*1*1*8] = {
  /* [0][0][][] */ -127,-35,-40,-8,117,115,-27,87,
  /* [1][0][][] */ -59,-49,15,-3,100,115,-87,-127,
  /* [2][0][][] */ -2,127,37,32,-17,79,49,63,
  /* [3][0][][] */ -79,62,-127,-63,105,39,90,61,
  /* [4][0][][] */ -18,97,-14,91,-127,-17,8,52,
  /* [5][0][][] */ -60,-9,-40,57,-127,-6,-6,13,
  /* [6][0][][] */ 49,45,127,-63,43,-80,-1,3,
  /* [7][0][][] */ 27,-37,-17,127,71,-5,80,-58,
  /* [8][0][][] */ -127,48,-37,-26,-11,-87,-17,86,
  /* [9][0][][] */ -127,-48,-88,7,15,-23,-2,42,
  /* [10][0][][] */ 117,-28,-127,-39,62,34,-62,-30,
  /* [11][0][][] */ -76,-84,46,3,-113,72,127,87,
  /* [12][0][][] */ -119,127,7,60,-81,62,66,-21,
  /* [13][0][][] */ -127,-19,64,-63,23,60,75,-77,
  /* [14][0][][] */ -76,16,44,-98,-67,76,127,80,
  /* [15][0][][] */ 18,-55,8,38,-56,55,14,-127,
  /* [16][0][][] */ -127,-86,26,-26,56,86,30,-111,
  /* [17][0][][] */ -11,36,-57,43,-42,-127,-50,-79,
  /* [18][0][][] */ 76,44,22,-20,56,-127,38,100,
  /* [19][0][][] */ -95,93,46,-127,-73,-30,86,-55,
  /* [20][0][][] */ 127,-35,-41,-1,-20,-33,34,1,
  /* [21][0][][] */ -66,-127,11,-17,-20,-20,64,20,
  /* [22][0][][] */ -127,-46,1,3,-31,-56,-21,2,
  /* [23][0][][] */ -127,6,-22,105,-64,-20,45,-2,
  /* [24][0][][] */ 35,-13,15,86,31,127,-17,-45,
  /* [25][0][][] */ -65,127,-77,24,-36,77,22,-37,
  /* [26][0][][] */ 51,22,-49,-67,127,-9,-33,98,
  /* [27][0][][] */ 127,0,33,92,28,19,15,57,
  /* [28][0][][] */ 103,114,-30,-127,10,127,35,72,
  /* [29][0][][] */ 71,57,127,-52,-34,-36,-24,50,
  /* [30][0][][] */ -127,-1,41,59,-22,4,-94,-30,
  /* [31][0][][] */ -52,127,-94,-70,-74,55,-9,-1,
  /* [32][0][][] */ -4,-127,-67,-57,-55,62,-12,-95,
  /* [33][0][][] */ -11,48,18,127,-11,-1,47,-75,
  /* [34][0][][] */ -63,-45,-66,127,20,-40,84,114,
  /* [35][0][][] */ -111,-18,-73,-80,-71,-10,-127,-117,
  /* [36][0][][] */ -21,-127,-86,4,99,61,45,52,
  /* [37][0][][] */ -9,-17,127,7,-99,-58,-25,-119,
  /* [38][0][][] */ 97,-1,-8,68,110,-5,127,47,
  /* [39][0][][] */ 21,113,111,-83,126,-122,-42,127,
  /* [40][0][][] */ -19,65,-3,127,-37,-115,126,96,
  /* [41][0][][] */ -127,26,88,88,11,-40,-97,68,
  /* [42][0][][] */ -85,56,58,-104,-47,-89,-25,127,
  /* [43][0][][] */ 26,127,-83,-25,-85,-82,-34,13,
  /* [44][0][][] */ 127,-104,-77,72,62,0,-63,72,
  /* [45][0][][] */ -12,68,-63,-15,6,-12,38,127,
  /* [46][0][][] */ 3,-48,13,-3,-55,-127,-25,-6,
  /* [47][0][][] */ -35,28,-127,64,58,21,117,-54,
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0056451335549354553, 0.004102783277630806, 0.0055820541456341743, 0.0042639849707484245, 0.0041588922031223774, 0.0065344329923391342, 0.0049684839323163033, 0.0052815773524343967, 0.006126567255705595, 0.0056296242401003838, 0.0041347621008753777, 0.005479062907397747, 0.0032433746382594109, 0.0056374887935817242, 0.005721257533878088, 0.0062128389254212379, 0.0034798965789377689, 0.006878020241856575, 0.003974386490881443, 0.0044553298503160477, 0.0072253360413014889, 0.0082028089091181755, 0.006595198530703783, 0.004101303406059742, 0.0058400062844157219, 0.0069630471989512444, 0.0057887015864253044, 0.0059102252125740051, 0.0046451380476355553, 0.0044807367958128452, 0.0049813329242169857, 0.0056407111696898937, 0.0040295994840562344, 0.0073241726495325565, 0.0050556948408484459, 0.0036889445036649704, 0.005053121130913496, 0.0046756314113736153, 0.0034175137989223003, 0.0026131062768399715, 0.0034302570857107639, 0.0031858659349381924, 0.0032715625129640102, 0.0052787307649850845, 0.0049949539825320244, 0.0049056271091103554, 0.0083859078586101532, 0.0048167398199439049, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int8_t tensor_data21[8*1*1*48] = {
  /* [0][0][][] */ 58,-1,-43,-84,-41,0,-46,10,-40,21,-44,-54,-78,-54,53,-8,20,-27,11,26,-45,58,-57,-10,53,61,36,-72,127,30,-65,39,54,88,18,-19,93,24,26,39,30,-2,-67,50,-68,-3,-38,-39,
  /* [1][0][][] */ 99,64,-19,-27,4,18,-31,56,-45,36,127,2,-27,42,51,-92,-14,-17,47,5,-68,60,37,15,43,122,88,54,-51,-4,-68,69,65,-67,114,-66,-1,-35,-50,-24,-66,-1,-28,0,35,-4,32,16,
  /* [2][0][][] */ -88,-88,20,-84,-18,3,66,-36,22,-11,-86,-60,12,93,-103,95,-35,-126,-42,-58,-15,5,11,98,-75,-96,88,61,53,-32,-71,-20,57,-35,39,8,-84,-89,-5,24,-8,42,-10,-127,55,-91,-104,-83,
  /* [3][0][][] */ 60,-89,67,-4,-59,-37,-61,86,52,-74,44,32,5,70,69,66,-46,32,-115,-73,-7,40,61,-91,-28,103,-80,92,5,-71,91,-24,-17,92,127,-52,20,44,114,-48,-5,94,-88,-84,92,-50,-71,-18,
  /* [4][0][][] */ 127,-81,69,104,-73,122,47,-26,4,-72,17,-42,61,57,78,7,-69,26,10,61,48,54,104,20,-80,-36,44,-100,-100,16,-50,81,51,-53,-46,-32,86,-50,23,6,47,2,27,-28,-30,67,21,40,
  /* [5][0][][] */ 49,-73,-114,-40,-61,-48,15,92,-30,48,-22,97,86,69,4,-107,72,127,-52,50,61,-44,-25,79,37,-101,64,100,-21,-51,-79,86,-106,-114,-40,-35,-25,68,-42,9,-19,-87,5,46,-113,55,-80,70,
  /* [6][0][][] */ 58,43,-32,-48,42,-39,50,-90,127,-38,-26,-45,-90,-18,-69,-10,1,44,43,-9,-97,-64,19,-18,-1,-34,67,70,73,-46,9,-1,63,0,3,55,-10,-47,-57,-6,-8,66,15,18,78,-6,38,127,
  /* [7][0][][] */ -103,-48,-76,127,-37,46,13,-48,-62,-37,-14,-82,-12,-13,-83,59,2,67,-43,38,-54,39,-26,-73,-64,80,52,30,105,-14,30,44,52,75,-76,-45,67,-72,65,-33,19,-71,3,-9,-82,17,16,-27,
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0045342380180954933, 0.0044800871983170509, 0.0029160818085074425, 0.0039728875271975994, 0.0037811847869306803, 0.0024669759441167116, 0.0047101904638111591, 0.0049249837175011635, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int8_t tensor_data22[48*1*1*8] = {
  /* [0][0][][] */ 42,-35,-59,-84,53,-45,-49,127,
  /* [1][0][][] */ 127,-16,-38,-95,-93,-25,103,-48,
  /* [2][0][][] */ 93,-22,-127,-59,34,75,33,31,
  /* [3][0][][] */ 127,-69,110,-2,78,-59,22,73,
  /* [4][0][][] */ -55,-29,127,19,-20,81,58,40,
  /* [5][0][][] */ 63,-33,-63,5,127,-23,45,-52,
  /* [6][0][][] */ 61,16,22,109,-51,23,127,69,
  /* [7][0][][] */ 7,-127,40,-46,20,32,-9,-62,
  /* [8][0][][] */ 35,-83,-53,-20,20,87,-127,30,
  /* [9][0][][] */ -35,127,37,-61,17,69,-42,-51,
  /* [10][0][][] */ 110,-95,-10,39,-73,-16,117,127,
  /* [11][0][][] */ -6,127,-106,-126,89,87,40,-16,
  /* [12][0][][] */ -48,-64,-35,-51,41,28,-127,-3,
  /* [13][0][][] */ 1,8,31,127,-7,100,70,34,
  /* [14][0][][] */ -45,-62,-31,-65,-127,8,-4,1,
  /* [15][0][][] */ 127,-57,-51,106,-68,127,90,-61,
  /* [16][0][][] */ 25,26,-124,-127,11,12,8,17,
  /* [17][0][][] */ 43,58,-30,127,-18,-58,-40,22,
  /* [18][0][][] */ 82,94,-95,-48,-4,76,127,-5,
  /* [19][0][][] */ -43,78,-81,20,40,48,-13,127,
  /* [20][0][][] */ -38,127,-105,28,-94,26,34,-28,
  /* [21][0][][] */ 2,75,29,-64,-100,-70,127,56,
  /* [22][0][][] */ -56,93,-23,76,77,-67,-127,18,
  /* [23][0][][] */ 19,43,9,127,-50,27,48,-93,
  /* [24][0][][] */ -87,126,-42,-24,104,127,113,-28,
  /* [25][0][][] */ 66,8,27,55,127,-36,-116,67,
  /* [26][0][][] */ -68,2,59,-9,127,-108,59,24,
  /* [27][0][][] */ 58,23,13,20,-10,-92,-27,-127,
  /* [28][0][][] */ -36,14,4,-39,111,13,-127,53,
  /* [29][0][][] */ -9,-37,-8,-80,127,110,-20,-16,
  /* [30][0][][] */ 2,37,14,92,127,15,-66,7,
  /* [31][0][][] */ -115,-61,117,35,38,49,127,36,
  /* [32][0][][] */ -83,16,-15,-124,67,95,127,-112,
  /* [33][0][][] */ 43,-103,-36,-127,68,-31,44,-84,
  /* [34][0][][] */ -127,-88,102,35,-125,90,-42,18,
  /* [35][0][][] */ 57,-127,83,61,9,-64,-52,-27,
  /* [36][0][][] */ 4,6,127,-41,105,56,-5,-65,
  /* [37][0][][] */ -127,46,-110,92,-18,94,-51,-32,
  /* [38][0][][] */ 17,84,90,18,127,68,-49,127,
  /* [39][0][][] */ -112,-71,-66,13,-112,-127,84,-85,
  /* [40][0][][] */ 96,-63,127,-33,-24,58,63,58,
  /* [41][0][][] */ -82,-72,26,127,-14,-10,-82,-59,
  /* [42][0][][] */ -27,62,-78,-2,-49,95,-127,-9,
  /* [43][0][][] */ 17,13,106,-16,-127,-9,-46,12,
  /* [44][0][][] */ -68,19,127,-60,-2,-119,95,1,
  /* [45][0][][] */ 89,118,88,-108,85,-30,-60,-127,
  /* [46][0][][] */ 11,-11,70,-4,-27,127,-82,29,
  /* [47][0][][] */ -83,-8,28,115,106,-51,121,-127,
};
const TfArray<4, int> tensor_dimension22 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0038943071849644184, 0.0029975769575685263, 0.0035343468189239502, 0.0030197338201105595, 0.0039646439254283905, 0.0040618679486215115, 0.0029736340511590242, 0.0040031904354691505, 0.0038163117133080959, 0.0036069622728973627, 0.0023396448232233524, 0.0026360428892076015, 0.0039354660548269749, 0.0035295919515192509, 0.0055595668964087963, 0.0028831372037529945, 0.0044050388969480991, 0.0050599495880305767, 0.0026804539375007153, 0.0025432910770177841, 0.003526696003973484, 0.0039993464015424252, 0.0029169649351388216, 0.0039660846814513206, 0.0026240737643092871, 0.0031620089430361986, 0.0057516596280038357, 0.0041930321604013443, 0.003979529719799757, 0.0037561745848506689, 0.004065399058163166, 0.003910392988473177, 0.0032154135406017303, 0.0027828812599182129, 0.0030110166408121586, 0.0026438045315444469, 0.0043818573467433453, 0.002301566069945693, 0.0037145721726119518, 0.0030482581350952387, 0.0030230383854359388, 0.0045796246267855167, 0.0028658739756792784, 0.0038721999153494835, 0.0029483328107744455, 0.0029940786771476269, 0.0049235401675105095, 0.0031464349012821913, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int8_t tensor_data23[8*1*1*48] = {
  /* [0][0][][] */ -54,-75,7,-20,6,37,-55,-69,1,-28,9,-13,-71,-27,-92,16,-13,96,-30,-52,65,32,-68,-36,34,-24,-66,-61,-48,8,-41,127,27,38,-4,-7,22,64,73,-9,-38,106,5,-58,35,49,9,45,
  /* [1][0][][] */ -8,-15,25,-64,-7,17,96,-87,23,-111,53,64,48,-46,-16,125,63,38,93,84,26,51,-39,-65,-28,-71,47,-66,-61,-55,123,-64,86,96,-21,-19,-44,-42,-35,29,-46,46,127,-43,0,100,31,6,
  /* [2][0][][] */ -31,-26,-52,-33,6,-62,76,51,104,54,-114,-35,-14,3,-62,-15,-86,-104,-53,-50,-54,21,56,-64,30,-22,-24,27,39,5,-107,-51,31,39,-121,-17,-4,20,-127,-66,23,-76,1,-38,53,-14,-78,52,
  /* [3][0][][] */ -5,45,35,16,6,-26,-127,-23,-50,58,-52,23,43,-52,-5,31,-24,-74,-75,16,68,-76,96,32,-125,-53,-50,-45,9,1,-79,-12,-68,-35,62,66,50,-71,49,-25,39,-70,40,-55,-4,-3,38,-43,
  /* [4][0][][] */ -13,-75,53,57,37,54,-78,-45,59,-95,-52,-77,-85,-71,-78,90,-27,29,52,43,50,-29,62,45,-63,79,40,87,-53,18,28,-29,21,3,-45,-36,110,-87,127,-23,-92,43,-34,-73,48,-100,-84,-95,
  /* [5][0][][] */ 52,20,31,79,78,76,-16,-61,110,120,-77,-68,-30,64,-41,14,-108,72,100,-53,-10,-71,37,-6,92,-24,-39,-6,-36,-5,60,-83,11,-91,62,54,-71,91,-95,-52,63,-96,-50,10,-11,127,67,47,
  /* [6][0][][] */ 15,50,-22,33,68,11,-30,-50,44,78,-74,96,-32,-10,-6,-34,-18,-31,-26,86,-15,-28,-73,-52,24,13,38,-51,1,-62,-63,37,-5,38,-8,14,-48,-33,-28,-25,23,-127,-11,27,19,-14,37,-68,
  /* [7][0][][] */ -40,17,38,45,-69,-76,15,-80,-39,4,-71,116,-57,1,-127,10,-43,-36,33,-10,24,-37,48,42,-21,-49,-108,55,-39,-99,44,27,50,-114,56,-39,0,55,-17,-52,-67,-37,10,-59,-92,-59,93,79,
};
const TfArray<4, int> tensor_dimension23 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant23_scale = { 8, { 0.0037759828846901655, 0.0023355677258223295, 0.0028727808967232704, 0.0034137759357690811, 0.0030952943488955498, 0.0025795665569603443, 0.0044271671213209629, 0.0028011107351630926, } };
const TfArray<8, int> quant23_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int8_t tensor_data24[48*1*1*8] = {
  /* [0][0][][] */ -1,-23,109,3,68,-5,-100,127,
  /* [1][0][][] */ 25,34,-74,127,77,93,15,12,
  /* [2][0][][] */ -65,-52,127,104,-55,107,-28,-50,
  /* [3][0][][] */ -80,-126,21,127,105,-108,-92,-89,
  /* [4][0][][] */ 2,-46,15,-59,127,117,75,-73,
  /* [5][0][][] */ 96,-27,-21,-2,127,2,39,-38,
  /* [6][0][][] */ 118,65,124,-127,-115,61,-7,91,
  /* [7][0][][] */ 15,127,32,93,80,-27,84,-23,
  /* [8][0][][] */ 102,-113,78,-14,-83,-49,93,127,
  /* [9][0][][] */ 35,-15,41,-127,92,16,-71,-27,
  /* [10][0][][] */ 127,-48,-59,45,104,-47,-75,-58,
  /* [11][0][][] */ 112,-78,-66,127,72,-72,14,124,
  /* [12][0][][] */ 127,-30,-36,82,65,-112,120,-44,
  /* [13][0][][] */ -45,-127,95,71,-71,70,-30,0,
  /* [14][0][][] */ 42,20,4,47,-95,-37,127,80,
  /* [15][0][][] */ -111,81,-17,-5,113,9,24,127,
  /* [16][0][][] */ -10,-127,-82,35,-35,31,40,-14,
  /* [17][0][][] */ 75,118,-40,-31,127,51,-52,-62,
  /* [18][0][][] */ -43,38,-26,-46,100,6,40,-127,
  /* [19][0][][] */ 58,96,-127,-56,92,-56,-20,-104,
  /* [20][0][][] */ -44,-83,127,-44,-28,21,14,56,
  /* [21][0][][] */ 71,-26,127,-11,-2,14,66,55,
  /* [22][0][][] */ 78,-9,100,127,64,103,110,-10,
  /* [23][0][][] */ -25,30,-94,124,127,49,-23,78,
  /* [24][0][][] */ 36,43,-75,-127,31,54,-104,-40,
  /* [25][0][][] */ -127,21,-98,-41,86,11,-44,8,
  /* [26][0][][] */ 31,-36,9,-26,-83,-61,-127,-33,
  /* [27][0][][] */ 35,10,50,127,98,45,47,-8,
  /* [28][0][][] */ 88,-77,127,-24,71,42,-81,-124,
  /* [29][0][][] */ -21,-25,-25,-17,127,-25,-30,20,
  /* [30][0][][] */ 37,-7,-30,-30,127,58,-28,35,
  /* [31][0][][] */ -11,-54,-68,-65,-59,-83,-127,-36,
  /* [32][0][][] */ -7,36,-5,-3,53,-26,-9,-127,
  /* [33][0][][] */ 9,88,-127,-97,-51,113,-20,67,
  /* [34][0][][] */ 69,105,31,66,127,39,-94,-71,
  /* [35][0][][] */ -37,-117,89,12,-86,7,127,-39,
  /* [36][0][][] */ -11,105,119,47,-127,61,30,-56,
  /* [37][0][][] */ -127,-51,-109,91,-30,-102,24,-112,
  /* [38][0][][] */ 7,77,-31,0,102,-127,-57,57,
  /* [39][0][][] */ -4,-26,33,82,82,40,122,127,
  /* [40][0][][] */ -30,32,-83,-53,-15,-15,127,-32,
  /* [41][0][][] */ 102,70,76,96,91,87,-127,-36,
  /* [42][0][][] */ 127,-19,70,-11,-54,124,38,-69,
  /* [43][0][][] */ 82,6,31,17,9,-59,127,-59,
  /* [44][0][][] */ 127,32,127,50,-56,48,-92,-41,
  /* [45][0][][] */ -49,115,-54,-127,78,-44,38,92,
  /* [46][0][][] */ -56,-25,-24,127,-47,-8,11,22,
  /* [47][0][][] */ 89,-127,62,105,88,-58,-64,112,
};
const TfArray<4, int> tensor_dimension24 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant24_scale = { 48, { 0.005400361493229866, 0.0052338326349854469, 0.0042478223331272602, 0.0023063197731971741, 0.0066005326807498932, 0.0051633920520544052, 0.0036953287199139595, 0.0080306800082325935, 0.0056535727344453335, 0.0050002126954495907, 0.0044168317690491676, 0.0039167613722383976, 0.0040773535147309303, 0.003864663653075695, 0.0044202245771884918, 0.0056829075329005718, 0.0069121848791837692, 0.0046593225561082363, 0.0079797161743044853, 0.0052916514687240124, 0.0077236304059624672, 0.0062828217633068562, 0.0044489051215350628, 0.0051672952249646187, 0.0046772994101047516, 0.006140049546957016, 0.0061762770637869835, 0.0063843582756817341, 0.0041179158724844456, 0.006067570298910141, 0.006223729345947504, 0.0056296833790838718, 0.0075709512457251549, 0.0033643911592662334, 0.0047356253489851952, 0.0037728918250650167, 0.0057989316992461681, 0.0033768462017178535, 0.0052856900729238987, 0.0043566864915192127, 0.0061087743379175663, 0.0047831987030804157, 0.0058246878907084465, 0.0084654167294502258, 0.0060596051625907421, 0.0041404855437576771, 0.0062870187684893608, 0.0035361303016543388, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int8_t tensor_data25[8*1*1*48] = {
  /* [0][0][][] */ 47,75,45,-66,73,-32,-95,31,54,7,91,83,-51,39,-60,-80,51,-17,96,24,50,-65,15,-117,-20,-3,-24,-15,-24,42,-30,-59,92,-101,22,73,9,-45,-59,-54,90,18,83,-37,-23,-57,23,127,
  /* [1][0][][] */ -1,-41,3,6,93,-7,-16,44,5,100,65,-82,50,92,-13,-57,0,-45,-81,79,-36,64,-76,-57,1,7,20,41,53,-22,68,54,21,116,99,-46,79,13,3,-22,87,-30,38,-32,25,55,127,-18,
  /* [2][0][][] */ 21,-45,41,87,-73,-80,-42,-52,5,-18,-26,54,-13,-48,49,-24,-55,10,27,-127,-111,-45,-34,65,-90,-17,85,-2,63,-105,-54,-55,-57,-18,39,-94,-18,-28,24,33,-14,83,14,9,-22,-70,-59,-85,
  /* [3][0][][] */ -49,55,46,-39,-15,-78,-9,-32,81,-72,-109,1,-66,21,-68,65,-108,97,0,15,4,-100,47,100,-103,-73,21,-51,-15,-92,4,-19,14,-46,-55,98,41,2,-127,61,35,8,-47,34,89,-30,-14,-62,
  /* [4][0][][] */ -67,18,69,59,25,0,6,49,-57,88,-3,-75,95,51,-11,-35,25,-60,35,65,-1,-70,28,-82,49,56,-75,-32,27,50,-70,81,-28,-66,-89,-93,96,20,127,-71,34,10,-59,-88,29,78,-18,23,
  /* [5][0][][] */ 96,42,-107,62,-86,27,60,41,42,67,20,21,59,-21,87,17,-94,114,100,-117,-126,-23,-53,93,-60,27,11,69,-93,-24,55,-127,111,-8,-87,-95,47,-57,-57,53,40,66,-8,-107,94,19,108,67,
  /* [6][0][][] */ 52,15,50,27,88,-21,5,74,-92,62,-28,-61,-11,6,-39,70,51,-39,-10,-41,49,70,-63,-35,11,52,103,-50,-37,61,21,-2,-48,35,80,37,-127,-82,-116,39,74,-115,92,-57,41,-86,89,74,
  /* [7][0][][] */ -11,82,-41,58,-89,3,46,-30,-127,112,-31,45,74,-67,28,-53,77,37,-82,-46,78,-105,112,-69,116,13,14,101,18,-40,-74,-62,22,57,93,-2,-52,-88,-76,45,-77,6,24,-67,72,-81,67,-109,
};
const TfArray<4, int> tensor_dimension25 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant25_scale = { 8, { 0.0029714715201407671, 0.002957264194265008, 0.0029980307444930077, 0.0022134012542665005, 0.0029421518556773663, 0.0021457534749060869, 0.0028556857723742723, 0.002824610797688365, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int8_t tensor_data26[48*1*1*8] = {
  /* [0][0][][] */ -42,48,-127,-9,12,-72,-47,-95,
  /* [1][0][][] */ 76,22,42,-71,-78,100,127,19,
  /* [2][0][][] */ 100,62,-86,-59,127,82,-91,86,
  /* [3][0][][] */ -125,10,33,101,-40,42,-72,-127,
  /* [4][0][][] */ 102,127,-63,107,-70,127,55,-44,
  /* [5][0][][] */ -112,63,-31,-127,35,68,81,5,
  /* [6][0][][] */ 50,16,-127,-21,73,-46,19,40,
  /* [7][0][][] */ -90,127,46,27,125,-42,-106,84,
  /* [8][0][][] */ 97,29,-72,-41,-71,-127,-47,-21,
  /* [9][0][][] */ 127,-114,-61,-86,87,-40,33,-54,
  /* [10][0][][] */ 75,-68,127,94,-114,98,30,77,
  /* [11][0][][] */ 55,-127,-9,71,-63,-39,-29,81,
  /* [12][0][][] */ 19,1,95,-1,-70,127,23,-19,
  /* [13][0][][] */ 127,25,92,24,27,51,-37,23,
  /* [14][0][][] */ 27,96,-24,11,89,-59,-61,-127,
  /* [15][0][][] */ -71,96,-10,-80,45,81,-33,127,
  /* [16][0][][] */ 45,27,-127,-61,121,-30,69,55,
  /* [17][0][][] */ -25,22,-51,-80,127,67,-65,-62,
  /* [18][0][][] */ -39,-127,83,41,89,-98,-72,57,
  /* [19][0][][] */ -56,97,-127,82,-111,-6,110,-69,
  /* [20][0][][] */ -96,34,-13,-127,2,-11,-86,-50,
  /* [21][0][][] */ -110,-127,7,-3,-27,-24,-23,-72,
  /* [22][0][][] */ -113,-90,84,-102,99,90,-62,127,
  /* [23][0][][] */ 127,-81,34,-69,-107,102,81,99,
  /* [24][0][][] */ 57,-76,79,39,37,127,-18,-31,
  /* [25][0][][] */ -37,-21,-45,-104,127,-86,-36,89,
  /* [26][0][][] */ 94,115,-127,-99,3,-91,19,-59,
  /* [27][0][][] */ 53,118,-127,-45,127,45,-43,-49,
  /* [28][0][][] */ 29,-33,55,17,42,-43,23,-127,
  /* [29][0][][] */ -19,127,-61,-40,-12,-93,-6,41,
  /* [30][0][][] */ -127,-118,111,13,58,-43,-74,-36,
  /* [31][0][][] */ 87,-93,-31,127,76,41,60,89,
  /* [32][0][][] */ 41,76,-1,60,-46,-127,25,37,
  /* [33][0][][] */ -71,-71,6,-4,127,-5,43,26,
  /* [34][0][][] */ 39,-8,-121,-111,91,-127,26,20,
  /* [35][0][][] */ -25,17,24,67,127,15,9,27,
  /* [36][0][][] */ 45,97,-68,-54,-45,-127,61,-73,
  /* [37][0][][] */ -8,52,-57,54,-113,102,127,-4,
  /* [38][0][][] */ 0,4,96,37,61,127,-88,96,
  /* [39][0][][] */ 127,7,13,-44,-89,32,113,41,
  /* [40][0][][] */ -53,-105,-7,23,-52,-121,127,-16,
  /* [41][0][][] */ 55,-127,-28,49,-90,36,-77,-37,
  /* [42][0][][] */ -94,39,127,31,19,68,-62,37,
  /* [43][0][][] */ -28,-58,127,108,117,-75,-98,-77,
  /* [44][0][][] */ 19,-38,-85,-127,60,42,59,42,
  /* [45][0][][] */ 10,-37,117,-118,-62,-47,-29,127,
  /* [46][0][][] */ 36,-20,-41,-52,127,-45,-58,22,
  /* [47][0][][] */ 113,-7,-71,-100,30,79,127,-36,
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0027790090534836054, 0.0030786648858338594, 0.002038175705820322, 0.0024789723102003336, 0.0036264758091419935, 0.0027253513690084219, 0.0031008806545287371, 0.0029232241213321686, 0.0036213134881108999, 0.0031560035422444344, 0.0018271926091983914, 0.0027140025049448013, 0.0030182735063135624, 0.0033586551435291767, 0.002886912552639842, 0.0027425994630903006, 0.0018265141407027841, 0.0029455884359776974, 0.002988726831972599, 0.0034081311896443367, 0.0030916843097656965, 0.0039510154165327549, 0.0037616400513797998, 0.0024843462742865086, 0.002850645687431097, 0.0022076889872550964, 0.0018287475686520338, 0.0015006483299657702, 0.0042338869534432888, 0.0028670660685747862, 0.0022934775333851576, 0.0025714223738759756, 0.0057236682623624802, 0.0044433954171836376, 0.001908525126054883, 0.0059591778554022312, 0.0023756129667162895, 0.0034964303486049175, 0.0038489100988954306, 0.0029713681433349848, 0.0038017467595636845, 0.0032435280736535788, 0.0029267645440995693, 0.0023303963243961334, 0.0028292788192629814, 0.0039982111193239689, 0.0035070166923105717, 0.0026213640812784433, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int8_t tensor_data27[8*1*1*48] = {
  /* [0][0][][] */ 42,98,2,-94,-77,71,-87,-64,-10,7,68,-76,-40,23,-58,-82,37,-64,47,55,62,127,-106,90,74,34,-85,11,26,73,10,-38,-31,110,15,-74,39,-41,-94,-66,83,-59,-114,57,-11,34,18,46,
  /* [1][0][][] */ -77,-67,-49,-57,52,14,-118,44,-4,28,-32,34,-87,-14,59,89,-85,23,37,-62,68,-69,15,57,-24,116,-10,-4,0,68,49,-67,-99,-75,106,99,36,4,-77,-4,83,127,-17,47,55,-61,8,54,
  /* [2][0][][] */ 99,-33,19,85,6,-61,110,-76,-7,-67,-35,3,58,-10,-2,-80,51,-34,83,-64,-32,74,62,-127,19,-92,48,-73,94,46,34,8,25,11,-118,-62,-78,32,47,-60,-58,39,99,-63,-74,-32,-53,-41,
  /* [3][0][][] */ -15,96,-69,-24,104,86,66,-4,-61,-24,-55,43,33,-36,10,-32,69,22,-115,-33,-59,59,-7,84,20,8,-80,-127,75,-21,71,23,102,-47,12,-32,-82,-73,20,-79,-21,-69,-13,-60,-51,-20,-102,-64,
  /* [4][0][][] */ 32,-89,68,-55,-101,21,-83,105,14,45,127,-28,-19,-25,28,-68,-37,36,42,3,-18,-71,38,-38,-16,64,-27,52,-3,24,-14,90,-27,83,52,-8,40,31,-95,-49,-2,-64,-14,43,-40,-83,110,-64,
  /* [5][0][][] */ -5,-14,-127,-66,91,-99,105,-55,-100,-65,71,-6,103,-70,-67,-42,38,-41,-18,-18,-3,-16,-54,24,-18,1,-55,-93,86,98,-30,-88,-29,30,-96,-74,-65,64,-105,-28,-32,26,109,-48,78,69,-46,13,
  /* [6][0][][] */ 90,32,-63,-49,47,-42,26,-99,-127,-38,-16,-54,8,53,-62,38,-48,-75,-64,-18,-44,47,59,-1,-29,-103,-38,4,74,74,27,-85,10,73,-14,26,-11,-49,24,-25,-23,13,-66,-102,10,65,-92,-66,
  /* [7][0][][] */ -57,22,32,-29,-42,-55,45,72,-106,54,-31,-14,-97,-127,-39,-66,63,-79,63,-66,-125,-84,-46,-9,-71,-46,25,15,48,-33,-127,-7,84,-58,-81,46,10,2,47,-30,23,66,-17,34,25,17,-3,-11,
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0030628636013716459, 0.0027881395071744919, 0.002908417722210288, 0.003234062111005187, 0.0034014589618891478, 0.0024849169421941042, 0.0035880676005035639, 0.0029193046502768993, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int8_t tensor_data28[48*1*1*8] = {
  /* [0][0][][] */ 111,20,58,29,-27,54,37,127,
  /* [1][0][][] */ -45,-30,-127,-66,49,-114,22,5,
  /* [2][0][][] */ 37,-43,-16,113,-32,-19,127,6,
  /* [3][0][][] */ -127,-23,118,99,-45,-56,-43,-3,
  /* [4][0][][] */ 115,-58,-127,-35,21,-105,1,-92,
  /* [5][0][][] */ -7,-15,-124,-110,127,-42,-36,-67,
  /* [6][0][][] */ -50,-35,126,-48,-3,127,-5,9,
  /* [7][0][][] */ -38,4,-127,-12,115,10,-68,39,
  /* [8][0][][] */ 113,-110,104,127,110,-76,1,-20,
  /* [9][0][][] */ -127,-39,109,-19,-11,21,-13,-4,
  /* [10][0][][] */ 39,-21,-52,127,-50,-74,114,89,
  /* [11][0][][] */ -73,89,107,-64,-80,127,-76,89,
  /* [12][0][][] */ -41,-6,5,-100,64,-127,-88,70,
  /* [13][0][][] */ -10,-96,22,-77,-72,-127,62,87,
  /* [14][0][][] */ -26,-106,89,76,127,38,-15,-43,
  /* [15][0][][] */ -127,-76,40,-56,-68,50,63,70,
  /* [16][0][][] */ 1,11,-42,127,-59,111,1,36,
  /* [17][0][][] */ -1,41,-99,-15,127,-26,-97,88,
  /* [18][0][][] */ -83,127,65,19,32,-2,-33,16,
  /* [19][0][][] */ 54,127,19,-123,101,-53,-109,73,
  /* [20][0][][] */ 7,-10,-127,7,89,-63,-78,41,
  /* [21][0][][] */ -15,-121,127,-113,-65,64,11,-96,
  /* [22][0][][] */ 91,77,22,49,-71,55,127,-66,
  /* [23][0][][] */ -79,59,-99,59,91,-127,-8,-85,
  /* [24][0][][] */ 44,-4,81,-56,-26,-47,127,122,
  /* [25][0][][] */ -101,30,32,-40,-127,39,15,56,
  /* [26][0][][] */ 70,41,-87,-127,-55,-40,-78,40,
  /* [27][0][][] */ -37,-127,109,85,35,-53,-15,-58,
  /* [28][0][][] */ -88,37,127,106,59,-23,105,-57,
  /* [29][0][][] */ 48,127,-100,-49,29,-27,-20,-37,
  /* [30][0][][] */ -54,84,-127,-112,-20,-121,-100,47,
  /* [31][0][][] */ -75,-30,20,-5,-127,8,9,19,
  /* [32][0][][] */ -4,56,-69,54,8,127,33,-21,
  /* [33][0][][] */ 87,-123,-27,26,-127,-7,-35,-86,
  /* [34][0][][] */ 127,-58,35,-91,-81,33,51,51,
  /* [35][0][][] */ 84,7,124,26,40,127,-60,85,
  /* [36][0][][] */ 94,-76,-127,78,-124,50,71,-11,
  /* [37][0][][] */ 16,-51,-9,2,36,127,35,1,
  /* [38][0][][] */ 34,-10,-47,-127,98,19,-42,-75,
  /* [39][0][][] */ -13,-5,85,5,-109,5,127,-91,
  /* [40][0][][] */ -89,40,-127,-17,19,-94,-71,-35,
  /* [41][0][][] */ 121,-50,80,13,98,-47,47,127,
  /* [42][0][][] */ -127,17,89,11,-16,8,-61,-17,
  /* [43][0][][] */ 9,-19,-127,78,-62,71,40,119,
  /* [44][0][][] */ 111,-84,81,127,61,-41,66,80,
  /* [45][0][][] */ -13,107,76,-115,-8,-27,127,-64,
  /* [46][0][][] */ 61,-34,-112,44,74,-127,-57,32,
  /* [47][0][][] */ -46,37,-127,-21,23,-54,46,23,
};
const TfArray<4, int> tensor_dimension28 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0020973491482436657, 0.0016268033068627119, 0.0022118499036878347, 0.0017819436034187675, 0.001558750169351697, 0.001211605267599225, 0.0019072222057729959, 0.0017418398056179285, 0.0015500426525250077, 0.0021901701111346483, 0.0021817418746650219, 0.0024936660192906857, 0.0014269549865275621, 0.0028035787399858236, 0.0019929476547986269, 0.0020088073797523975, 0.0019819708541035652, 0.001436042133718729, 0.0029261847957968712, 0.0013761696172878146, 0.001797977602109313, 0.0016903564101085067, 0.0022825021296739578, 0.0014660757733508945, 0.0019325162284076214, 0.0022619289811700583, 0.0016070971032604575, 0.0016931958962231874, 0.0019929744303226471, 0.0014858318027108908, 0.0010639583924785256, 0.0026215077377855778, 0.0034588421694934368, 0.0026142718270421028, 0.0022230057511478662, 0.0020817462354898453, 0.0017845182446762919, 0.0027502819430083036, 0.0015442455187439919, 0.0016736595425754786, 0.001279992051422596, 0.0016724844463169575, 0.0023455384653061628, 0.0024033861700445414, 0.0015175002627074718, 0.0033466080203652382, 0.0016004455974325538, 0.0019861303735524416, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int8_t tensor_data29[32*1*1*48] = {
  /* [0][0][][] */ -21,28,-1,-105,-76,-8,-43,24,-37,-60,-127,-122,-127,76,-74,13,5,45,-23,-28,-72,-106,-46,-1,67,-115,-19,67,25,-87,30,-33,-99,63,13,-93,-41,-12,-103,-28,-114,-58,50,-92,19,-31,-107,66,
  /* [1][0][][] */ 24,-24,37,9,2,-79,-28,49,6,21,-78,17,-127,-99,-4,-87,-69,-66,-26,-56,35,45,-84,-82,21,-34,-65,-76,45,8,-48,-78,-87,-96,-76,-94,9,-71,-63,-10,-24,71,-39,-6,6,-23,-60,2,
  /* [2][0][][] */ -20,-82,-99,-127,-59,-12,43,-19,2,-65,-79,-67,32,47,-85,-124,-108,13,-62,9,-86,-68,4,1,-93,40,-60,-60,-43,-52,-96,7,23,-82,24,-19,-92,-3,-89,39,31,-51,79,47,-30,-38,27,2,
  /* [3][0][][] */ -82,65,45,-85,81,74,61,35,81,18,23,-58,68,29,89,97,-127,33,-66,63,-96,59,-89,-17,77,48,-118,8,39,11,-70,92,-112,21,10,-94,-99,-59,-99,-65,-105,-63,-57,1,-81,-108,-51,-62,
  /* [4][0][][] */ 25,10,127,61,44,-9,58,-49,66,95,-8,67,-63,110,45,-1,117,7,-44,-77,-80,105,-22,-37,-13,-90,52,66,16,-97,62,94,-16,74,12,58,117,-9,-95,-28,58,60,-25,-28,45,75,-41,-47,
  /* [5][0][][] */ -127,121,-62,-75,35,16,-64,80,-28,-102,26,-8,-49,17,77,57,-114,125,67,27,121,-17,-56,115,-81,43,-2,-69,-44,57,82,-38,-77,35,41,13,71,-30,-12,-47,93,15,-47,-50,56,80,42,25,
  /* [6][0][][] */ 122,-23,59,-12,-63,-43,75,-61,58,91,78,127,44,-7,29,121,0,59,30,61,-62,111,110,-4,-7,44,-51,-22,1,-59,-9,78,-10,77,96,100,-19,17,14,80,-80,68,91,63,-10,80,-63,-16,
  /* [7][0][][] */ 121,10,-6,-34,83,-48,38,-60,35,24,20,60,-30,113,93,105,93,-12,-21,35,56,-41,10,-76,98,-48,56,113,-52,-38,-36,67,-66,5,81,37,114,7,-12,-69,-127,30,34,97,50,-43,-84,-64,
  /* [8][0][][] */ -59,-77,-108,-14,20,-13,-31,-104,57,-108,78,-92,-47,-105,-106,-18,2,41,56,-89,57,20,57,-57,-77,-127,-29,-92,-78,-97,-116,-19,-48,-34,-101,80,-123,-92,-72,-91,-29,4,21,-54,-23,-77,-38,42,
  /* [9][0][][] */ -15,-55,26,84,8,34,98,6,3,69,56,90,84,46,-32,-4,-6,-84,-46,-95,-112,82,17,-25,-88,-59,-55,52,70,-127,-42,64,-88,-59,99,4,-36,-14,-86,-59,88,64,38,-3,31,57,0,-41,
  /* [10][0][][] */ -103,15,-91,-104,-54,56,-127,-112,48,-107,51,35,-33,7,40,-29,69,-13,-90,11,-30,-72,-57,52,4,70,-45,-45,-114,-86,-31,-114,28,17,72,-121,78,-94,16,77,53,4,7,25,-35,5,-23,-31,
  /* [11][0][][] */ 24,24,-94,-106,52,-29,-62,-122,-106,13,2,-38,-16,-101,17,-108,-124,24,-49,-70,-83,-56,34,-90,-127,63,36,42,-28,16,-23,-3,27,47,-126,-92,-15,85,-67,-89,27,-120,61,-120,23,-5,-117,-51,
  /* [12][0][][] */ 19,-36,7,127,-4,-56,22,-57,31,59,28,85,-41,-11,15,100,72,-37,44,59,-68,30,84,16,5,67,-65,55,101,-70,37,108,68,32,50,13,49,-32,16,84,35,46,85,4,76,18,-62,42,
  /* [13][0][][] */ 0,-1,20,-96,41,-14,-14,-84,-26,-126,-15,-21,-45,26,-8,15,18,6,-37,33,51,-56,-51,-94,32,-98,-39,-98,-13,-118,-75,-53,-58,-127,-18,-48,11,-123,21,-10,-48,-88,17,27,1,-50,15,15,
  /* [14][0][][] */ 12,-49,107,79,41,-77,50,-15,24,78,14,-3,13,115,1,70,-31,-32,-4,-84,-11,61,-7,-39,-2,-11,58,45,69,-67,50,4,13,99,125,66,56,79,-66,-44,74,97,127,61,96,-40,-10,-35,
  /* [15][0][][] */ -16,26,-23,-91,-84,79,-2,31,-105,-62,51,-68,-49,-81,-43,-66,-46,52,-127,2,-49,-76,-54,-27,-22,-13,71,55,-32,-61,-106,-12,37,73,-45,-43,-36,91,-22,-77,-57,87,49,-77,31,32,-77,-83,
  /* [16][0][][] */ -28,-1,-111,84,57,-80,67,69,-57,21,52,-80,-69,55,-126,-48,7,46,-66,-47,-127,-40,-111,-2,72,-77,-89,0,-61,67,80,9,-95,-60,-6,-11,-34,57,-127,37,24,7,56,-72,-108,-29,-110,-78,
  /* [17][0][][] */ -43,108,-116,-54,-8,64,-44,113,22,-60,62,-52,-15,90,31,-79,11,92,-17,90,41,-28,-60,16,-74,22,-4,-74,-38,69,84,-127,50,-53,-38,23,19,-24,19,32,-11,116,-70,-71,72,25,-37,-50,
  /* [18][0][][] */ 40,-99,-127,-42,42,24,-123,-95,-53,8,-83,-106,-12,62,18,-1,-11,72,-99,-37,-78,23,9,31,20,-28,19,-97,-31,-102,17,-126,-53,53,88,-76,8,-20,-45,-78,-87,29,62,-77,-29,24,87,-36,
  /* [19][0][][] */ 20,75,-100,36,99,90,-77,30,67,-65,-10,-73,65,53,81,-70,16,-54,-52,116,-45,-86,15,114,58,-7,43,-40,41,53,111,-127,47,-31,-79,37,-90,0,-26,4,74,48,2,42,-51,23,-52,109,
  /* [20][0][][] */ 72,-85,48,118,79,-13,127,28,10,24,70,80,-22,-10,57,9,46,-46,107,14,42,-22,112,-34,-27,95,-50,81,63,-53,-51,82,87,124,118,31,121,61,-85,63,49,-70,7,35,101,48,-39,-45,
  /* [21][0][][] */ 28,55,56,-95,-59,-69,-99,-67,-51,54,-13,-108,-73,-91,-102,-109,-55,-48,-95,-117,-58,16,55,-74,46,-8,30,-39,-80,-119,51,-25,-109,-8,47,50,-121,-94,-120,-13,-28,10,-64,-21,-94,43,-127,24,
  /* [22][0][][] */ 46,-53,103,51,-48,-84,114,23,68,65,44,87,-26,61,38,4,-1,-15,5,42,18,121,53,36,-8,56,-22,90,51,-40,-51,23,4,127,82,90,73,1,-32,27,-28,10,25,59,85,44,52,-53,
  /* [23][0][][] */ -68,35,-24,-65,-40,50,0,41,-11,-113,17,-120,-63,45,30,-81,-9,64,63,58,76,42,24,40,27,-42,-24,-89,-92,98,29,41,28,-75,56,-53,-30,79,85,-84,127,44,26,-100,-111,-10,-23,108,
  /* [24][0][][] */ -41,110,65,53,79,36,-101,115,-14,-91,-83,31,46,-5,-10,-74,-34,63,-26,109,124,-40,-28,72,-14,58,-13,-58,58,127,115,-51,71,-52,-23,-47,0,-17,-6,-74,47,99,-85,23,-68,52,85,-11,
  /* [25][0][][] */ 45,-6,51,100,-1,-1,-4,22,31,99,92,97,-41,86,91,-2,19,-16,-17,2,32,112,35,47,60,-25,-30,14,76,43,-69,95,-6,18,105,127,-16,56,-57,119,-71,72,100,54,45,-6,-75,-68,
  /* [26][0][][] */ 104,-75,37,48,55,-93,116,-39,55,31,-32,60,-6,-12,47,43,106,-1,-19,-58,25,0,69,51,18,-8,39,70,46,-11,-49,32,10,65,57,127,23,68,-90,99,50,2,34,-40,33,57,67,-11,
  /* [27][0][][] */ 41,13,-117,86,-53,-50,3,-30,-101,71,-50,-13,-127,41,54,-52,18,-125,-22,-118,-50,34,53,-101,-124,42,-60,30,64,-80,34,-114,76,-96,14,87,73,33,-90,-55,7,22,-28,32,37,-99,65,-89,
  /* [28][0][][] */ -127,122,-65,20,39,116,-109,30,14,-80,-100,8,76,-66,-8,-113,-81,87,46,106,106,25,-14,-12,50,-42,94,47,-57,60,21,-12,-48,-16,-43,-78,1,74,21,63,-22,-8,-49,26,34,69,35,35,
  /* [29][0][][] */ -11,-48,11,-18,-43,-5,-15,-127,-69,-54,-65,-110,24,-43,-85,-58,54,51,-103,55,-7,-80,-91,-94,51,-73,-107,-72,-67,58,-83,-13,-110,76,73,-29,-43,-90,1,-35,77,-59,-53,5,-106,35,-125,-18,
  /* [30][0][][] */ -90,-88,-92,-71,34,75,20,-7,-77,0,2,17,51,25,-100,-127,54,82,21,1,-27,-81,80,-78,11,39,-31,-9,38,-45,-4,3,-16,-43,11,-3,-84,-12,60,-33,-20,-64,-94,-81,32,74,-40,-32,
  /* [31][0][][] */ 83,63,91,25,-53,-34,121,-82,-31,19,75,11,-62,-30,89,70,29,16,-8,1,-35,9,93,-19,58,62,-40,-1,14,41,18,105,86,61,68,127,60,79,-30,-34,-30,64,-2,49,64,94,11,-29,
};
const TfArray<4, int> tensor_dimension29 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant29_scale = { 32, { 0.0026017716154456139, 0.0029955017380416393, 0.00253847218118608, 0.0024992122780531645, 0.0032058998476713896, 0.0028827921487390995, 0.0035936173517256975, 0.0028305717278271914, 0.0027754241600632668, 0.0023913071490824223, 0.0026277757715433836, 0.0025874164421111345, 0.0038026650436222553, 0.0029943501576781273, 0.0029578569810837507, 0.0028454400599002838, 0.0025802475865930319, 0.002666243351995945, 0.002722935052588582, 0.0027667512185871601, 0.003233408322557807, 0.0028284892905503511, 0.0043530645780265331, 0.0029920921660959721, 0.0030693626031279564, 0.0038671721704304218, 0.0033096370752900839, 0.0026239620056003332, 0.003275756724178791, 0.0026861396618187428, 0.0028584983665496111, 0.0030656661838293076, } };
const TfArray<32, int> quant29_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[2*1*1*32] = {
  /* [0][0][][] */ -16,15,-28,-25,82,-27,124,30,60,-47,-54,-21,77,1,112,6,-55,-30,86,-11,98,-9,127,-41,-61,100,33,-60,-76,-43,15,29,
  /* [1][0][][] */ 72,93,-69,-65,-52,113,-49,-71,30,-102,-76,46,-112,4,-24,70,-75,105,68,86,-122,7,-87,61,127,-68,-105,-77,82,79,93,-119,
};
const TfArray<4, int> tensor_dimension30 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant30_scale = { 2, { 0.004850615281611681, 0.0035931400489062071, } };
const TfArray<2, int> quant30_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[1*3*3*8] = {
  /* [0][0][][] */ -54,-71,-41,-127,21,41,127,-93, -82,4,-5,15,95,-9,-41,107, -40,93,42,55,22,-85,46,-127,
  /* [0][1][][] */ -104,-73,45,-73,18,15,50,43, -79,-12,-44,-5,58,-127,64,95, 77,-1,127,24,-127,-62,48,-54,
  /* [0][2][][] */ 127,-127,-44,17,-7,43,84,-35, -48,-21,10,68,-4,104,12,47, -50,-1,51,-53,20,71,43,-113,
};
const TfArray<4, int> tensor_dimension31 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.0066632693633437157, 0.008649011142551899, 0.012575021013617516, 0.013459400273859501, 0.011330362409353256, 0.015457893721759319, 0.0047796694561839104, 0.0079563762992620468, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 3 };
const ALIGN(8) int32_t tensor_data32[8] = { 2237, -3211, 2055, 2228, -2770, -5093, 1305, 103, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00014119762636255473, 0.00024532363750040531, 0.00017749647668097168, 0.00019628035079222172, 0.00030173154664225876, 0.0001698340056464076, 0.00017817660409491509, 0.0002446082653477788, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int8_t tensor_data33[1*3*3*48] = {
  /* [0][0][][] */ -59,-127,83,5,127,70,-105,63,56,93,9,-45,-27,10,75,-107,-37,100,-28,-27,-19,-119,-21,105,32,1,54,27,-79,-48,78,19,-120,-4,127,74,-87,26,63,51,-127,-127,-68,127,66,11,42,117, 8,-44,-78,44,63,-78,-127,123,-31,127,-16,-64,48,49,49,-35,-42,-2,13,127,-23,-25,40,-100,59,-2,16,-4,78,-60,99,-70,60,-104,120,-127,127,3,9,23,52,31,21,87,47,-107,-42,93, -3,-103,9,49,29,3,-37,34,79,50,108,-127,-97,4,-107,47,-54,-127,55,67,-37,1,8,-127,-55,44,127,-44,41,-4,-33,73,-34,47,50,-17,32,61,118,-9,64,-77,-127,-57,-67,-52,-55,-4,
  /* [0][1][][] */ -60,66,13,127,88,35,12,14,124,45,127,48,-32,-32,127,-39,127,74,-16,66,-4,-127,-35,-39,9,-127,7,42,52,55,42,-105,29,69,16,99,-63,-87,68,-127,39,-102,-46,11,-49,-43,-35,73, 36,98,-96,14,-20,-127,-29,32,111,-8,-93,84,-93,-30,14,127,-5,84,36,-72,68,18,127,-21,-36,44,-16,127,-79,-11,127,127,-31,85,6,-95,-54,31,79,-41,127,-75,-80,41,-43,-1,68,65, -55,-53,-31,61,-29,23,-11,-75,65,-62,57,12,57,72,-16,92,-81,14,127,118,-61,-34,-13,-22,-11,65,-37,43,-53,-127,25,107,-127,-11,-41,91,95,127,67,-29,-22,-50,8,42,63,52,-67,35,
  /* [0][2][][] */ 40,-94,36,52,14,55,1,-48,-49,-30,-3,-23,40,75,25,3,38,9,126,71,127,55,43,-25,71,-121,-52,41,127,-10,45,-99,37,37,94,-9,42,24,-51,-39,28,-76,17,16,-89,-127,-24,-127, 127,0,127,8,-3,-71,33,71,-127,-47,40,-20,-127,73,54,-4,82,-3,-38,42,-16,-37,35,-93,23,18,-66,0,46,49,16,-14,52,55,-5,-126,-31,-39,92,-84,32,-92,-86,69,8,-16,127,-26, 26,-77,-105,-17,89,-70,90,-127,27,6,-58,-72,85,127,127,-125,-54,110,-66,58,5,-93,-22,-96,127,99,-67,-99,7,48,59,-86,9,127,-3,6,-31,73,127,-53,39,35,-108,62,127,-66,-7,-39,
};
const TfArray<4, int> tensor_dimension33 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.0068470807746052742, 0.0069214398972690105, 0.012773370370268822, 0.0078974850475788116, 0.0065923845395445824, 0.0090790688991546631, 0.0083974264562129974, 0.0054196054115891457, 0.009969751350581646, 0.0062301820144057274, 0.013174223713576794, 0.0077241039834916592, 0.0058494517579674721, 0.0057228878140449524, 0.0055755968205630779, 0.008656640537083149, 0.0072019346989691257, 0.0089527377858757973, 0.0078629078343510628, 0.0053916317410767078, 0.02137734554708004, 0.004534614272415638, 0.011971849948167801, 0.0044961590319871902, 0.011996239423751831, 0.0091981468722224236, 0.0098484382033348083, 0.011109060607850552, 0.0093007832765579224, 0.013423542492091656, 0.0040506469085812569, 0.013063046149909496, 0.0070144995115697384, 0.0074306265451014042, 0.0052432175725698471, 0.0033109255600720644, 0.010592391714453697, 0.007906835526227951, 0.002970551373437047, 0.0054967785254120827, 0.009342891164124012, 0.0039599528536200523, 0.0046908860094845295, 0.0094330599531531334, 0.0089458553120493889, 0.0068957251496613026, 0.0076623396016657352, 0.0062115094624459743, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 3 };
const ALIGN(8) int32_t tensor_data34[8] = { 413, -11434, -1410, -2605, 12862, 10773, 5844, 2044, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 7.5227813795208931e-05, 6.0881211538799107e-05, 7.3771872848737985e-05, 0.00010829908569576219, 7.2536699008196592e-05, 5.0796701543731615e-05, 7.7700547990389168e-05, 7.8737284638918936e-05, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int8_t tensor_data35[1*3*3*48] = {
  /* [0][0][][] */ -75,-29,54,-20,75,-110,67,127,54,119,-127,75,98,-21,-46,59,44,-61,127,-39,-106,-67,-72,39,-17,48,-119,-45,-48,-36,-8,-64,-19,-35,89,23,-21,-31,-14,39,-87,-120,100,-57,52,-45,118,-84, 127,-10,-68,115,-30,-17,-8,-42,-14,125,-14,-15,127,-53,-15,71,2,127,5,-127,-95,-30,-127,51,-127,-107,-127,32,-18,108,-4,-75,-21,-127,-100,-18,127,-23,90,-4,-91,-122,69,-94,-108,-52,115,-18, -85,33,-17,92,-127,-127,82,-82,-41,55,38,-69,36,3,58,-18,85,26,-55,-86,-25,40,-65,14,59,-100,21,-27,-9,42,23,92,68,14,-24,-50,-62,-63,-56,0,-25,13,-32,127,45,127,-18,-21,
  /* [0][1][][] */ 43,-33,67,83,-92,84,18,-119,-42,55,105,-53,-31,49,127,50,24,23,-23,8,-87,75,119,21,-54,104,-103,-28,-127,-127,-13,-116,-85,-37,36,-30,25,41,127,-43,-7,19,76,-98,-52,51,-10,-58, -33,-19,-10,86,81,-33,-48,-7,-68,127,-15,-1,11,-11,6,-10,-30,38,-86,-10,-127,-38,90,24,-81,-23,17,52,71,80,-79,59,-14,-9,-127,-24,-11,-14,-84,21,-127,-8,24,-109,-23,36,37,50, 67,127,-108,-127,-64,-113,91,-84,-9,52,19,4,89,-21,31,73,-99,72,3,74,45,56,68,113,76,98,51,4,3,75,-67,-80,127,-43,13,-28,43,-20,77,14,29,-43,13,-33,-127,-33,-127,127,
  /* [0][2][][] */ 71,9,-112,-60,-33,73,102,-2,-127,126,-96,-43,60,30,-42,72,-127,-59,4,30,3,127,-36,109,65,-20,58,32,49,-38,-50,-20,123,2,-16,10,28,8,48,-52,48,2,8,-84,-47,-35,11,-67, -86,52,-127,42,8,34,-113,8,-77,72,7,-48,52,-127,51,14,-32,-18,-37,-3,-60,2,26,56,-14,54,75,127,-88,-5,-103,41,-8,13,55,57,74,-104,-8,-9,-74,-127,-127,-15,38,-107,56,-113, 48,-20,55,12,11,-97,-127,-60,49,56,45,-127,-37,-55,-18,127,48,-9,-48,43,-21,39,-92,127,89,-127,48,6,64,-118,-127,-127,104,-47,-7,127,-9,-127,52,127,5,21,37,-69,25,-57,-12,42,
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.014253913424909115, 0.013570360839366913, 0.0064875176176428795, 0.010570794343948364, 0.0070520644076168537, 0.0042854170314967632, 0.0087717548012733459, 0.006907980889081955, 0.0049904342740774155, 0.0037388922646641731, 0.019775005057454109, 0.0066633420065045357, 0.0065058078616857529, 0.008336992934346199, 0.0086815673857927322, 0.0052309003658592701, 0.013162806630134583, 0.0082816015928983688, 0.010711237788200378, 0.0072140996344387531, 0.0047169770114123821, 0.0072097312659025192, 0.0054097287356853485, 0.0048034973442554474, 0.0098567632958292961, 0.0052644051611423492, 0.0084127858281135559, 0.0099293962121009827, 0.010544816963374615, 0.0063933446072041988, 0.0049086008220911026, 0.0056729703210294247, 0.0072517460212111473, 0.0086105260998010635, 0.01021515391767025, 0.013019410893321037, 0.013801660388708115, 0.0047180666588246822, 0.0097003569826483727, 0.013514910824596882, 0.005537327378988266, 0.0057962709106504917, 0.0073931906372308731, 0.0048115924000740051, 0.010504127480089664, 0.00743075180798769, 0.0049061574973165989, 0.0081948181614279747, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(8) int32_t tensor_data36[8] = { -1067, -7176, 14373, -8459, -5426, 3316, -5180, 4229, };
const TfArray<1, int> tensor_dimension36 = { 1, { 8 } };
const TfArray<8, float> quant36_scale = { 8, { 0.00010668795584933832, 0.00010541381925577298, 6.8613691837526858e-05, 9.3479706265497953e-05, 8.8969056378118694e-05, 5.8046494814334437e-05, 0.00011082801211159676, 0.00011588197230594233, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int8_t tensor_data37[1*3*3*48] = {
  /* [0][0][][] */ -39,116,56,42,81,-40,-37,-2,53,-34,-18,-40,23,-41,94,52,-77,10,-32,2,127,-40,-127,-8,42,-127,36,105,27,12,78,-121,97,-90,76,-127,-21,27,-101,-16,95,15,4,9,7,-31,49,-15, 56,45,98,78,127,75,8,11,87,-42,-127,48,-127,31,-99,62,45,-31,63,55,20,-91,-20,0,127,75,-22,-46,18,21,-27,-127,-37,15,-26,-30,-11,77,-47,86,54,-9,33,-72,-127,-48,50,126, -74,99,20,-12,45,-20,-8,-14,108,-43,88,62,60,-76,68,-47,48,67,16,-36,44,127,-56,74,-13,84,29,-25,15,-108,86,10,82,-127,127,-9,-18,-8,17,71,78,-38,105,-25,38,33,127,-22,
  /* [0][1][][] */ 38,17,127,-8,106,63,-40,-3,30,36,-61,-27,-37,-75,33,-51,-59,15,33,113,-50,7,-103,84,82,35,34,-11,-127,-107,16,-61,48,96,-62,-31,23,-8,23,-8,-26,67,0,-52,-1,22,-116,-76, 64,-85,-39,-116,117,-45,47,6,-48,71,48,64,32,-22,127,31,-8,53,-108,127,-51,71,-29,-127,25,-13,24,75,41,-116,7,9,-53,-27,-72,9,-102,54,-127,-81,7,-127,-59,-93,-33,127,-18,-11, -35,118,-99,-10,-113,-83,-23,-47,61,78,-13,127,-103,-127,-1,-41,-85,127,-127,-19,27,-25,10,39,27,9,52,-127,14,-70,64,-15,48,105,-20,33,-71,72,-83,-13,127,25,-87,127,-7,64,50,-127,
  /* [0][2][][] */ 27,-48,20,-12,-4,-24,30,60,-102,127,45,-47,84,14,72,90,-66,-2,-11,81,80,-21,-66,2,-77,-79,31,18,-113,-54,127,20,-127,48,-62,-80,47,-127,-108,20,99,-78,105,50,72,-18,0,-12, -101,-127,-19,-127,-14,5,127,87,-127,97,-9,52,3,-10,91,15,127,-59,33,-6,40,52,25,24,-31,-11,3,27,-29,-6,11,-101,32,37,64,-5,-127,-6,-45,127,79,50,-93,-80,-14,-16,71,-25, -127,0,-3,-97,-86,-127,-11,127,60,-38,-47,83,94,18,-4,127,5,72,-39,33,1,17,21,28,-21,127,127,-8,-79,-127,64,-50,-35,36,28,21,-112,-126,44,36,73,-12,-127,65,-88,1,68,-19,
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0065362118184566498, 0.008365199901163578, 0.0076204077340662479, 0.0074126822873950005, 0.0060543282888829708, 0.0094017162919044495, 0.015152822248637676, 0.0099291428923606873, 0.0072327363304793835, 0.0058702346868813038, 0.015212508849799633, 0.0056174760684370995, 0.0077888183295726776, 0.0061773643828928471, 0.0060468125157058239, 0.0099679576233029366, 0.0084084123373031616, 0.0081406664103269577, 0.010562778450548649, 0.0059412326663732529, 0.0058889696374535561, 0.0083966571837663651, 0.0057850931771099567, 0.010838855057954788, 0.0072160973213613033, 0.0075716166757047176, 0.008182167075574398, 0.011536139063537121, 0.0044107586145401001, 0.0058616111055016518, 0.0070229386910796165, 0.0059021967463195324, 0.0075147836469113827, 0.010864553973078728, 0.010836128145456314, 0.012300512753427029, 0.0054181232117116451, 0.0063051921315491199, 0.0039637000299990177, 0.0097458362579345703, 0.0048153474926948547, 0.0137582803145051, 0.0065556149929761887, 0.0071007548831403255, 0.0078611914068460464, 0.009766031987965107, 0.0057385149411857128, 0.008333202451467514, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 3 };
const ALIGN(8) int32_t tensor_data38[8] = { 1659, -5093, 15398, 7223, 3715, -4146, 5778, 10743, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 8.88466602191329e-05, 5.4954536608420312e-05, 6.7594846768770367e-05, 8.0324141890741885e-05, 7.2830458520911634e-05, 6.0695685533573851e-05, 0.00010416864097351208, 6.590849079657346e-05, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int8_t tensor_data39[1*3*3*48] = {
  /* [0][0][][] */ -8,70,-86,-108,-23,-62,-43,-59,74,-127,-1,-127,9,-15,64,-74,-60,-103,0,95,-127,-77,-39,-46,59,-127,20,54,-127,57,-127,44,-72,13,89,-90,45,-13,89,27,-65,-3,11,61,-67,-38,-90,28, 127,58,22,2,127,-9,71,-59,-68,17,116,50,-98,20,95,88,-96,83,-110,75,-127,-95,40,24,76,120,26,109,36,82,-121,54,-8,43,41,-93,72,46,-27,33,8,2,-12,127,116,52,-45,127, 112,56,10,29,105,127,127,-127,90,113,125,94,14,92,19,-39,-56,-119,-127,11,-56,-90,9,-127,107,105,-110,95,-106,127,70,96,-15,127,40,-48,91,105,-16,58,-111,-30,-17,-104,-19,17,-33,95,
  /* [0][1][][] */ -86,34,-33,-127,-77,-23,28,107,27,-42,127,-42,85,-72,113,-47,29,38,-51,-13,-120,127,-12,-43,20,-15,-7,90,95,10,58,127,16,-52,21,-14,-66,13,59,-127,-107,-92,-51,-33,-15,51,-28,-33, 41,-36,-1,-21,16,-83,19,-5,-54,-81,-6,55,-7,127,-47,-8,41,48,-30,-95,7,-10,19,18,-14,-89,76,100,-57,-78,40,-21,48,-56,57,-86,127,57,-48,-107,127,-112,-79,105,73,14,-99,86, 30,-65,-23,-50,19,-55,0,-35,60,-28,92,-11,2,10,-11,-127,-15,-57,-62,127,-114,7,-127,-107,67,-40,-127,-20,-45,85,46,79,18,-38,26,-127,15,107,43,14,-39,-127,-8,-35,-16,41,57,-29,
  /* [0][2][][] */ -126,127,4,-84,-19,-47,-60,18,41,-85,118,-41,-73,5,53,-35,33,37,-29,53,25,49,71,-72,8,58,7,-98,59,6,-34,79,-94,28,-113,-78,-65,-12,107,-95,16,91,109,25,-56,81,48,19, -24,33,-12,-6,-45,3,-20,34,127,89,-44,57,-127,52,-127,-15,-13,17,-35,102,-3,50,98,-41,36,78,5,-127,-26,102,-63,74,-6,-77,-127,-59,-27,17,81,-14,-70,-115,127,113,127,127,27,90, 36,-55,-127,-29,54,-32,-104,-16,39,-3,28,-2,38,5,-10,-124,-127,-127,-21,74,21,-66,-49,-71,127,-58,-60,-75,-14,-40,28,99,-127,31,19,57,-42,127,127,15,-113,-109,19,-1,-115,66,127,72,
};
const TfArray<4, int> tensor_dimension39 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.0082403989508748055, 0.008369002491235733, 0.0097293732687830925, 0.0068185711279511452, 0.010190045461058617, 0.011709141544997692, 0.006983563769608736, 0.0076909023337066174, 0.0081879822537302971, 0.0077943578362464905, 0.005947526078671217, 0.012521910481154919, 0.011342749930918217, 0.014913160353899002, 0.0061779804527759552, 0.0053245746530592442, 0.0088040921837091446, 0.0068137380294501781, 0.0042955400422215462, 0.0039798947982490063, 0.0074017168954014778, 0.010755732655525208, 0.010800360701978207, 0.0073967264033854008, 0.0039743809029459953, 0.0069825788959860802, 0.010284592397511005, 0.0063263503834605217, 0.012759270146489143, 0.010264606215059757, 0.0077243265695869923, 0.0042899977415800095, 0.0078233769163489342, 0.0077623245306313038, 0.0089110080152750015, 0.0054785218089818954, 0.0060146553441882133, 0.0049900072626769543, 0.0067088869400322437, 0.0089069632813334465, 0.0049887881614267826, 0.0052913925610482693, 0.0084877023473381996, 0.0070564770139753819, 0.0097039872780442238, 0.0056845038197934628, 0.00817070621997118, 0.006976238451898098, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 3 };
const ALIGN(8) int32_t tensor_data40[8] = { -3046, -11691, 12705, 6605, -771, -4265, -511, 4000, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 6.9916975917294621e-05, 6.9582689320668578e-05, 7.0541900640819222e-05, 5.2080031309742481e-05, 6.922710599610582e-05, 5.0488317356212065e-05, 6.7192610003985465e-05, 6.6461434471420944e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int8_t tensor_data41[1*3*3*48] = {
  /* [0][0][][] */ 27,-50,-127,3,39,-24,-63,-50,-48,127,-23,71,-127,-51,24,-105,-52,-127,-89,-54,25,-22,-35,-18,-14,127,3,74,-67,66,127,69,18,-127,11,73,105,-10,127,-127,-33,77,65,-127,11,-30,-21,48, -14,-67,-56,4,45,36,101,-68,-88,61,127,50,-66,-75,61,-127,-10,40,40,103,53,-81,57,26,71,-46,-127,-62,-18,77,79,-22,-25,-105,18,-27,127,-6,0,-51,76,-15,127,-120,-5,104,45,127, -57,-41,-36,-15,49,-7,-83,-40,11,17,20,-50,65,-127,75,-10,-89,22,45,15,24,-38,-14,-18,86,-83,-10,48,88,-2,53,-17,21,43,127,-53,65,29,42,-63,-59,-127,10,-37,-92,-82,39,45,
  /* [0][1][][] */ -16,-52,-78,11,2,59,-119,-16,-123,-28,31,41,-42,-35,127,-83,-100,-14,-127,43,18,-127,51,-12,-11,62,29,43,-127,-21,66,22,-82,-39,52,-7,56,50,-4,-3,-91,-24,-78,-20,2,-44,-20,68, 6,-66,-25,-127,-110,127,127,-82,-127,-41,57,-49,-119,48,-22,-50,127,-93,55,127,26,-62,-4,65,-82,-34,-66,-62,22,63,75,127,-78,17,-48,-62,24,25,-105,-21,70,-69,-84,22,-51,-89,-127,-62, -82,-48,101,117,82,25,-99,-127,-22,-46,106,-127,72,-107,-46,-26,-119,-7,-30,70,22,-6,-39,21,22,-54,23,27,65,-117,97,-67,-14,-14,87,-117,83,127,-77,-46,127,-125,-18,13,-65,30,70,32,
  /* [0][2][][] */ -44,82,125,81,-82,92,-115,-90,-63,44,2,16,-4,26,15,-116,-53,95,91,-42,127,-62,52,2,-7,67,72,50,-87,-123,-8,-5,127,-7,2,72,7,26,16,-71,-53,-56,-65,17,4,35,71,-40, -85,127,-35,84,-49,47,41,-8,-85,42,56,-11,-45,12,45,18,65,70,56,62,35,-80,0,127,-33,32,-82,42,-40,-127,28,16,15,71,81,-55,-4,-32,-28,-74,87,-20,24,107,-127,66,64,-107, -127,103,115,39,127,36,-80,104,-101,57,45,31,0,4,39,-100,-70,87,106,-38,49,-81,-127,70,127,93,-19,-127,-94,-76,-15,-20,74,-5,72,127,-21,32,-92,-107,-28,-119,-7,-6,125,127,62,-7,
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.0041956040076911449, 0.007596068549901247, 0.0061275460757315159, 0.0087224068120121956, 0.0071854661218822002, 0.0041930573061108589, 0.0061741592362523079, 0.0045889327302575111, 0.0030375744681805372, 0.0083798570558428764, 0.0091892480850219727, 0.013081574812531471, 0.007938215509057045, 0.0081239975988864899, 0.0057789972051978111, 0.0031208377331495285, 0.0064252573065459728, 0.0082793049514293671, 0.0091304462403059006, 0.0065723401494324207, 0.0045758355408906937, 0.0035742870531976223, 0.010659146122634411, 0.0091438619419932365, 0.011763195507228374, 0.0078426739200949669, 0.006240346934646368, 0.015863411128520966, 0.0068786852061748505, 0.0044215372763574123, 0.0044553014449775219, 0.012217835523188114, 0.0090855583548545837, 0.01069928053766489, 0.0044109458103775978, 0.0079451277852058411, 0.0051126903854310513, 0.0083972876891493797, 0.0091114938259124756, 0.0050820088945329189, 0.010470740497112274, 0.0058394498191773891, 0.013274567201733589, 0.0080063678324222565, 0.0059879440814256668, 0.0082845799624919891, 0.0080431709066033363, 0.0072467406280338764, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(8) int32_t tensor_data42[8] = { 166, -569, 1822, 4566, 602, 7859, 9192, 12499, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 7.2067377914208919e-05, 6.5603286202531308e-05, 6.8433357228059322e-05, 7.6095580880064517e-05, 8.0034333223011345e-05, 5.8468634961172938e-05, 8.4425118984654546e-05, 6.8689521867781878e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 307, -269, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00037400145083665848, 0.00027704518288373947, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.074746198952198029, } };
const TfArray<1, int> quant46_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.071585409343242645, } };
const TfArray<1, int> quant47_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.062999539077281952, } };
const TfArray<1, int> quant51_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.069788165390491486, } };
const TfArray<1, int> quant54_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.081082254648208618, } };
const TfArray<1, int> quant55_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.046516411006450653, } };
const TfArray<1, int> quant59_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.055299684405326843, } };
const TfArray<1, int> quant62_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.069519191980361938, } };
const TfArray<1, int> quant63_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.055032823234796524, } };
const TfArray<1, int> quant66_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.11758700758218765, } };
const TfArray<1, int> quant67_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.07710392028093338, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.2001064270734787, } };
const TfArray<1, int> quant70_zero = { 1, { -27 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,16,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,31,9 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,17,32 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,18,4 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,5 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,19,34 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,20,6 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,35,7 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,21,36 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,22,8 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,37,10 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,23,38 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,24,11 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,39,12 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,25,40 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,26,13 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,41,14 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,27,42 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,28,15 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,29,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,30,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 72;
  for(size_t i = 0; i < 72; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0,
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  71,
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 28; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
