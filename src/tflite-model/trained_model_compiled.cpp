/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 09.12.2021 19:54:10

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 237280;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[72];
TfLiteEvalTensor tflEvalTensors[72];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[32] = { -5449, -4463, -5478, -5407, -4517, -3330, 4773, -5426, -5554, -5515, -5426, -4192, 3481, -5470, 5082, -6083, -5441, -3589, -5022, -1125, -3638, -5420, -3800, -5979, -4166, 144, -4541, -5427, -6135, -4894, -4176, -2942, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 0.00011017127690138295, 0.00012554384011309594, 0.00010954911704175174, 0.00011094681394752115, 9.0606619778554887e-05, 0.00012056402920279652, 0.00016833108384162188, 0.00011061839904868975, 0.00010495190508663654, 0.000108875181467738, 0.00011065358557971194, 0.00012192194844828919, 0.00014441568055190146, 0.00011012510367436334, 0.00011903296399395913, 0.00013117236085236073, 0.00011035062198061496, 0.00011637693387456238, 0.0001019389383145608, 0.0001240287529071793, 0.00014894250489305705, 0.00011076471128035337, 9.6140895038843155e-05, 0.00013549657887779176, 0.00010252510401187465, 8.8824861450120807e-05, 0.00011682978220051154, 0.00011063220154028386, 0.00013813145051244646, 0.00012696172052528709, 0.00010224465950159356, 0.00015931659436319023, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[8] = { -75936, 24754, 1940, 89767, -42725, 11731, -77002, -74219, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 4.3898024159716442e-05, 8.478626114083454e-05, 0.00020286299695726484, 3.9828079025028273e-05, 4.2750569264171645e-05, 0.00022465216170530766, 3.1376228434965014e-05, 3.73371149180457e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[48] = { 2926, 5511, 5742, 15946, -6476, -2180, -2451, -736, 5290, 262435, 2661, -971, 3196, 7813, -3011, -3483, 2105, -1261, 3686, 1536, -1026, -4053, -1764, 1223, 4338, 3765, 4052, 1691, 4731, -1509, -4190, -1394, 2656, 3140, -12989, -3840, 9819, 12664, -274, -3656, 8147, 1251, -12815, 3601, -9196, 2813, -1186, 3605, };
const TfArray<1, int> tensor_dimension4 = { 1, { 48 } };
const TfArray<48, float> quant4_scale = { 48, { 0.00033008187892846763, 0.00035725653287954628, 0.0001456719619454816, 5.2205479732947424e-05, 0.00022057347814552486, 0.00029307461227290332, 0.00030857016099616885, 0.00041464265086688101, 0.0001561796962050721, 6.9023035393911414e-06, 0.00039419266977347434, 0.00037254297058098018, 0.00024515777477063239, 0.00018939049914479256, 0.00022614405315835029, 0.00032487767748534679, 0.00055497972061857581, 0.00041143220732919872, 0.00050044810632243752, 0.00018619924958329648, 0.00030154141131788492, 0.00030399070237763226, 0.00015940728189889342, 0.00022905487276148051, 0.00028762247529812157, 0.00019293568038847297, 0.00022748309129383415, 0.00038200183189474046, 0.00021789451420772821, 0.00031156610930338502, 0.00022640298993792385, 0.00021033742814324796, 0.00067023956216871738, 0.00013578553625848144, 0.00013177386426832527, 0.00039316024049185216, 0.00012595349107868969, 7.3823182901833206e-05, 0.00046272369218058884, 0.00020612377556972206, 0.0001568194420542568, 0.00035183638101443648, 0.00016161210078280419, 0.00028144661337137222, 0.00013678953109774739, 0.00047382232150994241, 0.00029048207215964794, 0.00043333391658961773, } };
const TfArray<48, int> quant4_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[48] = { -9798, 5741, 1045, -18842, -4855, -12939, 7023, 10904, -23574, 14793, -5908, 13013, 5931, 6669, 23685, 10094, -13149, -12413, -6531, 268849, -8907, 5424, -7697, -30944, -50928, -16564, -2346, -8357, 4792, -926, -88389, -22179, -11636, -214468, -435, -24839, -14277, -30557, -3091, 17745, -15147, 41448, -51451, -7014, -1321, 7168, 7659, -2321, };
const TfArray<1, int> tensor_dimension5 = { 1, { 48 } };
const TfArray<48, float> quant5_scale = { 48, { 0.00016269501065835357, 0.00026240365696139634, 0.0003706199349835515, 7.5179123086854815e-05, 8.6132982687558979e-05, 2.959848461614456e-05, 0.00027925553149543703, 0.00012352220073807985, 4.8590387450531125e-05, 0.00046168846893124282, 0.0001992384932236746, 0.00022108232951723039, 9.5830160717014223e-05, 0.00014219667355064303, 9.7344927780795842e-05, 0.00020723039051517844, 0.00013250566553324461, 9.7523610747884959e-05, 9.8833639640361071e-05, 2.4210391984524904e-06, 9.6796029538381845e-05, 5.8481935411691666e-05, 8.9256507635582238e-05, 5.923787466599606e-05, 7.8772081906208768e-06, 9.1386020358186215e-05, 0.00036398108932189643, 0.00016074237646535039, 0.00020021069212816656, 0.00018351395556237549, 9.0546445790096186e-06, 4.6056280552875251e-05, 9.6909745479933918e-05, 4.8961587708618026e-06, 0.0014014405896887183, 4.9746780860004947e-05, 4.3703053961507976e-05, 4.8066889576148242e-05, 0.00017506103904452175, 0.00010163159458898008, 3.3158750738948584e-05, 1.1016548342013266e-05, 1.5286970665329136e-05, 4.0456834540236741e-05, 0.00073108187643811107, 2.3137208700063638e-05, 0.00019542382506188005, 0.00030310638248920441, } };
const TfArray<48, int> quant5_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[48] = { 17385, 2644, -804, -17629, -1106, 12078, -2555, -56, 1757, 1800, 56, -5196, 4441, 813, 3508, 266, -2526, -7866, 3592, -4190, 3445, 519, -617, 16912, 169, -25186, -1500, 756, 3728, 193, -1256, 1325, 1144, -400, -6523, -8658, -959, -2382, -6008, 714, 16449, -174, 358, -2624, 436, 16423, -1623, -289, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 5.0984599511139095e-05, 0.00012755196075886488, 0.00022288553009275347, 6.9626839831471443e-05, 0.00024321861565113068, 0.00010321585432393476, 0.00023828659323044121, 0.00045293750008568168, 0.00023346309899352491, 0.00019538174092303962, 0.00037105445517227054, 0.00017194390238728374, 0.00024003702856134623, 0.00031079418840818107, 0.00022150085715111345, 0.00029661873122677207, 0.00021817711240146309, 0.00014177379489410669, 0.00020790169946849346, 0.00023864129616413265, 0.00019958391203545034, 0.00033792020985856652, 0.00036907874164171517, 5.7661858591018245e-05, 0.00023237317509483546, 4.6960714826127514e-05, 0.00035232215304858983, 0.00050758011639118195, 0.00034449528902769089, 0.00029921717941761017, 0.00062364473706111312, 0.0004215666267555207, 0.00027670210693031549, 0.0004714537353720516, 0.00016666516603436321, 0.00012966294889338315, 0.00059346901252865791, 0.00026523802080191672, 0.00019121705554425716, 0.00032972905319184065, 7.5683885370381176e-05, 0.0002490751794539392, 0.00017779014888219535, 0.00019138914649374783, 0.000581845932174474, 9.8443495517130941e-05, 0.00024613025016151369, 0.00046468444634228945, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -17311, -55923, -15787, -270, -8441, -11996, 15051, 46972, -13909, -3799, 8908, -2598, -15195, 7831, -33613, -800, -28164, -3838, 27813, -504, 15536, -5157, -5325, -53654, 18769, 56, -22490, -131, 15893, -1763, 9207, -2578, -24139, -51054, 7159, 317, 7337, -90565, -601, -17605, -96415, 9596, -32642, -2413, 26025, 4082, -1139, -3121, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00021689922141376883, 1.6972622688626871e-05, 3.5560373362386599e-05, 0.002049257280305028, 3.841207580990158e-05, 7.8581557318102568e-05, 4.4919313950231299e-05, 2.4687828044989146e-05, 8.7811167759355158e-05, 0.00037738506216555834, 0.00012467915075831115, 0.00056110566947609186, 0.00011438631918281317, 0.00013648340245708823, 2.2455642465502024e-05, 0.00022794057440478355, 2.3570404664496891e-05, 0.00034915498690679669, 5.8521782193565741e-05, 0.00094767083646729589, 0.00014554877998307347, 9.6605544968042523e-05, 0.00016836744907777756, 2.1185975128901191e-05, 0.00012483862519729882, 0.0026807326357811689, 5.3582265536533669e-05, 0.00023816745670046657, 0.00013179387315176427, 0.00020363624207675457, 0.00016364752082154155, 0.00012240679643582553, 3.3190059184562415e-05, 1.0837648915185127e-05, 0.00026844779495149851, 0.0019241361878812313, 0.00026690869708545506, 9.2068967205705121e-06, 0.00078646437032148242, 2.2294392692856491e-05, 8.276810149254743e-06, 3.4370037610642612e-05, 2.7117746867588721e-05, 0.00031914340797811747, 6.2640850956086069e-05, 0.00044423129293136299, 0.0001264095917576924, 0.00033067102776840329, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { -1863, -765, -3085, 3874, 2111, 506, 4213, -25233, -16053, -1941, 28510, -191, -4112, -360, -3830, -590, -31995, 332, -1041, -2089, -1658, -98, -1008, -11187, -2703, -3701, -2332, 2472, -1182, 575, -345, -38151, -4798, -611, 3763, -16471, -334, -422, -594, -26431, -482, -175, 2292, -511, -1149, 358, 4317, -498, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0002279228501720354, 0.00017832791490945965, 0.00024367745209019631, 9.8817421530839056e-05, 0.00019656945369206369, 0.00045992224477231503, 0.00026572932256385684, 5.3537372878054157e-05, 3.9780126826371998e-05, 0.00043940803152509034, 5.2747858717339113e-05, 0.000337662931997329, 0.00017434394976589829, 0.00034702674020081758, 0.00011992188228759915, 0.0004257136897649616, 2.9999382604728453e-05, 0.00068102433579042554, 0.00030236344900913537, 0.00020392352598719299, 0.00039401036337949336, 0.00036945097963325679, 0.00038446873077191412, 7.9257180914282799e-05, 0.00020946994482073933, 0.00014208428910933435, 0.00022414738486986607, 0.00031952105928212404, 0.00034502291237004101, 0.00084291276289150119, 0.00034627062268555164, 3.1348430638900027e-05, 0.00015731991152279079, 0.00025021895999088883, 0.00012837287795264274, 8.0238191003445536e-05, 0.00027255102759227157, 0.00072469771839678288, 0.00031166739063337445, 5.5742035328876227e-05, 0.00074131059227511287, 0.00079430756159126759, 9.4087270554155111e-05, 0.00049911020323634148, 0.00031255173962563276, 0.00092804455198347569, 0.00021559384185820818, 0.00036275599268265069, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[8] = { 10138, -9850, -1852, 110685, 42628, 15301, -532, 7149, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 8.9988512627314776e-05, 0.00018603361968416721, 9.9443699582479894e-05, 8.8132210294133984e-06, 5.5823980801505968e-05, 2.977850272145588e-05, 0.00061563262715935707, 5.9156893257750198e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { -5707, 10410, -3176, -19543, 29181, 41796, -280, -2357, -843, 202, -18033, 167, 7835, -9839, -1449, -1870, -207, -10612, -115564, -5271, -1775, 18269, -3955, -2437, -2912, -24256, -9503, -44706, -4997, 54096, -2174, -248, -1639, -27768, 3715, -249, 28530, -3453, 7695, -53, -13148, -16891, -14037, -6687, -3669, 20329, 20975, -9489, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00020104442955926061, 0.00010474704322405159, 0.00015397676907014102, 2.732866232690867e-05, 8.2724087405949831e-05, 4.248357072356157e-05, 0.00024694943567737937, 0.00055815355153754354, 0.00078808324178680778, 0.00036295008612796664, 3.3733533200575039e-05, 0.00019209034508094192, 0.00011892499605892226, 9.8199205240234733e-05, 0.00035606764140538871, 0.00014502274279948324, 0.0037847477942705154, 7.6511336374096572e-05, 8.8794695329852402e-06, 0.00022306140454020351, 0.00018570953398011625, 0.00011476048530312255, 0.00011999345588264987, 0.00029120797989889979, 0.00029586625169031322, 5.3851676057092845e-05, 0.0001408513926435262, 4.8852274630917236e-05, 0.00018459736020304263, 4.0140930650522932e-05, 8.5159619629848748e-05, 0.0016889858525246382, 0.00055895920377224684, 2.0427447452675551e-05, 0.0001455374585930258, 0.0030201671179383993, 5.0747599743772298e-05, 0.00011311419075354934, 0.00011595409159781411, 0.0045494912192225456, 7.2438277129549533e-05, 4.5996290282346308e-05, 4.6027787902858108e-05, 8.6108986579347402e-05, 9.9983473774045706e-05, 9.7276730230078101e-05, 9.422271978110075e-05, 4.2791089072125033e-05, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 2825, -232, -1512, 395, 139, 936, -1595, 3573, -502, 2149, 1008, -3298, -2601, 4162, 2563, -11042, -1973, 7918, 847, 116, 761, -38613, 1405, -286, 43, -8675, -143, -1734, 5111, -4911, -1577, 4547, 1727, -162, -1231, -13572, -2013, -67567, -50361, -9093, -30, 354, -2709, -1097, -74, -287, 14347, -31, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00023467061691917479, 0.00025801514857448637, 0.00033988137147389352, 0.00025467548402957618, 0.00064976746216416359, 0.00034750899067148566, 0.00034121423959732056, 0.00011478978558443487, 0.00056829798268154263, 0.00019775655528064817, 0.00021049028146080673, 0.00021346815628930926, 0.0001934003084897995, 0.00015040261496324092, 0.00025161527446471155, 0.00011890185123775154, 0.00027189825777895749, 0.00014483236009255052, 0.0007024994702078402, 0.00041703268652781844, 0.00039402412949129939, 4.825600262847729e-05, 0.00054667325457558036, 0.0005050813197158277, 0.00017869906150735915, 0.00012536211579572409, 0.00053848681272938848, 0.00030452548526227474, 0.00020888949802611023, 0.00015692797023802996, 0.00040408581844531, 0.00029048911528661847, 0.00018428424664307386, 0.00039287973777391016, 0.00040296235238201916, 9.9927347037009895e-05, 0.00030110683292150497, 2.2343219825415872e-05, 3.9248421671800315e-05, 0.0001364112104056403, 0.00017117534298449755, 0.0003497959696687758, 0.00023820628121029586, 0.00057956977980211377, 0.00069022021489217877, 0.00059875164879485965, 5.641400275635533e-05, 0.00041738161235116422, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { -76, 5526, 87428, -9171, -18542, -8049, -516, -7213, -11565, -3405, -20355, -507, -13013, -4370, 11178, -512, -8220, 32985, -46881, -9843, 14762, 140, -1149, -111647, -15601, -18744, -6302, -5176, -7053, -1350, -9829, -17835, -48153, -5129, 4429, -288, -19053, -148, -524, 548, 16110, -5854, 3699, 1400, -31255, -21538, -322149, -18079, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00028200302040204406, 0.00010825924982782453, 9.7083375294459984e-06, 9.5757495728321373e-05, 2.5756635295692831e-05, 0.0001241207355633378, 0.00011025197454728186, 0.00016703239816706628, 0.00012207917461637408, 0.00016476692690048367, 4.1030798456631601e-05, 0.0004707414482254535, 5.7296143495477736e-05, 8.6853317043278366e-05, 9.4426293799187988e-05, 0.0014085969887673855, 0.00017397098417859524, 7.1113696321845055e-05, 6.0156235122121871e-06, 0.00015056367556098849, 8.2322527305223048e-05, 0.0048620300367474556, 8.9495901193004102e-05, 1.6834188727443689e-06, 0.00011720752081600949, 4.7155415813904256e-05, 9.646407124819234e-05, 0.00017880531959235668, 0.00012142956256866455, 0.00048564060125499964, 0.00012870521459262818, 8.7449203419964761e-05, 1.3099430361762643e-05, 0.00010823202319443226, 0.00020076298096682876, 0.0020505106076598167, 0.0001107492862502113, 0.004548453725874424, 0.0024568240623921156, 0.00076760520460084081, 3.0693761800648645e-05, 0.00013940084318164736, 4.699868441093713e-05, 0.00035948862205259502, 2.7018293621949852e-05, 7.6486445323098451e-05, 3.0822520784568042e-06, 0.00011129984341096133, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { 18907, 1968, -4800, 1515, -1008, -4735, 953, 559, 1874, 1583, -2688, -3432, 2371, 6884, -2720, -2064, -4939, -27791, -4415, -147190, 675, -3304, -1965, -1942, -1014, -1372, -5918, -776, 11421, -861, -6822, -6187, -3736, -9625, -7271, -7941, -945, -28333, 7043, -5471, -190, -3904, 7631, -2553, -3405, 240, 16406, -1853, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 6.3988700276240706e-05, 0.00022632369655184448, 0.00029950469615869224, 0.00041770018287934363, 0.00014617308625020087, 0.00025150150759145617, 0.00021888824994675815, 0.0004568370059132576, 0.00031120068160817027, 0.00032488859142176807, 0.00021669552370440215, 0.0001624448923394084, 0.0004284971219021827, 0.0001372670812997967, 0.00023235220578499138, 0.00040420328150503337, 0.00011960810661548749, 3.1606545235263184e-05, 0.0001830447290558368, 7.6710985013050959e-06, 0.00030087365303188562, 0.00018935614207293838, 0.00020621927978936583, 0.00020123169815633446, 0.00044775858987122774, 0.0003478149592410773, 0.00014513640780933201, 0.00037125774542801082, 5.0058410124620423e-05, 0.00030885625164955854, 0.00012511653767433017, 0.00026188703486695886, 0.00019141273514833301, 0.00012253808381501585, 0.00011389399878680706, 0.00011356422328390181, 0.0003100483154412359, 6.7500179284252226e-05, 0.00013024390500504524, 0.0001903324737213552, 0.00054064026335254312, 0.00021342739637475461, 9.9819822935387492e-05, 0.00025775414542295039, 0.00019172523752786219, 0.00042673147981986403, 6.1337028455454856e-05, 0.00053146074060350657, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { 2177, -54494, -2470, 3016, -80604, 919, 7997, -23282, -5729, -33696, 16322, -9246, 15731, -1638, 1295, 13243, -11368, -511, -1244, -3965, -2864, 18593, 11774, -1475, -56, -15745, 5332, -116526, -2721, -2276, -430, -1540, -4479, -1555, 1344, -3081, 8363, -200, -44038, -324, -46450, -8336, -119099, -3201, -50, -37980, -152553, -4626, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 7.7519558544736356e-05, 1.097358745028032e-05, 0.00053204415598884225, 0.00014100843691267073, 8.7062071543186903e-06, 0.00043702177936211228, 0.00026959250681102276, 9.0792615083046257e-05, 0.00022424453345593065, 6.2881605117581785e-05, 0.00012798703392036259, 0.0001119875960284844, 0.00014948855096008629, 4.6937704610172659e-05, 0.0001766134228091687, 5.2767023589694872e-05, 7.459166954504326e-05, 0.0026062044780701399, 0.00034598738420754671, 0.00024944456527009606, 0.00010320191358914599, 3.0963070457801223e-05, 9.1328496637288481e-05, 0.0002191042440244928, 0.00017292662232648581, 6.7907487391494215e-05, 0.00013892733841203153, 8.5391793618327938e-06, 3.0101098673185334e-05, 0.00024794475757516921, 0.0010874627623707056, 0.00091657420853152871, 0.00021151205874048173, 0.0003209575661458075, 0.00049494311679154634, 0.00028555537573993206, 4.143680416746065e-05, 0.0043881870806217194, 1.6474787116749212e-05, 0.00075775274308398366, 1.5132914086279925e-05, 0.00022502009232994169, 6.8745143835258204e-06, 0.00011595855903578922, 0.00027805491117760539, 1.8319635273655877e-05, 8.9417317212792113e-06, 0.00025749250198714435, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { -3933, -84245, -2608, -8578, -10458, -150453, -10344, -485367, -16800, -332, -21223, -3827, 3929, -6763, -24765, 6964, -58485, -75822, -5515, -3478, -58241, -2816, -28863, -18570, -387504, -33694, -25126, -16962, -8190, -5927, -4841, -1738, -195719, -3720, -32807, -102, -75094, -25309, 3085, -17814, -11117, -9452, -1380, -46623, -18285, -3348, -41005, 121, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 7.0713627792429179e-05, 1.0666602975106798e-05, 0.00010944507812382653, 8.4473474998958409e-05, 5.8578840253176168e-05, 6.0508700698846951e-06, 6.4314197516068816e-05, 1.7999072952079587e-06, 3.8922396925045177e-05, 5.7679200835991651e-05, 3.7992416764609516e-05, 0.00010254461813019589, 0.00023204612080007792, 0.00010801213647937402, 3.1719009712105617e-05, 0.00018621514027472585, 1.8131184333469719e-05, 1.0952522643492557e-05, 8.8029366452246904e-05, 0.00011361830547684804, 1.3521143955586012e-05, 0.00011061206896556541, 2.8207106879563071e-05, 3.1225619750330225e-05, 2.3694349238212453e-06, 2.4007402316783555e-05, 3.4063228667946532e-05, 4.3975618609692901e-05, 5.820774458697997e-05, 9.1551642981357872e-05, 6.2963867094367743e-05, 0.00015302155225072056, 4.9742980081646238e-06, 9.2867201601620764e-05, 2.2105477910372429e-05, 0.00012212236470077187, 1.2136165423726197e-05, 3.3754378819139674e-05, 0.00020798541663680226, 3.6389661545399576e-05, 7.1375223342329264e-05, 6.5820058807730675e-05, 0.00011307540989946574, 1.7949127141037025e-05, 4.3428735807538033e-05, 0.00014259829185903072, 2.4356462745345198e-05, 0.00012817859533242881, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int8_t tensor_data16[8*3*3*1] = { 
  /* [0][0][][] */ 42, 90, 54, 
  /* [0][1][][] */ 121, 119, 66, 
  /* [0][2][][] */ 40, 127, 102, 
  /* [1][0][][] */ -70, -106, -56, 
  /* [1][1][][] */ -66, -122, 29, 
  /* [1][2][][] */ 103, 15, 127, 
  /* [2][0][][] */ -96, -126, -97, 
  /* [2][1][][] */ 37, 13, -30, 
  /* [2][2][][] */ 43, 127, 84, 
  /* [3][0][][] */ -127, -89, -110, 
  /* [3][1][][] */ -13, -81, -123, 
  /* [3][2][][] */ -115, -89, -120, 
  /* [4][0][][] */ 77, 98, 37, 
  /* [4][1][][] */ 88, 127, 6, 
  /* [4][2][][] */ 70, 82, 21, 
  /* [5][0][][] */ -72, 9, 36, 
  /* [5][1][][] */ 9, 98, 94, 
  /* [5][2][][] */ -127, -101, -72, 
  /* [6][0][][] */ 68, 75, 42, 
  /* [6][1][][] */ 31, 56, 65, 
  /* [6][2][][] */ 127, 107, 45, 
  /* [7][0][][] */ 93, 94, 92, 
  /* [7][1][][] */ 112, 127, 20, 
  /* [7][2][][] */ 14, 54, -33, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant16_scale = { 8, { 0.011193995364010334, 0.021620495244860649, 0.051730062812566757, 0.010156159289181232, 0.010901394300162792, 0.057286296039819717, 0.0080009382218122482, 0.0095209637656807899, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int8_t tensor_data17[8*1*1*8] = { 
  /* [0][0][][] */ -127,12,96,-9,30,69,-99,-24, 
  /* [1][0][][] */ 127,84,49,41,86,-3,22,-110, 
  /* [2][0][][] */ 47,28,17,16,68,2,-127,96, 
  /* [3][0][][] */ -47,1,122,-104,-61,-11,127,-115, 
  /* [4][0][][] */ -106,127,-74,94,43,88,-21,6, 
  /* [5][0][][] */ -90,111,18,-24,127,-68,-12,-59, 
  /* [6][0][][] */ -15,82,127,-45,-122,-49,17,-18, 
  /* [7][0][][] */ -14,80,-127,19,110,-40,-62,97, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant17_scale = { 8, { 0.0025793744716793299, 0.0038390452973544598, 0.0064692669548094273, 0.0047920253127813339, 0.004081137478351593, 0.0044331876561045647, 0.0028006648644804955, 0.0032790184486657381, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int8_t tensor_data18[48*1*1*8] = { 
  /* [0][0][][] */ -3,37,127,-34,-39,-78,13,-45, 
  /* [1][0][][] */ -30,-127,-21,-39,20,-13,-93,82, 
  /* [2][0][][] */ -44,-127,2,-75,73,-109,-51,75, 
  /* [3][0][][] */ -33,30,111,127,-104,96,-46,79, 
  /* [4][0][][] */ 127,-36,110,-18,-44,-7,117,-72, 
  /* [5][0][][] */ 70,-46,127,-32,97,-67,113,-67, 
  /* [6][0][][] */ -2,127,69,-47,-71,-49,-9,-46, 
  /* [7][0][][] */ 127,-54,40,17,-25,-81,64,-14, 
  /* [8][0][][] */ 11,77,2,-127,-16,-100,-107,44, 
  /* [9][0][][] */ 111,-56,31,51,-50,32,127,-49, 
  /* [10][0][][] */ -127,0,36,-64,-22,-61,-31,9, 
  /* [11][0][][] */ -27,28,-127,87,-4,78,8,83, 
  /* [12][0][][] */ -48,-4,-127,-72,-7,-76,-14,70, 
  /* [13][0][][] */ -27,17,-121,-107,-75,-127,-57,-19, 
  /* [14][0][][] */ 11,22,95,58,28,127,26,79, 
  /* [15][0][][] */ 59,-34,27,127,49,28,93,9, 
  /* [16][0][][] */ 1,24,25,16,-56,-75,66,-127, 
  /* [17][0][][] */ -85,14,-91,127,3,32,-1,2, 
  /* [18][0][][] */ -22,37,-13,-127,-3,-33,-33,-5, 
  /* [19][0][][] */ -71,-48,70,127,-92,100,-62,56, 
  /* [20][0][][] */ 48,-59,57,-67,119,-75,55,127, 
  /* [21][0][][] */ 36,127,20,-25,108,62,-42,-8, 
  /* [22][0][][] */ -127,-16,-105,14,52,44,-74,71, 
  /* [23][0][][] */ 63,-41,-62,-127,80,-38,-77,-64, 
  /* [24][0][][] */ -67,34,41,16,-127,-56,-61,-21, 
  /* [25][0][][] */ -84,83,7,103,-127,58,-68,-51, 
  /* [26][0][][] */ -44,-127,-103,115,68,57,-23,-28, 
  /* [27][0][][] */ -127,34,38,-40,-11,-32,-42,44, 
  /* [28][0][][] */ -73,55,98,-116,-127,-82,-14,-82, 
  /* [29][0][][] */ -13,91,-127,42,0,-71,127,-108, 
  /* [30][0][][] */ -1,103,-107,53,19,127,-4,-79, 
  /* [31][0][][] */ -61,48,83,19,-34,-1,-77,127, 
  /* [32][0][][] */ -51,63,-127,-35,-40,-31,-79,48, 
  /* [33][0][][] */ -40,23,-74,-18,-36,-100,88,-127, 
  /* [34][0][][] */ 79,-87,17,-31,92,127,62,109, 
  /* [35][0][][] */ 56,65,121,-71,10,-1,32,127, 
  /* [36][0][][] */ -97,68,-46,-103,-127,36,32,76, 
  /* [37][0][][] */ -31,-123,110,127,-126,87,39,-70, 
  /* [38][0][][] */ 103,-50,127,-75,106,48,-33,65, 
  /* [39][0][][] */ -20,69,98,25,-73,127,-44,-26, 
  /* [40][0][][] */ -63,-59,-6,-112,51,-127,-49,15, 
  /* [41][0][][] */ -95,-84,-127,98,29,-48,76,-57, 
  /* [42][0][][] */ 78,60,25,96,124,127,57,-1, 
  /* [43][0][][] */ -1,-127,-17,-29,42,-86,50,-59, 
  /* [44][0][][] */ 81,-9,15,-27,127,1,72,97, 
  /* [45][0][][] */ 14,-18,44,-92,-21,-38,-127,60, 
  /* [46][0][][] */ -1,-7,-127,125,111,-100,63,-115, 
  /* [47][0][][] */ -96,76,-127,2,-118,-118,10,49, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant18_scale = { 48, { 0.0055966628715395927, 0.0060574193485081196, 0.0024699231144040823, 0.00088516360847279429, 0.003739906707778573, 0.0049691908061504364, 0.0052319238893687725, 0.0070304227992892265, 0.0026480858214199543, 0.00011703116615535691, 0.0066836858168244362, 0.0063166068866848946, 0.0041567427106201649, 0.003211187431588769, 0.0038343579508364201, 0.0055084237828850746, 0.0094098905101418495, 0.0069759883917868137, 0.0084852864965796471, 0.0031570785213261843, 0.0051127485930919647, 0.0051542771980166435, 0.0027028105687350035, 0.0038837119936943054, 0.004876747727394104, 0.0032712973188608885, 0.0038570617325603962, 0.006476985290646553, 0.0036944837775081396, 0.0052827210165560246, 0.0038387482054531574, 0.0035663505550473928, 0.011364164762198925, 0.0023022950626909733, 0.0022342756856232882, 0.0066661802120506763, 0.0021355890203267336, 0.0012516999850049615, 0.007845655083656311, 0.0034949064720422029, 0.0026589329354465008, 0.0059655187651515007, 0.0027401943225413561, 0.0047720335423946381, 0.0023193182423710823, 0.0080338362604379654, 0.0049252333119511604, 0.0073473402298986912, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int8_t tensor_data19[8*1*1*48] = { 
  /* [0][0][][] */ 50,36,-32,18,-24,69,93,-20,32,33,-122,-98,54,7,-84,-43,17,-35,36,37,29,38,-57,90,38,100,-4,-127,108,-19,45,51,-24,13,65,64,8,18,-37,-79,-49,-54,-20,37,56,20,63,-56, 
  /* [1][0][][] */ 125,57,-40,-58,75,58,-63,74,-63,28,-33,-37,-30,80,-21,-55,74,-80,-77,16,-72,-64,-37,-12,-35,-115,-22,23,13,-44,-7,40,-10,57,79,-18,-30,-24,32,1,-7,36,27,2,-71,32,127,111, 
  /* [2][0][][] */ -97,85,-111,64,-33,0,105,85,-90,8,66,-76,-47,-49,5,-94,-78,-97,-46,35,127,-39,-59,-13,57,97,26,-11,40,30,28,15,-29,-45,48,-21,-21,13,72,-26,43,-74,23,64,3,17,75,31, 
  /* [3][0][][] */ 41,-26,-77,23,27,24,38,42,28,-22,-12,-15,13,65,-46,79,-7,-43,63,7,50,28,-33,69,-29,20,-127,27,22,20,35,50,73,25,43,-16,-19,23,93,-40,15,-5,13,-19,-21,-25,45,-18, 
  /* [4][0][][] */ 20,98,-14,-25,-40,29,-25,-72,-50,-110,-56,45,-58,19,91,34,-42,-52,35,44,25,-44,-62,-14,-8,33,0,9,-16,66,-70,-50,7,16,-43,70,-93,54,-127,37,-72,73,-45,70,72,-1,-49,-110, 
  /* [5][0][][] */ -5,115,22,-114,73,-49,-85,78,-2,14,122,127,8,84,51,31,108,97,-97,-86,-54,-28,70,-46,-38,-72,95,-60,-103,-19,12,18,1,-7,58,-66,-14,-49,14,91,51,77,-24,60,40,-3,108,72, 
  /* [6][0][][] */ -66,-28,-30,85,56,75,98,-10,-37,51,-52,13,2,78,-12,-58,-91,85,33,8,44,103,-42,27,31,89,10,87,-84,82,45,17,62,-58,-5,-17,-11,60,34,-33,27,37,-76,-109,-32,66,-55,127, 
  /* [7][0][][] */ -13,-42,-78,70,31,-54,72,76,-71,65,-36,-127,-5,-47,-110,-65,-56,-16,-21,-19,41,-10,-47,-26,97,27,-43,-32,71,-12,15,23,19,-6,90,-6,-12,54,-9,-110,-36,-27,-27,-50,67,16,-8,-67, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0033082452137023211, 0.0036986730992794037, 0.0028675736393779516, 0.0053013130091130733, 0.0032982723787426949, 0.0001999040978262201, 0.0026379832997918129, 0.0012812638888135552, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,-80,-55,-33,0,-48,-102,-35, 
  /* [1][0][][] */ 64,-127,60,-16,98,99,-98,-114, 
  /* [2][0][][] */ -50,-63,105,127,-57,-92,-7,49, 
  /* [3][0][][] */ -105,-105,-64,-74,-127,64,53,8, 
  /* [4][0][][] */ -115,-30,-50,23,-52,37,-127,13, 
  /* [5][0][][] */ 118,43,54,104,-72,-79,127,101, 
  /* [6][0][][] */ 96,-73,22,-95,102,-127,90,-19, 
  /* [7][0][][] */ -35,-30,-79,97,42,-39,60,-127, 
  /* [8][0][][] */ -104,-76,-23,-76,26,30,-127,-32, 
  /* [9][0][][] */ -127,-22,-13,18,57,55,-66,52, 
  /* [10][0][][] */ 29,13,-14,-127,53,-37,7,-17, 
  /* [11][0][][] */ 90,-79,31,94,-41,-23,127,19, 
  /* [12][0][][] */ -34,62,-4,-127,-61,-52,-23,-70, 
  /* [13][0][][] */ 14,-127,11,-115,112,20,103,27, 
  /* [14][0][][] */ -127,82,68,-115,-68,93,-38,-46, 
  /* [15][0][][] */ 4,94,-55,75,-127,-3,34,17, 
  /* [16][0][][] */ -127,-24,-10,-81,-66,99,110,25, 
  /* [17][0][][] */ 127,74,-20,75,43,-57,-81,-80, 
  /* [18][0][][] */ 98,-11,27,24,-9,-39,49,127, 
  /* [19][0][][] */ -127,35,23,0,-83,-20,-22,14, 
  /* [20][0][][] */ -19,-127,-62,82,35,37,102,-17, 
  /* [21][0][][] */ 39,-73,-61,75,30,-30,127,61, 
  /* [22][0][][] */ -127,-31,-11,-38,-40,18,25,12, 
  /* [23][0][][] */ -127,-91,36,-36,-84,-4,-13,-28, 
  /* [24][0][][] */ 56,-74,-10,-61,-112,-58,127,6, 
  /* [25][0][][] */ 121,-101,-117,80,113,122,-81,-127, 
  /* [26][0][][] */ 97,85,-8,24,127,5,31,-50, 
  /* [27][0][][] */ -35,49,-45,102,-127,-29,-9,27, 
  /* [28][0][][] */ -92,9,-127,-113,-53,-27,32,-33, 
  /* [29][0][][] */ 52,-2,127,8,-74,7,33,-14, 
  /* [30][0][][] */ -25,127,18,31,-29,-25,16,14, 
  /* [31][0][][] */ -12,57,-127,49,-5,-25,37,-87, 
  /* [32][0][][] */ -43,21,-37,-115,-127,80,67,70, 
  /* [33][0][][] */ 11,18,110,-77,-127,20,-82,32, 
  /* [34][0][][] */ 105,-72,-9,115,29,-80,127,-71, 
  /* [35][0][][] */ -63,114,-70,-93,7,70,-127,-78, 
  /* [36][0][][] */ -31,19,-17,72,17,-48,127,49, 
  /* [37][0][][] */ 29,102,77,0,21,68,-41,-127, 
  /* [38][0][][] */ 70,-40,127,35,-31,-48,-8,68, 
  /* [39][0][][] */ -50,-42,56,23,-23,76,-127,20, 
  /* [40][0][][] */ -2,47,42,-102,55,127,-114,-54, 
  /* [41][0][][] */ 49,80,95,-58,122,67,-127,55, 
  /* [42][0][][] */ 80,127,-124,-58,65,-23,97,112, 
  /* [43][0][][] */ -127,-20,-127,-90,-42,31,-124,126, 
  /* [44][0][][] */ 127,-29,-63,59,-4,-67,-78,4, 
  /* [45][0][][] */ -16,127,94,-82,51,1,-88,104, 
  /* [46][0][][] */ -106,-87,-80,127,-91,-108,79,67, 
  /* [47][0][][] */ -36,-116,-82,-63,0,88,-45,-127, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.00093317957362160087, 0.0023346047382801771, 0.0040795109234750271, 0.0012743915431201458, 0.0044516706839203835, 0.0018891768995672464, 0.004361398983746767, 0.0082901902496814728, 0.0042731137946248055, 0.0035761042963713408, 0.0067914710380136967, 0.0031471177935600281, 0.0043934374116361141, 0.0056885173544287682, 0.0040541668422520161, 0.0054290620610117912, 0.0039933319203555584, 0.0025949091650545597, 0.0038052592426538467, 0.0043678912334144115, 0.0036530173383653164, 0.0061850096099078655, 0.0067553096450865269, 0.0010553945321589708, 0.0042531648650765419, 0.00085952976951375604, 0.0064486106857657433, 0.0092903226613998413, 0.0063053546473383904, 0.0054766219109296799, 0.011414673179388046, 0.007716003805398941, 0.0050645247101783752, 0.0086290957406163216, 0.0030505000613629818, 0.0023732425179332495, 0.010862361639738083, 0.0048546954058110714, 0.0034998774062842131, 0.0060350857675075531, 0.0013852546690031886, 0.0045588640496134758, 0.0032541225664317608, 0.0035030273720622063, 0.010649622417986393, 0.0018018275732174516, 0.0045049628242850304, 0.0085051963105797768, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ 7,40,3,-47,-12,34,50,-10,-40,-66,-15,-42,-48,-85,-4,-64,1,-73,13,2,-3,51,-81,-60,53,-2,-22,-95,-53,87,-36,41,10,12,-49,-74,-127,22,55,-14,-13,-34,43,16,-100,46,5,75, 
  /* [1][0][][] */ -1,-31,13,-57,-13,20,16,110,-34,16,48,-111,25,70,-8,-52,-49,-33,102,-29,-59,-26,59,-32,-66,29,-10,-21,-116,-41,22,47,110,42,127,48,60,5,-49,25,-38,74,19,-103,81,-112,78,-24, 
  /* [2][0][][] */ -127,29,-12,47,59,-3,82,44,-22,-78,-2,0,81,36,37,10,11,-11,-53,16,74,-5,-68,25,-127,-104,30,79,-6,8,-73,-25,-38,-62,67,77,-15,75,-37,-27,94,42,-64,-73,-33,-52,64,-99, 
  /* [3][0][][] */ -35,21,-19,-38,-10,-29,6,-17,5,-59,-66,-127,-46,8,-25,107,-54,34,26,-41,14,-63,36,38,36,44,-28,69,-10,-78,38,-22,61,-5,69,30,32,34,30,56,-2,35,40,-38,74,-23,30,-115, 
  /* [4][0][][] */ 78,-46,65,-43,-67,24,0,-14,54,50,-55,14,69,70,-28,-83,-58,-33,2,3,-20,56,84,26,1,45,-66,-127,-9,74,1,-6,68,8,14,13,-54,-6,-12,-21,19,0,-19,-35,-22,-36,26,75, 
  /* [5][0][][] */ 3,28,-54,-47,-12,8,-13,20,-82,-37,28,56,75,21,31,46,15,63,-6,-55,127,-58,2,31,27,-20,52,67,28,3,-48,62,26,-25,26,95,-52,-28,-62,-47,-27,18,35,61,-55,-42,62,24, 
  /* [6][0][][] */ 77,-44,31,20,42,-35,-8,23,16,59,37,-69,11,15,15,-117,-30,-28,63,-54,13,-70,7,28,77,41,-42,-10,127,-43,-42,66,-21,40,29,46,56,-20,-102,25,-16,43,-57,-23,-18,-64,18,88, 
  /* [7][0][][] */ -117,-82,47,10,50,-4,43,-21,-48,-91,-115,-107,-76,19,51,10,-25,53,47,58,-1,16,-48,-50,-71,-39,-20,82,-93,46,-63,-39,10,-37,-54,-42,103,2,11,66,-22,-39,-21,-62,1,113,68,-127, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0043933847919106483, 0.0010057189501821995, 0.0013495351886376739, 0.0020927628502249718, 0.0018079526489600539, 0.0044197691604495049, 0.0032588897738605738, 0.0038869979325681925, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int8_t tensor_data22[48*1*1*8] = { 
  /* [0][0][][] */ 127,-14,-65,74,5,-44,-84,97, 
  /* [1][0][][] */ -71,118,-106,-6,63,48,112,-127, 
  /* [2][0][][] */ -45,127,57,-11,-12,47,85,70, 
  /* [3][0][][] */ 88,-31,4,-83,127,-39,-49,40, 
  /* [4][0][][] */ -127,40,19,-27,65,49,40,-113, 
  /* [5][0][][] */ -74,7,-41,-15,-24,76,61,-127, 
  /* [6][0][][] */ -57,8,43,-25,-127,-3,68,-35, 
  /* [7][0][][] */ 65,-81,-57,-62,57,-127,-105,111, 
  /* [8][0][][] */ -86,74,42,-79,18,127,-124,-55, 
  /* [9][0][][] */ 14,127,58,-4,-26,22,-45,53, 
  /* [10][0][][] */ 127,-107,-97,-30,-46,-92,-37,-34, 
  /* [11][0][][] */ -25,127,24,-94,-110,10,37,87, 
  /* [12][0][][] */ 126,-127,-14,59,-48,-45,-78,32, 
  /* [13][0][][] */ -75,-25,57,63,-80,127,-19,53, 
  /* [14][0][][] */ 104,-101,-32,70,-89,-111,-127,99, 
  /* [15][0][][] */ 88,127,-103,91,-94,111,65,63, 
  /* [16][0][][] */ -111,62,98,-38,-40,12,127,-80, 
  /* [17][0][][] */ -66,-19,-127,3,49,-100,-6,3, 
  /* [18][0][][] */ 83,-23,-26,0,-127,-59,83,66, 
  /* [19][0][][] */ 44,-93,-45,-10,-75,-127,-60,98, 
  /* [20][0][][] */ 68,42,-69,33,-88,39,127,16, 
  /* [21][0][][] */ 84,-10,81,-17,28,25,55,127, 
  /* [22][0][][] */ -127,56,44,49,-119,-56,-17,1, 
  /* [23][0][][] */ 67,80,46,12,-40,-1,57,-127, 
  /* [24][0][][] */ -127,49,43,88,19,-6,31,23, 
  /* [25][0][][] */ 84,-73,-35,-28,-22,-13,-68,127, 
  /* [26][0][][] */ -116,-11,-86,17,43,-44,96,-127, 
  /* [27][0][][] */ 16,51,-16,83,-22,-127,-3,56, 
  /* [28][0][][] */ 28,-17,0,5,22,-73,-18,127, 
  /* [29][0][][] */ 18,-59,53,-127,21,3,-19,9, 
  /* [30][0][][] */ -88,43,20,82,-25,-21,-127,36, 
  /* [31][0][][] */ 103,-35,-127,61,98,113,-56,52, 
  /* [32][0][][] */ -127,-28,-9,3,0,-42,-26,-121, 
  /* [33][0][][] */ 108,38,34,-127,-104,-42,-68,-76, 
  /* [34][0][][] */ -127,118,-106,1,-69,100,79,44, 
  /* [35][0][][] */ 43,-114,-127,1,-60,23,25,54, 
  /* [36][0][][] */ -127,97,21,-78,-76,67,-13,-31, 
  /* [37][0][][] */ 1,66,47,64,35,11,-127,-24, 
  /* [38][0][][] */ -126,127,9,-36,-125,73,-32,-122, 
  /* [39][0][][] */ 46,100,127,-17,-14,-40,25,78, 
  /* [40][0][][] */ -15,27,69,127,-68,-13,30,-27, 
  /* [41][0][][] */ -81,25,9,54,-127,31,-4,49, 
  /* [42][0][][] */ -103,101,-127,79,50,98,41,-89, 
  /* [43][0][][] */ 26,56,107,94,-89,63,5,127, 
  /* [44][0][][] */ 52,-16,-10,15,10,-127,44,53, 
  /* [45][0][][] */ 20,127,-6,2,3,43,53,-76, 
  /* [46][0][][] */ -47,37,15,-57,0,127,-5,22, 
  /* [47][0][][] */ 117,0,-47,127,-21,-119,114,49, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0030184278730303049, 0.0023616321850568056, 0.0032270692754536867, 0.0013086588587611914, 0.0026032086461782455, 0.0060908421874046326, 0.0035191066563129425, 0.00070900615537539124, 0.00052681617671623826, 0.0058191684074699879, 0.00069855042966082692, 0.0044717378914356232, 0.0023088718298822641, 0.0045957444235682487, 0.0015881494618952274, 0.0056378114968538284, 0.00039728783303871751, 0.0090189417824149132, 0.0040042595937848091, 0.0027006000746041536, 0.0052179582417011261, 0.0048927133902907372, 0.005091596394777298, 0.0010496187023818493, 0.0027740523219108582, 0.0018816507654264569, 0.0029684286564588547, 0.004231481347233057, 0.0045692073181271553, 0.011162862181663513, 0.0045857313089072704, 0.00041515353950671852, 0.0020834191236644983, 0.0033136997371912003, 0.0017000677762553096, 0.0010626104194670916, 0.0036094479728490114, 0.0095973173156380653, 0.0041274735704064369, 0.00073820294346660376, 0.0098173245787620544, 0.010519173927605152, 0.0012460165889933705, 0.0066098165698349476, 0.0041391854174435139, 0.012290279380977154, 0.0028551523573696613, 0.0048040500842034817, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int8_t tensor_data23[8*1*1*48] = { 
  /* [0][0][][] */ -38,-20,-13,-25,-52,-35,-65,0,47,14,-62,66,33,-14,-104,107,-51,-75,-57,-118,27,-50,-26,9,36,-59,94,-49,-127,18,-20,18,-32,-12,4,18,-26,96,2,-36,-60,14,26,-11,-58,-79,-54,102, 
  /* [1][0][][] */ -13,-4,21,54,38,43,15,-19,11,41,-7,22,-19,35,-28,44,-45,44,-17,28,53,54,127,11,95,31,9,-16,-65,60,55,11,-13,18,18,-31,4,52,53,-28,57,80,40,-1,-36,54,71,21, 
  /* [2][0][][] */ -100,-101,-13,25,-115,-91,127,-66,-24,68,-23,46,-84,-12,-53,-28,15,-85,28,-121,47,85,-20,35,65,4,-11,64,30,-62,25,32,86,-36,-36,36,-85,82,-76,58,-41,-11,-24,38,85,16,-90,-18, 
  /* [3][0][][] */ -67,-64,-56,47,-101,-45,-127,-11,35,11,-95,-34,98,-54,10,-74,27,-3,-90,50,-104,-13,-6,-40,-118,33,44,-25,-4,-65,-41,79,-112,-41,71,89,-39,-30,-107,-64,-18,30,-40,-79,-77,-91,-45,-6, 
  /* [4][0][][] */ 79,28,25,-37,27,50,-88,-37,50,-118,14,-68,-18,-10,4,58,14,105,-10,89,-12,50,-31,-76,127,59,3,74,-35,-2,80,18,83,43,83,-59,80,-50,65,42,14,3,43,-31,-33,-33,34,11, 
  /* [5][0][][] */ -54,82,95,1,110,92,61,-66,-24,92,28,44,-39,43,-70,2,77,-22,85,60,111,-78,20,48,80,47,-127,57,-49,15,63,-20,79,-36,59,44,-31,52,-4,53,-10,8,-42,102,12,67,-63,-27, 
  /* [6][0][][] */ -40,-26,-3,7,13,-49,-47,-56,-33,76,-28,79,-82,-77,-13,-92,-85,-21,-6,74,-67,-88,-77,-2,-17,-1,68,-64,95,-98,33,-38,30,-29,37,41,-69,32,-98,-75,-63,-127,-57,-100,83,45,-43,-90, 
  /* [7][0][][] */ -66,-61,-52,-56,-83,-85,84,-45,-58,95,-79,58,57,-34,-41,-25,-38,-127,42,-45,26,19,-10,24,-82,-66,24,-39,-44,-23,22,-54,4,-84,-93,52,-27,39,-8,65,-25,36,-19,-83,-43,-64,-71,-12, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant23_scale = { 8, { 0.0029384105000644922, 0.0036112703382968903, 0.00049909693188965321, 0.00089475861750543118, 0.0011819940991699696, 0.0029012025333940983, 0.001695845159702003, 0.0022539696656167507, } };
const TfArray<8, int> quant23_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int8_t tensor_data24[48*1*1*8] = { 
  /* [0][0][][] */ -117,-68,-31,-111,-93,54,-127,39, 
  /* [1][0][][] */ 40,48,8,127,-22,-55,-26,86, 
  /* [2][0][][] */ -104,-29,-28,-30,-25,-6,-127,-96, 
  /* [3][0][][] */ 90,73,-98,127,-14,-127,16,54, 
  /* [4][0][][] */ 13,4,-127,-24,40,48,2,-2, 
  /* [5][0][][] */ 93,127,30,-33,28,28,-39,16, 
  /* [6][0][][] */ 46,88,127,-119,-13,-74,-71,-4, 
  /* [7][0][][] */ 101,118,63,-66,127,-1,-66,45, 
  /* [8][0][][] */ 70,-103,28,-6,17,27,30,127, 
  /* [9][0][][] */ 31,127,-12,-45,-64,-107,-56,51, 
  /* [10][0][][] */ 110,37,-127,49,25,21,51,-32, 
  /* [11][0][][] */ 0,-27,-28,51,-60,-127,-48,86, 
  /* [12][0][][] */ -46,-54,-106,-2,5,53,-5,-127, 
  /* [13][0][][] */ -67,11,-11,42,-87,127,-3,45, 
  /* [14][0][][] */ 30,-33,-7,22,21,-2,63,127, 
  /* [15][0][][] */ -127,-81,-49,-19,84,-120,-47,49, 
  /* [16][0][][] */ 10,-125,61,48,-29,124,127,69, 
  /* [17][0][][] */ 101,127,108,29,60,46,-56,11, 
  /* [18][0][][] */ -10,69,-114,82,127,-28,59,35, 
  /* [19][0][][] */ -83,35,44,-88,8,127,109,-26, 
  /* [20][0][][] */ 9,-63,6,66,-31,-127,16,39, 
  /* [21][0][][] */ 82,28,29,-3,1,-13,-40,127, 
  /* [22][0][][] */ 65,22,127,-33,-106,87,-45,26, 
  /* [23][0][][] */ -66,8,-127,13,41,38,-20,-73, 
  /* [24][0][][] */ -80,61,-57,-77,127,46,110,-121, 
  /* [25][0][][] */ 90,127,90,-71,88,-96,88,-86, 
  /* [26][0][][] */ -42,-4,37,6,-127,45,-35,25, 
  /* [27][0][][] */ 57,19,3,-57,60,127,-45,43, 
  /* [28][0][][] */ 127,88,88,-37,-96,76,-122,76, 
  /* [29][0][][] */ -66,-127,37,13,58,-68,43,-10, 
  /* [30][0][][] */ 43,-127,35,63,-79,10,125,76, 
  /* [31][0][][] */ 55,-127,15,34,-91,-12,30,11, 
  /* [32][0][][] */ 100,-64,-8,127,107,-84,-38,0, 
  /* [33][0][][] */ -127,17,-13,-44,-14,47,-91,-45, 
  /* [34][0][][] */ 25,121,127,-12,9,-46,-49,5, 
  /* [35][0][][] */ 47,-68,-52,-45,-61,127,8,-70, 
  /* [36][0][][] */ -120,71,-75,-16,127,-4,-15,-88, 
  /* [37][0][][] */ -39,6,-37,5,30,-89,11,-127, 
  /* [38][0][][] */ -127,-88,-29,93,-30,-7,101,-71, 
  /* [39][0][][] */ 21,104,1,58,-53,42,71,127, 
  /* [40][0][][] */ -124,-53,-100,-126,127,40,-77,-117, 
  /* [41][0][][] */ 88,54,127,57,-43,6,46,42, 
  /* [42][0][][] */ -63,-38,13,-49,127,108,-54,-52, 
  /* [43][0][][] */ -51,-13,-1,1,-76,18,127,-40, 
  /* [44][0][][] */ 1,53,-35,127,-101,16,68,-61, 
  /* [45][0][][] */ 10,127,-56,-28,29,-118,-48,-26, 
  /* [46][0][][] */ -65,-53,-108,127,-70,-61,53,97, 
  /* [47][0][][] */ -37,-127,30,9,46,-101,-27,33, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0043919309973716736, 0.0048288307152688503, 0.0063609816133975983, 0.0047663282603025436, 0.012160592712461948, 0.0065037347376346588, 0.0063859270885586739, 0.0021483253221958876, 0.010635867714881897, 0.0037010733503848314, 0.0039393887855112553, 0.0039951205253601074, 0.0036195449065417051, 0.0028148300480097532, 0.0047090551815927029, 0.0022252837661653757, 0.0050886576063930988, 0.0027105810586363077, 0.013147488236427307, 0.0078048915602266788, 0.0073742796666920185, 0.00090312556130811572, 0.010231154039502144, 0.0094527481123805046, 0.0033444066066294909, 0.0023461896926164627, 0.010077942162752151, 0.0056992857716977596, 0.0039094295352697372, 0.0029369539115577936, 0.0075625875033438206, 0.0054365908727049828, 0.003448934992775321, 0.0073528620414435863, 0.0075415610335767269, 0.0018701702356338501, 0.0056353048421442509, 0.00041816005250439048, 0.00073454598896205425, 0.0025529768317937851, 0.0032035978510975838, 0.006546536460518837, 0.0044581019319593906, 0.010846822522580624, 0.012917677871882915, 0.011205816641449928, 0.0010558050125837326, 0.0078114219941198826, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int8_t tensor_data25[8*1*1*48] = { 
  /* [0][0][][] */ -37,-28,-1,-25,-24,70,25,6,65,-20,-45,26,-39,-13,-44,-71,4,-10,14,-37,-62,-32,-24,-54,-20,-27,-54,49,-6,-85,32,-28,53,20,13,-26,-36,-70,-42,-28,-30,29,-22,-17,33,-18,30,127, 
  /* [1][0][][] */ -110,18,55,79,62,-85,4,-55,63,-77,-19,87,-13,-12,3,18,113,39,-24,17,-14,65,-127,28,-28,25,-9,70,-50,-20,95,75,25,-5,81,1,0,-40,14,-63,31,12,60,64,23,60,21,15, 
  /* [2][0][][] */ 52,-18,-8,-11,-47,-42,-55,49,-59,-6,34,-63,-76,-23,-36,-43,-127,-51,13,-90,-47,-60,-23,-25,-119,-65,33,-56,76,-22,-106,-46,16,-26,62,-36,-72,-64,79,3,45,28,-60,45,10,-80,52,3, 
  /* [3][0][][] */ -28,1,-18,34,-33,33,32,-49,60,-59,-41,44,-17,-37,-41,127,5,9,20,51,-3,40,72,61,-57,7,-4,12,0,-26,21,7,57,3,-57,13,-28,36,34,81,6,-57,-54,-3,-21,97,57,27, 
  /* [4][0][][] */ 13,100,13,-106,-22,33,-25,-33,17,108,-12,-98,35,3,56,4,58,32,4,99,-2,17,89,52,121,99,-41,20,7,7,-127,75,1,41,-3,-23,125,4,12,-17,49,21,46,-120,-45,-62,-37,-76, 
  /* [5][0][][] */ 60,13,-49,-19,-58,-37,39,45,-95,-10,-8,-90,7,-2,22,-75,-99,39,12,-61,-60,-76,-19,-1,-34,-14,-79,-64,42,127,-6,-79,-28,67,-44,-12,14,-5,-18,-87,-61,65,-46,-46,31,-56,17,-21, 
  /* [6][0][][] */ 13,-79,-6,83,-33,-41,-11,52,5,-46,-13,82,18,8,-79,-30,3,55,10,-30,-70,-20,-88,20,-66,-44,53,-62,-86,-24,11,44,-3,78,-48,8,-108,-59,-43,32,-53,32,-21,40,67,-9,43,127, 
  /* [7][0][][] */ 29,8,39,-33,30,34,62,-43,-32,53,-18,-70,-17,68,36,-39,-46,-78,-17,-28,46,11,69,33,22,23,-17,16,73,-48,-15,6,-26,-47,92,-84,16,-21,-63,6,35,2,37,-100,-42,-69,-43,-127, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant25_scale = { 8, { 0.002934666583314538, 0.0022474962752312422, 0.0019494403386488557, 0.002427401952445507, 0.0018314690096303821, 0.0025668703019618988, 0.0013806063216179609, 0.0052573704160749912, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ 28,-75,-10,86,-104,28,61,-127, 
  /* [1][0][][] */ 82,-69,-63,-119,-74,127,-45,82, 
  /* [2][0][][] */ -15,-33,-127,-73,47,53,-55,-21, 
  /* [3][0][][] */ -6,-96,28,-24,21,83,10,-127, 
  /* [4][0][][] */ -127,-51,46,71,-91,120,-4,41, 
  /* [5][0][][] */ -127,-55,-40,55,3,-26,-22,-60, 
  /* [6][0][][] */ -1,82,-61,127,-83,-78,126,-108, 
  /* [7][0][][] */ 42,67,54,-127,27,81,22,43, 
  /* [8][0][][] */ -6,25,-4,-116,60,15,-127,-7, 
  /* [9][0][][] */ 127,43,-28,-59,60,9,8,63, 
  /* [10][0][][] */ 87,51,9,52,-60,-127,63,-91, 
  /* [11][0][][] */ 64,-88,54,97,-127,-21,61,-89, 
  /* [12][0][][] */ -80,51,-71,-127,2,13,42,-33, 
  /* [13][0][][] */ 108,-30,-31,98,55,-12,-127,91, 
  /* [14][0][][] */ 51,111,-7,46,-127,-29,83,-91, 
  /* [15][0][][] */ -74,119,-37,-127,84,-20,-90,31, 
  /* [16][0][][] */ 66,57,-84,-127,-15,87,-31,-52, 
  /* [17][0][][] */ -30,-125,-78,127,70,-87,-58,101, 
  /* [18][0][][] */ 44,28,-14,-127,45,93,-120,76, 
  /* [19][0][][] */ 85,105,-58,-110,22,127,-39,56, 
  /* [20][0][][] */ -78,127,-10,-52,80,-52,-87,-8, 
  /* [21][0][][] */ 81,34,-8,27,-107,-72,127,-120, 
  /* [22][0][][] */ -127,-98,-51,1,34,33,33,-70, 
  /* [23][0][][] */ -28,-19,0,-127,71,66,-123,67, 
  /* [24][0][][] */ 46,-52,127,20,1,10,5,92, 
  /* [25][0][][] */ -127,-4,33,-42,126,-23,49,-109, 
  /* [26][0][][] */ -120,-62,-94,-26,102,-68,52,-127, 
  /* [27][0][][] */ -2,35,37,-69,-31,127,63,-33, 
  /* [28][0][][] */ 119,26,-61,-108,-40,-65,86,-127, 
  /* [29][0][][] */ 118,103,109,-80,-127,-43,-58,69, 
  /* [30][0][][] */ 32,-18,85,82,127,-87,8,67, 
  /* [31][0][][] */ 27,-10,63,74,-127,66,103,102, 
  /* [32][0][][] */ 95,101,66,-53,-67,55,30,127, 
  /* [33][0][][] */ -16,127,-94,27,58,-6,-111,46, 
  /* [34][0][][] */ 127,-78,-4,44,-77,-57,84,-99, 
  /* [35][0][][] */ -82,-16,-48,-26,127,47,-60,29, 
  /* [36][0][][] */ 42,64,-4,53,-82,31,127,-90, 
  /* [37][0][][] */ -127,-69,17,35,14,-93,17,-73, 
  /* [38][0][][] */ 46,127,104,-23,-24,-6,-40,90, 
  /* [39][0][][] */ 45,86,-57,-38,70,127,99,-126, 
  /* [40][0][][] */ -104,97,-111,-48,42,-105,-127,83, 
  /* [41][0][][] */ -64,-19,-98,18,127,51,-23,-49, 
  /* [42][0][][] */ 38,61,127,27,-78,-31,-41,21, 
  /* [43][0][][] */ -101,-3,-48,78,13,60,23,-127, 
  /* [44][0][][] */ 62,-6,-8,39,-127,-115,33,-59, 
  /* [45][0][][] */ -41,-82,127,24,62,-83,-109,-57, 
  /* [46][0][][] */ -47,54,-127,-59,-31,51,47,-87, 
  /* [47][0][][] */ 6,9,-127,-27,39,30,-14,15, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.00081744859926402569, 0.0028912601992487907, 0.0038261392619460821, 0.0053360736928880215, 0.001867345068603754, 0.0032129038590937853, 0.0027962732128798962, 0.0058360421098768711, 0.0039755543693900108, 0.0041504157707095146, 0.0027682613581418991, 0.0020752155687659979, 0.0054740034975111485, 0.0017535717925056815, 0.0029682738240808249, 0.0051636523567140102, 0.001527980319224298, 0.00040377010009251535, 0.0023383761290460825, 9.7997435659635812e-05, 0.0038436276372522116, 0.002419003751128912, 0.0026344284415245056, 0.0025707127060741186, 0.0057200663723051548, 0.004443297628313303, 0.0018541015451774001, 0.0047427765093743801, 0.00063949066679924726, 0.003945604432374239, 0.0015983500052243471, 0.0033455779775977135, 0.0024452765937894583, 0.0015654105227440596, 0.0014549832558259368, 0.0014507704181596637, 0.003960832953453064, 0.00086230732267722487, 0.0016638515517115593, 0.0024314762558788061, 0.0069066197611391544, 0.0027265113312751055, 0.0012751872418448329, 0.003292780602350831, 0.0024492687080055475, 0.0054514473304152489, 0.00078357377788051963, 0.0067893522791564465, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 21,-39,-113,-16,-85,0,-27,-71,9,73,-64,6,-114,7,-58,-127,80,-49,84,-47,-33,-45,-52,-48,-54,63,-114,-30,-36,40,-57,-26,-63,-17,-12,-74,-15,-55,51,-71,83,-15,-19,19,-14,57,13,-46, 
  /* [1][0][][] */ -55,-1,-46,46,31,11,-75,-35,22,13,-66,33,-94,3,127,-25,13,30,29,-3,19,-49,-29,64,-78,-44,-4,-25,19,-61,-33,-90,-65,29,103,-41,58,53,-28,85,-49,-29,38,47,87,22,-14,-14, 
  /* [2][0][][] */ 18,-46,91,-42,-28,-55,59,-18,-12,-2,66,2,38,78,-121,18,-26,-36,34,-36,-39,69,44,27,82,-32,19,32,-14,51,57,31,-2,53,-127,13,3,5,-10,-56,-10,-7,-19,-8,-123,-9,33,44, 
  /* [3][0][][] */ -11,-26,-111,4,45,36,21,27,26,21,-82,69,-75,10,5,-34,46,-14,-13,23,-59,-68,-79,-13,27,68,-84,-4,-31,-74,-21,39,77,-63,127,55,16,-14,32,61,56,-68,3,-20,-54,49,-9,-53, 
  /* [4][0][][] */ 22,58,78,70,17,93,-58,65,15,62,30,-44,-69,-10,95,50,69,53,86,45,20,-38,48,-26,23,86,-70,65,-82,91,-19,-1,17,-26,65,15,107,-47,3,-57,-64,-127,54,-41,20,4,86,-13, 
  /* [5][0][][] */ 28,-52,39,-83,-8,-93,74,-41,-6,-16,127,44,43,-56,-106,22,-34,-45,36,-50,-12,-38,12,-36,-69,14,-18,-68,-30,38,-22,-5,-5,-36,-54,31,-85,-71,-73,-3,0,62,-23,-78,-38,74,-55,-28, 
  /* [6][0][][] */ 28,-48,-96,-43,-40,-87,13,-93,-9,-80,-49,39,-78,-40,-42,-51,59,-55,-127,-69,-68,-24,-25,-37,-80,-57,-36,-58,-38,54,-45,-48,-12,-47,34,-105,5,-60,-67,-24,25,53,-56,-22,-24,38,-82,-100, 
  /* [7][0][][] */ -22,91,72,-35,-77,24,84,127,-115,92,-9,-74,97,-44,-14,21,32,29,21,52,-35,-1,-5,55,121,-43,-30,34,89,-39,-101,106,109,-5,-113,17,-81,15,-3,-104,-18,-46,-19,19,37,-16,-11,51, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0018188406247645617, 0.0046949670650064945, 0.0049511296674609184, 0.0033800208475440741, 0.0011467200238257647, 0.0040713204070925713, 0.0015829348703846335, 0.0012436287943273783, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int8_t tensor_data28[48*1*1*8] = { 
  /* [0][0][][] */ 85,-49,111,-104,-65,31,-23,127, 
  /* [1][0][][] */ -113,-127,-79,91,-125,-23,42,-106, 
  /* [2][0][][] */ -68,-111,5,27,-53,127,-66,-39, 
  /* [3][0][][] */ 54,-127,-39,121,40,-90,-43,46, 
  /* [4][0][][] */ 52,-18,-127,90,-39,-30,19,-50, 
  /* [5][0][][] */ -9,40,-72,-25,33,48,127,-123, 
  /* [6][0][][] */ -23,-49,-34,-127,103,6,-83,88, 
  /* [7][0][][] */ 3,47,-127,54,99,84,1,-66, 
  /* [8][0][][] */ -50,-64,118,127,-86,106,-11,84, 
  /* [9][0][][] */ -62,-127,98,-93,58,58,-46,47, 
  /* [10][0][][] */ -99,-127,-73,126,101,-33,-83,127, 
  /* [11][0][][] */ 34,-20,76,-67,-70,127,25,-18, 
  /* [12][0][][] */ -18,-62,127,52,-80,41,78,67, 
  /* [13][0][][] */ 52,-76,39,47,-119,-27,127,-46, 
  /* [14][0][][] */ -40,-127,76,99,22,-60,-95,83, 
  /* [15][0][][] */ 44,-115,127,-68,-10,14,30,46, 
  /* [16][0][][] */ 104,127,-5,-43,-34,-82,53,-73, 
  /* [17][0][][] */ 57,91,-127,89,120,105,28,-34, 
  /* [18][0][][] */ -54,65,113,-127,-64,80,5,-56, 
  /* [19][0][][] */ 72,127,22,23,-32,-11,20,-17, 
  /* [20][0][][] */ 91,56,127,-43,-27,24,59,46, 
  /* [21][0][][] */ -37,-71,15,-43,-24,127,-42,4, 
  /* [22][0][][] */ 127,104,62,-40,77,-83,35,53, 
  /* [23][0][][] */ -20,41,-90,127,-27,-50,122,-121, 
  /* [24][0][][] */ -92,-127,-111,-38,-36,-43,-125,-118, 
  /* [25][0][][] */ 15,32,127,-115,11,-93,-74,115, 
  /* [26][0][][] */ 25,-6,-55,-59,-127,11,73,-60, 
  /* [27][0][][] */ -112,-127,-53,59,72,66,-27,33, 
  /* [28][0][][] */ -40,39,-127,16,-15,-17,85,-104, 
  /* [29][0][][] */ 126,127,-3,42,-76,24,36,-55, 
  /* [30][0][][] */ 89,127,-109,57,-120,-65,41,-10, 
  /* [31][0][][] */ 45,-11,22,16,-23,61,-44,127, 
  /* [32][0][][] */ 28,114,-121,-39,127,-85,-118,-105, 
  /* [33][0][][] */ -45,-127,70,56,-95,73,41,41, 
  /* [34][0][][] */ 32,-127,61,-116,73,80,-68,109, 
  /* [35][0][][] */ 122,-41,85,-21,55,-14,-64,127, 
  /* [36][0][][] */ -104,-127,-96,40,-11,-87,-98,-20, 
  /* [37][0][][] */ -122,-81,-98,-39,127,-45,-72,81, 
  /* [38][0][][] */ -21,-35,103,-127,14,87,48,-49, 
  /* [39][0][][] */ -127,-118,126,79,87,87,123,75, 
  /* [40][0][][] */ -41,-105,-127,-80,71,-83,-94,44, 
  /* [41][0][][] */ 78,-103,15,39,51,2,-27,127, 
  /* [42][0][][] */ -63,-106,56,-31,-44,127,-23,-45, 
  /* [43][0][][] */ -41,-82,75,-9,-42,127,-3,72, 
  /* [44][0][][] */ 127,-92,24,-46,-70,-5,55,26, 
  /* [45][0][][] */ 30,101,53,36,-127,15,17,-46, 
  /* [46][0][][] */ 23,83,127,24,-89,-13,66,-62, 
  /* [47][0][][] */ -13,127,-96,18,-35,-7,35,-30, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00065493216970935464, 9.8791446362156421e-05, 0.001013653352856636, 0.00078237248817458749, 0.0005425427807494998, 5.6041666539385915e-05, 0.00059566221898421645, 1.6670297554810531e-05, 0.00036048964830115438, 0.00053421052871271968, 0.00035187639878131449, 0.00094974297098815441, 0.0021491539664566517, 0.0010003817733377218, 0.00029377365717664361, 0.0017246786737814546, 0.00016792655515018851, 0.00010143956751562655, 0.00081530626630410552, 0.0010523047531023622, 0.00012522950419224799, 0.0010244617005810142, 0.00026124727446585894, 0.00028920400654897094, 2.1945121261524037e-05, 0.00022235064534470439, 0.00031548523111268878, 0.0004072913434356451, 0.00053910579299554229, 0.00084792874986305833, 0.00058315583737567067, 0.0014172479277476668, 4.6070719690760598e-05, 0.00086011312669143081, 0.00020473547920119017, 0.0011310672853142023, 0.00011240217281738296, 0.00031262473203241825, 0.0019263096619397402, 0.00033703207736834884, 0.00066105969017371535, 0.00060960918199270964, 0.0010472765425220132, 0.00016624039562884718, 0.00040222625830210745, 0.0013207101728767157, 0.00022558355703949928, 0.001187158515676856, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int8_t tensor_data29[32*1*1*48] = { 
  /* [0][0][][] */ -81,-67,-77,-115,-107,-84,-89,-64,-93,-100,-127,-118,-123,-49,-106,-66,-74,-57,-81,-87,-101,-121,-100,-79,-55,-123,-87,-51,-68,-115,-64,-87,-114,118,-78,-109,79,-84,-119,82,-122,-103,-51,-112,-65,-93,-116,-52, 
  /* [1][0][][] */ -36,-71,-47,-43,-72,-97,-55,-70,-52,-28,-85,-38,-127,-102,-43,-85,-73,-114,-64,-102,-77,-36,-79,-97,-46,-55,-103,-78,-49,-65,-88,-76,-80,-102,-83,-80,-53,-85,-84,-44,-61,-27,-64,-51,-67,-71,-106,-71, 
  /* [2][0][][] */ -87,-110,-116,-127,-102,-84,-64,-87,88,-104,-108,-105,-70,-62,-111,-126,-120,-76,-103,-77,-118,-105,-78,-79,-115,-65,-102,-98,-96,-99,-116,-77,-71,-111,-71,-87,-114,-81,-113,-65,-68,-99,-50,-62,47,-94,-71,-79, 
  /* [3][0][][] */ -113,-54,-66,-115,-51,-51,-60,-61,-51,-79,-72,-107,-51,-71,-50,-48,-127,-61,-105,-52,-110,-60,-113,-85,-50,-60,-121,-80,-68,-74,-101,-49,-121,-76,-77,-118,-118,-100,-114,-106,-116,-100,-108,-78,-111,-121,-96,-97, 
  /* [4][0][][] */ -127,-39,-44,-70,-37,-52,-100,-106,-44,-45,-113,-104,-100,-20,-57,-116,-44,-78,-99,-106,-125,-31,-113,-89,-81,-120,-39,-42,-77,-127,-37,-50,-121,-42,-89,-112,-29,-99,-118,-83,-21,-43,-116,-118,-85,-37,-95,-105, 
  /* [5][0][][] */ -96,-15,-68,-54,-22,-64,-81,-79,-45,-81,-8,-54,-127,-42,1,-34,-86,-67,-42,-104,-51,-53,-42,-13,-95,-33,-79,-65,-54,-46,-39,-51,-74,-25,-24,-49,11,-80,-89,-36,-17,-46,-68,-65,-27,-19,-48,-63, 
  /* [6][0][][] */ 78,-20,36,-10,-49,-37,32,-39,14,62,-7,75,107,-13,-10,127,-10,-7,43,22,-37,78,8,-10,-9,24,10,-17,-25,-32,-9,51,-7,37,24,80,-51,-29,100,35,-42,27,75,15,-38,11,-63,-22, 
  /* [7][0][][] */ -61,-73,-104,-125,-52,-93,-97,-75,-78,-113,-90,-97,74,-50,-54,-67,-61,88,53,-68,-73,-119,-91,-106,-52,-111,-68,-52,-118,-97,-91,-82,-127,-101,-65,-99,-49,-88,-87,-120,-123,-75,-107,-60,-83,-108,-117,-105, 
  /* [8][0][][] */ -111,-107,-127,80,-53,-81,48,-127,-59,-63,-48,40,-101,47,-112,-75,-76,-64,-58,-116,-57,-9,112,-109,-111,-71,-80,-125,-113,40,-125,77,-73,88,-118,-49,48,-107,-105,-24,-93,-83,-68,-97,-95,-20,-100,-57, 
  /* [9][0][][] */ -100,-100,-81,-64,-79,-69,-60,-77,-84,-73,-66,-69,-53,-70,-99,-97,-92,-109,-111,-115,-118,-61,-81,-96,-115,-109,-103,-71,-67,-127,-99,-72,-119,-110,-51,-98,-98,-89,-112,-110,-54,-58,-88,-86,-75,-69,-79,-96, 
  /* [10][0][][] */ -118,-73,-113,-119,-102,-58,-127,-120,-61,-121,-59,-65,-90,-77,-64,-89,-51,-83,-114,-75,-90,-107,-101,-60,-76,-52,-98,-96,-123,-113,-92,-123,-67,-76,-52,-125,-49,-114,-73,-50,-59,-78,-77,-68,-92,-78,-88,-89, 
  /* [11][0][][] */ -64,-78,-81,-79,-40,-71,-73,-127,-86,-41,-46,-63,-95,-121,-34,-111,-88,-79,-74,-115,-113,-72,-28,-81,-122,-31,-76,-60,-68,-54,-102,-47,-33,-38,-123,-81,-46,-21,-81,-69,-38,-87,-29,-89,-73,-61,-89,-108, 
  /* [12][0][][] */ -22,76,-18,-15,31,-13,3,-1,-89,-56,-103,-45,6,-25,-70,-53,-54,4,36,95,58,-85,9,14,127,42,6,-84,54,54,116,-52,-60,-52,-65,-42,-93,-37,-7,-51,-41,23,-26,-76,62,62,-97,111, 
  /* [13][0][][] */ -70,-73,-61,-112,-54,-80,-76,-110,-82,-127,-76,-78,-92,-59,-76,-64,-62,-71,-89,-59,-50,-94,-92,-115,-58,-116,-89,-115,-78,-124,-107,-93,-95,-126,-79,-90,-65,-126,-63,-74,-94,-112,-64,-58,-70,-93,-66,-66, 
  /* [14][0][][] */ 10,-9,77,55,14,-22,37,-3,31,52,17,-16,109,47,19,127,-18,-23,-29,-63,24,50,-38,-10,-30,-32,22,56,1,-66,-5,27,-5,75,37,27,19,35,71,3,50,70,97,24,33,-55,12,-25, 
  /* [15][0][][] */ -97,-88,-37,-123,-62,-15,-91,-78,-75,-114,9,-115,-85,-119,-50,-115,-42,-64,-121,-94,-100,-73,-24,-99,-104,-107,-68,-73,-56,-59,-123,-86,-22,-17,-30,-111,-29,22,-49,-55,-122,12,-72,-106,-77,-7,-127,-122, 
  /* [16][0][][] */ -90,-79,-121,-48,-58,-109,-54,-51,-100,-73,-59,-110,-105,-58,-127,-97,-76,-60,-106,-97,-126,-95,-122,-82,-51,-109,-113,-79,-104,-55,-50,-76,-115,-103,-81,-83,-92,-57,-126,-66,-72,-76,-61,-106,-119,-92,-121,-107, 
  /* [17][0][][] */ -62,-66,-74,-105,-54,-48,-78,-73,-18,-105,14,-100,-117,-21,-35,-114,-34,-83,-74,-75,-98,-64,-37,-63,-81,-56,-74,-89,-67,-29,-75,-99,-21,-68,-45,-46,-16,-69,-65,-10,-77,8,-105,-79,-17,-38,-76,-127, 
  /* [18][0][][] */ -56,-120,-123,-82,-51,-71,-125,-123,-82,-72,-88,-119,-84,-28,-68,-71,-67,-58,-127,-98,-118,-57,-58,-73,-57,-92,-67,-112,-101,-121,-81,-114,-89,-38,-10,-112,-56,-99,-105,-86,-121,-56,-44,-97,-91,-62,-39,-111, 
  /* [19][0][][] */ -39,-25,-59,1,41,-25,-73,-63,2,-58,-12,-65,-32,-5,9,-72,-18,-127,-63,-28,-69,-64,6,7,-22,-41,-27,-47,29,2,20,-74,-8,-39,-58,-37,-43,-52,-70,-1,-22,-22,-38,-19,-43,7,-79,-7, 
  /* [20][0][][] */ -5,42,-39,-44,-75,68,116,78,-76,-68,-49,-65,38,-84,-33,-84,-60,53,-9,12,63,-93,-41,-62,-91,-22,-55,127,-113,-107,-54,-64,-54,-30,-42,27,-23,67,-77,-59,59,-59,20,-71,54,-74,87,-36, 
  /* [21][0][][] */ -61,-50,-50,-114,-97,-102,-115,-101,-95,-51,-78,-116,-104,-111,-118,-119,-96,-93,-112,-121,-98,-67,-49,-104,-54,-76,-60,-92,-106,-121,-52,-85,-118,-77,-53,-51,-123,-113,-123,-78,-85,-69,-100,-82,-111,-54,-127,-63, 
  /* [22][0][][] */ -105,-80,-32,-82,-91,-96,-63,-4,-7,-109,-77,-75,-73,-49,-94,-127,-115,-35,-115,-24,-22,-24,-80,-31,-124,-82,-105,-44,-82,-102,-97,-103,-96,-10,-79,-73,-52,-125,-95,-92,-86,-65,-104,-68,19,-92,22,-94, 
  /* [23][0][][] */ -99,-100,-43,-92,-78,-98,-85,-77,-42,-80,-31,-113,-122,-76,-34,-112,-43,-63,-72,-85,-67,-26,7,-99,-86,-115,-120,-118,-72,-26,-87,-65,-26,-105,-55,-102,-23,-66,-75,-52,-43,-74,-56,-126,-127,-39,-100,-73, 
  /* [24][0][][] */ -78,-49,-8,-15,-14,-93,-114,-96,-58,-97,-62,-42,-127,-68,-50,-98,-43,-127,-106,-102,-74,-72,-29,-55,-90,-39,-106,-92,-14,-20,-40,-73,2,-81,-60,-89,-13,-91,-111,-54,-76,-30,-106,-32,-95,-30,-67,-102, 
  /* [25][0][][] */ 15,-6,-5,66,-46,7,-14,-4,21,22,51,-32,-43,28,84,-28,-30,-39,-82,-38,2,33,-30,10,11,-87,-96,15,-20,-13,-127,35,-45,-55,30,80,-72,34,-51,76,-78,108,25,-28,0,-67,-65,-112, 
  /* [26][0][][] */ -41,-107,-86,-84,-47,-97,-36,101,-67,-88,-110,-81,79,-104,-58,-85,-49,127,-105,-71,118,-99,-60,-21,-84,-90,-55,-48,-68,-84,-49,-95,-91,-63,-65,-30,-80,-28,-118,-49,-23,-54,-93,-110,-52,-66,7,-50, 
  /* [27][0][][] */ -68,-74,-126,-49,-98,-98,-86,-89,-118,-57,-98,-91,-126,-63,-61,-104,-74,-126,-91,-125,-96,-69,-59,-118,-127,-64,-102,-70,-57,-108,-66,-127,-51,-117,-76,-52,-51,-68,-113,-102,-76,-70,-96,-67,-65,-118,-52,-111, 
  /* [28][0][][] */ -123,-64,-49,-63,-42,-68,-113,-76,-67,-96,-75,-73,-60,-119,-91,-127,-70,-51,-89,-51,-50,-21,3,-109,-76,-102,-75,-54,-95,-74,-84,-85,-51,-81,-109,-98,-3,-54,-110,30,-98,-81,-96,-80,-60,-2,-79,-92, 
  /* [29][0][][] */ -73,-83,30,-75,-96,-75,-70,-109,-63,67,-92,-109,-57,-83,53,-84,81,-49,-105,-48,-68,-127,46,-103,-52,-95,-106,-90,-61,46,-95,-71,37,-51,-45,-80,66,-103,-72,61,-44,-92,-99,-68,-101,71,-110,-76, 
  /* [30][0][][] */ -104,-113,-102,-74,-45,-43,-40,-120,-84,-61,-39,-46,-48,-36,-100,-121,-30,-86,-43,-66,-127,-90,5,-111,-49,-38,-74,-63,-38,-68,-73,-49,-61,-86,-37,-65,-92,-72,-39,-44,-84,-91,-103,-103,-50,-1,-95,-102, 
  /* [31][0][][] */ -6,-32,-43,-69,-74,-34,6,103,-78,-65,-43,-68,67,-79,-28,-51,-60,127,-58,47,122,-70,-35,-40,-32,-27,-45,-55,-61,-38,-8,-45,-42,-52,-35,16,-47,2,-44,-79,-28,-8,-82,-47,-34,-36,0,-32, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant29_scale = { 32, { 0.006808131467550993, 0.0077580930665135384, 0.0067696846090257168, 0.0068560563959181309, 0.0055991164408624172, 0.0074503608047962189, 0.010402168147265911, 0.006835761945694685, 0.0064855958335101604, 0.0067280381917953491, 0.0068379361182451248, 0.0075342748314142227, 0.0089242951944470406, 0.0068052783608436584, 0.0073557472787797451, 0.0081059122458100319, 0.0068192142061889172, 0.0071916156448423862, 0.0062994067557156086, 0.007664466742426157, 0.009204033762216568, 0.006844803225249052, 0.0059411115944385529, 0.0083731310442090034, 0.006335629615932703, 0.0054890108294785023, 0.0072196000255644321, 0.0068366150371730328, 0.0085359551012516022, 0.0078457118943333626, 0.0063182990998029709, 0.0098451096564531326, } };
const TfArray<32, int> quant29_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[2*1*1*32] = { 
  /* [0][0][][] */ 53,-47,50,49,-3,1,127,76,93,34,31,-56,-123,63,90,61,31,-12,-15,-34,114,57,-14,43,-7,14,77,26,37,37,-17,80, 
  /* [1][0][][] */ -28,-8,29,33,-49,-19,-84,41,-35,25,28,-22,127,60,-51,-36,29,-34,-15,-9,-18,59,-54,35,-16,-49,25,29,53,89,-15,15, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant30_scale = { 2, { 0.008005509153008461, 0.010102882049977779, } };
const TfArray<2, int> quant30_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[1*3*3*8] = { 
  /* [0][0][][] */ -64,96,12,-122,-105,-12,127,-127, -127,36,82,-94,-66,104,-56,-78, -68,101,127,-78,-81,-93,30,-111, 
  /* [0][1][][] */ 44,-55,106,-127,-95,-97,-40,-104, -8,-59,79,-99,-44,-127,-51,-100, -24,-4,115,-113,-127,-35,-28,-107, 
  /* [0][2][][] */ 39,33,64,-110,-80,-93,57,-83, 33,93,90,-73,-118,-98,-13,-87, -46,127,91,-117,20,-102,47,-112, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.0038245117757469416, 0.0079064285382628441, 0.0042263572104275227, 0.0003745619032997638, 0.0023725191131234169, 0.0012655863538384438, 0.026164386421442032, 0.0025141679216176271, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 3 };
const ALIGN(8) int32_t tensor_data32[8] = { -1601, -12183, -6708, 1652, -6683, -7171, -1908, -5928, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 6.0691163525916636e-05, 9.0330482635181397e-05, 0.00015221805369947106, 0.00011275353608652949, 9.6026764367707074e-05, 0.00010431029659230262, 6.5897998865693808e-05, 7.7153374149929732e-05, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int8_t tensor_data33[1*3*3*48] = { 
  /* [0][0][][] */ 50,-10,46,62,110,-127,-79,6,127,-7,69,127,-49,-101,107,-127,-18,-35,30,65,114,65,-98,127,-102,127,127,47,-85,0,95,64,-47,54,43,127,-92,52,-18,83,52,-122,-116,103,28,-104,85,36, -4,69,42,68,127,-81,-127,20,62,29,61,-37,73,-73,-120,-107,30,38,-54,49,71,40,-125,91,-98,106,-47,4,-57,-17,95,89,86,-89,116,1,-73,51,119,-45,78,-95,-105,86,-58,-127,57,-61, 11,-22,39,66,112,-81,-125,-32,96,-12,-38,-39,-13,-106,-108,-65,3,-26,127,99,29,77,9,4,-127,45,-82,66,-61,52,78,123,125,-107,-29,52,78,38,-81,-56,72,-98,-115,41,-127,-108,0,-42, 
  /* [0][1][][] */ 15,-71,-127,103,8,39,-52,108,-4,-32,32,-23,-93,54,-35,-70,127,16,96,11,35,-35,-108,106,112,45,-26,97,-72,-37,54,107,-16,127,91,107,119,-54,-75,-79,-93,-127,127,90,28,-23,-29,127, -127,-14,17,102,54,-87,54,90,-48,-25,29,-42,-5,127,9,-53,103,-36,125,62,-32,-40,-91,16,-115,94,63,101,-60,-127,-127,118,89,34,127,55,127,127,95,-127,-29,-109,-18,127,18,-69,-47,4, -105,-127,13,127,42,-55,-26,-108,-67,45,-73,-36,8,-74,-73,71,-5,98,91,69,-94,-75,66,41,-98,4,15,20,-56,11,62,127,-5,-26,-33,82,99,119,-64,-13,-127,-110,-36,123,14,-100,-106,51, 
  /* [0][2][][] */ 81,86,-76,64,90,41,-94,-81,-23,-71,104,-14,-127,58,-67,50,93,71,-9,108,127,90,-127,126,-107,-10,-58,-33,127,49,70,87,6,102,79,84,-68,107,-127,-67,-51,-110,-54,102,62,-57,13,2, 72,68,-58,51,84,-87,-66,-95,68,-127,9,-63,-62,-43,-127,108,96,7,-38,127,32,60,-89,50,-104,91,-54,90,121,49,-115,84,90,78,36,11,-92,83,104,-67,-106,-110,-11,118,65,-23,-25,-82, 62,-95,37,88,104,-90,-107,-127,65,-3,127,-22,-41,-98,-46,-27,-45,127,-82,-21,71,127,-117,95,-86,38,126,127,-57,100,91,89,-127,-99,-65,34,36,116,-28,-54,-103,-87,-107,101,87,3,-127,41, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.0069145378656685352, 0.011152155697345734, 0.015751346945762634, 0.0031951125711202621, 0.0036606516223400831, 0.0012579355388879776, 0.011868360452353954, 0.0052496935240924358, 0.0020650913938879967, 0.019621759653091431, 0.0084676360711455345, 0.009395998902618885, 0.0040727816522121429, 0.0060433587059378624, 0.0041371593251824379, 0.0088072912767529488, 0.0056314906105399132, 0.0041447533294558525, 0.004200429655611515, 0.00010289416240993887, 0.0041138310916721821, 0.0024854822549968958, 0.0037934014108031988, 0.0025176096241921186, 0.00033478133263997734, 0.0038839059416204691, 0.015469196252524853, 0.0068315509706735611, 0.0085089541971683502, 0.0077993427403271198, 0.00038482240051962435, 0.0019573918543756008, 0.0041186641901731491, 0.00020808674162253737, 0.059561222791671753, 0.0021142382174730301, 0.0018573798006400466, 0.0020428427960723639, 0.0074400939047336578, 0.0043193427845835686, 0.0014092469355091453, 0.00046820330317132175, 0.00064969621598720551, 0.001719415420666337, 0.031070979312062263, 0.0009833313524723053, 0.0083055123686790466, 0.012882021255791187, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 3 };
const ALIGN(8) int32_t tensor_data34[8] = { 3275, 8820, -10527, -9662, -6539, -22638, -9932, 20399, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 7.7841068559791893e-05, 8.7027605331968516e-05, 6.7472319642547518e-05, 0.00012473677634261549, 7.7606411650776863e-05, 4.7036260184540879e-06, 6.2070197600405663e-05, 3.0147386496537365e-05, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 17,-102,-93,115,-108,127,10,68,12,-15,-97,48,36,34,-113,52,-22,0,36,-31,-37,126,26,-43,26,-127,123,18,-60,31,-1,-72,124,-41,29,-32,-39,92,-43,7,-80,67,45,84,0,-49,-62,102, 39,53,-127,124,-127,38,-96,-127,-28,-45,-81,83,101,127,31,-55,106,24,22,-72,-58,42,23,89,55,4,-90,-32,-93,-96,-62,-127,16,-109,-36,49,-65,38,12,-47,-97,-83,-110,50,-112,27,-47,-62, 27,46,-118,127,-113,-60,-59,17,20,32,-29,43,120,43,-40,-44,127,-56,65,-53,-40,-86,30,110,66,-99,-74,-127,51,-10,58,25,61,-71,-53,-62,-127,-110,-86,-45,-96,-109,-100,111,-56,127,-74,5, 
  /* [0][1][][] */ 117,-27,-101,-87,-109,-37,-3,-48,29,9,78,38,16,-2,-77,-20,-112,2,-127,127,-127,48,53,124,-62,-83,67,-49,49,29,-117,110,106,-93,-53,-76,-12,-127,127,-45,-56,-99,44,123,-74,-53,-76,-23, 26,-127,-107,-101,68,-37,-70,-46,127,126,-102,23,127,-25,127,-51,-118,83,-79,72,-69,-25,61,-82,-127,25,-16,15,-82,33,-53,121,108,-92,16,49,-27,78,7,-50,-127,-99,-127,-97,-67,59,0,-96, 121,-105,-119,93,-25,-57,-56,-17,39,-127,-72,71,43,-38,-25,-43,-66,103,-67,27,-38,-82,-5,127,-18,53,-118,-46,-127,30,-75,105,126,-97,2,14,5,-118,25,-127,54,-120,-122,-83,-33,-21,-75,61, 
  /* [0][2][][] */ -11,-67,88,-101,-87,120,52,-107,40,13,44,-127,-60,-78,-116,127,-70,91,-66,-41,52,6,20,84,6,-42,125,106,-107,-22,127,-35,127,-93,-3,-8,-25,79,58,-104,55,-124,30,-127,-123,-63,50,-127, 84,-76,-102,-36,-101,30,-102,-104,44,-40,-78,-56,71,-71,-79,-4,-73,82,-79,-25,-54,127,127,20,-104,84,127,19,60,60,51,-19,107,-96,-127,80,78,90,-7,-117,-26,-127,39,-42,-127,-48,53,89, 127,71,-99,-102,-95,-72,-127,-86,57,113,-127,84,-125,-117,116,13,-33,127,-80,18,22,75,9,-90,-64,-55,-90,42,-14,127,25,61,113,-127,-31,127,31,34,-26,-111,18,-97,-116,24,25,-67,127,60, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0092182168737053871, 0.00072133645880967379, 0.0015113158151507378, 0.087093427777290344, 0.0016325131291523576, 0.0033397162333130836, 0.0019090707646682858, 0.0010492326691746712, 0.003731974633410573, 0.016038864850997925, 0.0052988636307418346, 0.023846991360187531, 0.0048614186234772205, 0.0058005442842841148, 0.00095436477568000555, 0.0096874739974737167, 0.0010017422027885914, 0.014839086681604385, 0.0024871756322681904, 0.04027600958943367, 0.0061858231201767921, 0.004105735570192337, 0.0071556163020431995, 0.00090040388749912381, 0.0053056413307785988, 0.11393113434314728, 0.0022772462107241154, 0.010122116655111313, 0.0056012393906712532, 0.0086545404046773911, 0.0069550191983580589, 0.0052022887393832207, 0.0014105774462223053, 0.00046060007298365235, 0.011409031227231026, 0.081775784492492676, 0.011343618854880333, 0.00039129308424890041, 0.033424735069274902, 0.00094751163851469755, 0.00035176440724171698, 0.0014607266057282686, 0.0011525042355060577, 0.013563594780862331, 0.0026622361037880182, 0.018879828974604607, 0.0053724073804914951, 0.014053518883883953, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(8) int32_t tensor_data36[8] = { 17527, -8875, 15731, -4822, -7965, -9701, -12136, 24473, };
const TfArray<1, int> tensor_dimension36 = { 1, { 8 } };
const TfArray<8, float> quant36_scale = { 8, { 0.00010337376443203539, 2.3663975298404694e-05, 3.1753770599607378e-05, 4.9241480155615136e-05, 4.2540064896456897e-05, 0.00010399457096355036, 7.667976024094969e-05, 9.1458779934328049e-05, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int8_t tensor_data37[1*3*3*48] = { 
  /* [0][0][][] */ 106,-65,80,-81,-127,-127,-3,75,54,36,112,-48,-20,22,97,127,115,119,100,70,127,2,67,-73,33,99,-47,114,21,-5,-36,-88,-38,59,-98,-29,-20,22,-66,-88,127,112,-40,30,-5,-72,-127,103, 127,-31,59,-87,-55,-47,82,-78,-87,44,56,50,-72,3,-121,-54,110,98,127,-55,-43,-69,50,-56,58,127,-16,116,-67,-45,-96,46,46,43,20,88,-46,107,-27,-85,-68,11,-21,79,-127,9,9,119, 90,-37,94,85,-96,-21,-73,-90,-90,27,112,-47,-43,-17,-84,-4,115,127,90,81,102,-82,-81,-112,44,111,121,127,-122,-127,-60,-83,61,-126,51,6,-47,52,-30,-23,127,84,-73,64,-63,-10,45,93, 
  /* [0][1][][] */ 99,41,65,-71,-17,-38,82,-36,127,17,-22,-46,-75,12,127,34,114,5,90,-82,-80,-71,46,-15,-65,41,38,52,-3,-73,-93,-97,-25,-114,-108,39,-80,-70,-50,126,118,127,-70,95,6,-17,-73,114, 54,41,36,-121,-86,-56,97,60,46,56,127,127,-43,18,69,100,92,64,73,-44,-46,-45,25,-97,54,74,-30,-76,22,-96,-88,-87,33,-127,-55,5,-127,127,-127,-124,-103,21,33,93,-77,66,-91,104, -8,70,24,-47,-110,87,-69,-127,-110,-70,109,75,-31,-112,-120,-33,85,8,64,38,-48,-22,-32,-96,127,71,-28,115,-76,4,127,-127,55,-64,75,76,23,-99,-78,-104,101,97,-127,65,-84,-45,-32,-127, 
  /* [0][2][][] */ -38,-66,127,-58,-32,-84,-37,44,-83,-42,89,-80,127,101,-49,-56,57,26,68,23,-35,-82,75,-127,-76,83,127,76,30,-29,102,-75,-127,-82,-127,-89,-38,-68,32,127,112,67,44,29,45,-127,-53,27, 46,-86,65,-85,-89,-86,9,90,-118,47,31,-55,-53,76,29,25,-127,9,77,79,-67,124,127,-93,53,125,33,109,127,-47,-68,39,-39,-56,1,127,37,80,21,-114,-53,22,56,4,-55,-9,-39,-122, -55,-127,105,127,-99,-17,-127,63,-82,-127,70,35,-91,127,-2,-95,67,-54,58,127,-27,-127,-46,-37,87,81,95,-82,72,-95,103,-74,-31,58,67,76,-37,-62,26,-107,-84,56,13,-127,27,-71,-18,-112, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0085443882271647453, 0.0044517493806779385, 0.006544012576341629, 0.0011614680988714099, 0.0035157736856490374, 0.0018055516993626952, 0.010495350696146488, 0.023721525445580482, 0.033493537455797195, 0.015425378456711769, 0.001433675060980022, 0.00816383957862854, 0.0050543122924864292, 0.0041734660044312477, 0.015132874250411987, 0.0061634662561118603, 0.16085177659988403, 0.0032517316285520792, 0.00037737746606580913, 0.0094801094383001328, 0.0078926552087068558, 0.0048773204907774925, 0.0050997217185795307, 0.012376339174807072, 0.012574316002428532, 0.0022886961232870817, 0.0059861843474209309, 0.0020762216299772263, 0.0078453877940773964, 0.0017059894744306803, 0.0036192836705595255, 0.07178189605474472, 0.023755764588713646, 0.0008681665058247745, 0.0061853420920670033, 0.12835709750652313, 0.0021567728836089373, 0.0048073530197143555, 0.004928048700094223, 0.19335336983203888, 0.0030786267016083002, 0.0019548423588275909, 0.001956180902197957, 0.0036596318241208792, 0.0042492975480854511, 0.0041342610493302345, 0.0040044654160737991, 0.0018186211818829179, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 3 };
const ALIGN(8) int32_t tensor_data38[8] = { 16874, -32442, 27335, 40138, -21649, -22455, 30238, 29041, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 6.9139074184931815e-05, 8.4971070464234799e-05, 1.174345743493177e-05, 2.1053145246696658e-05, 2.7811625841422938e-05, 6.826358730904758e-05, 3.9902239223010838e-05, 5.303458237904124e-05, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int8_t tensor_data39[1*3*3*48] = { 
  /* [0][0][][] */ 5,-127,-73,-61,-91,116,-94,69,127,-71,21,27,71,119,13,-111,85,-95,-77,-71,-127,-127,38,-69,101,121,127,-29,42,123,9,104,83,-62,-9,60,83,35,127,99,-88,-29,-42,27,-86,14,-35,121, 62,45,-127,-2,-77,96,-127,84,84,25,107,9,80,-21,-76,47,111,-70,-127,-30,38,21,102,-108,-10,-119,77,-87,87,43,91,34,102,127,-95,-34,25,74,118,80,-127,-15,-106,-61,-9,11,20,127, 80,-3,-119,-24,-94,95,-14,86,44,59,-38,51,7,117,-78,-41,127,-113,-119,47,-66,-61,74,-127,127,-127,79,83,118,127,-14,-127,-76,104,-127,-24,58,122,16,-51,-119,16,-109,-127,-127,101,-70,71, 
  /* [0][1][][] */ -127,-88,-79,16,-96,-2,-58,-127,41,16,-127,50,71,-127,-69,-18,112,-74,-77,8,-40,92,-30,-67,122,-88,43,127,-38,104,17,110,26,71,63,-32,127,70,66,-12,-1,42,-94,26,57,-10,46,15, -4,-7,-109,27,-81,-34,-17,61,52,39,-61,30,127,-110,-50,96,-31,-50,-108,127,-10,60,-81,-87,33,-116,-69,102,-3,-52,68,85,76,-65,67,127,99,114,106,-127,-102,49,-105,-43,-102,-49,104,51, 27,-114,-112,45,-92,-15,-49,84,84,112,-38,26,-14,93,-67,127,87,-99,-122,51,-7,32,-93,-114,119,-108,-6,104,96,-12,36,-85,93,46,38,-64,74,91,101,-30,-100,35,-37,-4,14,10,123,66, 
  /* [0][2][][] */ -91,-47,-56,127,-78,-127,80,-84,-39,-127,-62,99,11,-86,127,-32,100,-80,-79,28,-55,26,11,-72,73,92,15,-75,-127,62,48,102,-77,49,45,42,38,88,79,5,-58,-127,-123,73,50,127,2,31, 47,-36,-102,54,127,21,91,-101,-46,-64,-63,127,10,-94,-59,-33,16,-66,-106,55,-19,85,115,-90,-63,4,-25,-77,-90,-47,109,15,-127,-47,-24,56,-29,75,-59,-52,-104,-49,-127,62,-127,108,95,57, -44,-19,-104,64,4,-83,88,29,36,19,79,64,-53,-35,-62,-37,115,-127,-111,47,-59,-15,127,-88,53,-54,-70,-38,-95,52,127,49,4,53,64,-50,48,127,78,-86,-83,9,-103,59,-95,96,127,33, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.011985128745436668, 0.0046010180376470089, 0.00041260433499701321, 0.004069693386554718, 0.0010946569964289665, 0.0052751312032341957, 0.0046857087872922421, 0.0070988768711686134, 0.0051883645355701447, 0.0070025939494371414, 0.0017438089707866311, 0.020006511360406876, 0.0024350860621780157, 0.0036912658251821995, 0.0040131174027919769, 0.059865370392799377, 0.0073937666602432728, 0.003022331977263093, 0.00025566399563103914, 0.0063989562913775444, 0.0034987074322998524, 0.20663626492023468, 0.0038035756442695856, 7.1545298851560801e-05, 0.0049813194200396538, 0.002004105132073164, 0.0040997229516506195, 0.0075992261990904808, 0.0051607564091682434, 0.020639725029468536, 0.005469971802085638, 0.0037165910471230745, 0.00055672577582299709, 0.0045998608693480492, 0.0085324263200163841, 0.08714669942855835, 0.004706844687461853, 0.19330927729606628, 0.10441502183675766, 0.032623220235109329, 0.0013044847873970866, 0.0059245354495942593, 0.0019974440801888704, 0.015278266742825508, 0.0011482774280011654, 0.0032506738789379597, 0.00013099571515340358, 0.0047302432358264923, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 3 };
const ALIGN(8) int32_t tensor_data40[8] = { 693, -12969, 17565, -7323, -4484, 20937, 5815, 331, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 6.9050976890139282e-05, 5.2882267482345924e-05, 4.5869186578784138e-05, 5.7115339586744085e-05, 4.3093390559079126e-05, 6.0396949265850708e-05, 3.2484855182701722e-05, 0.00012370283366180956, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int8_t tensor_data41[1*3*3*48] = { 
  /* [0][0][][] */ 56,-111,37,-127,99,-127,-37,-127,115,68,-109,63,-90,119,72,-121,40,-91,-127,-108,107,-93,-112,-77,91,112,-97,32,-126,127,50,127,84,-100,102,3,67,50,-16,44,-94,127,-4,-77,-78,-68,112,49, -10,-94,34,-54,-78,-88,-31,-36,44,78,37,64,63,8,1,-89,67,-80,-53,-99,-35,-110,-62,-72,50,62,-127,90,-103,-8,127,11,127,-127,-3,53,-127,26,61,55,-12,84,-114,-89,-66,83,65,39, -7,28,25,71,62,93,-113,-32,40,106,-67,59,-121,-117,6,-43,57,64,66,-127,9,-61,-92,-15,24,-64,-109,127,-93,-12,75,61,79,-15,103,26,90,35,97,127,-108,69,-111,-21,127,-34,33,-13, 
  /* [0][1][][] */ -10,-127,64,-29,81,29,-19,61,-10,12,-54,76,-104,61,69,-127,71,67,-60,-38,-38,-127,-97,109,-2,57,-67,-126,-127,11,5,52,17,-99,-41,105,87,108,47,-89,-96,21,-120,54,-36,54,110,96, -5,-110,46,-70,127,59,127,-7,-39,75,126,-127,127,47,-58,-77,-75,46,-67,93,-57,-120,-73,-56,-124,127,-15,-73,-68,49,98,1,28,-74,-99,94,52,79,-25,-39,-68,-25,-111,-34,7,127,127,81, -114,-72,127,43,39,75,79,80,-127,102,-9,17,-122,-127,18,-124,58,-107,45,127,47,-62,-58,55,31,88,-92,-65,-67,-36,-41,40,-4,-26,45,93,86,-74,-61,-25,-127,-19,-127,86,-8,82,107,127, 
  /* [0][2][][] */ 39,-82,53,27,50,-60,-35,63,95,60,-127,61,-57,36,127,-115,66,67,30,102,127,-107,-59,-50,85,90,79,-98,-118,-10,-67,11,72,-120,109,95,85,74,127,59,-78,56,-122,85,-16,-23,17,76, -62,78,47,4,-90,44,-33,91,49,119,-1,58,-22,-6,26,-108,-127,-127,54,-55,38,-124,70,61,92,44,-96,55,-96,-6,-36,-48,84,-88,35,42,80,114,74,7,-101,-25,99,58,-81,67,91,-34, -127,-64,54,12,89,73,-76,121,-27,127,-92,78,-84,-85,116,-124,62,2,65,-56,-34,-95,-127,-127,127,-117,-58,99,-120,-28,-53,-42,28,96,127,127,94,127,29,16,-108,45,-57,127,106,49,112,87, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.0032945810817182064, 0.00046637747436761856, 0.022611876949667931, 0.0059928582049906254, 0.00037001378950662911, 0.018573425710201263, 0.011457681655883789, 0.0038586861919611692, 0.0095303924754261971, 0.0026724680792540312, 0.0054394486360251904, 0.0047594727948307991, 0.0063532632775604725, 0.0019948524422943592, 0.0075060701929032803, 0.0022425984498113394, 0.0031701459083706141, 0.11076368391513824, 0.014704464003443718, 0.01060139387845993, 0.0043860813602805138, 0.0013159305090084672, 0.0038814609870314598, 0.009311930276453495, 0.007349381223320961, 0.0028860683087259531, 0.0059044118970632553, 0.00036291513242758811, 0.0012792967027053237, 0.010537652298808098, 0.046217165887355804, 0.038954403251409531, 0.0089892623946070671, 0.013640696182847023, 0.021035082638263702, 0.012136103585362434, 0.0017610641662031412, 0.18649794161319733, 0.00070017843972891569, 0.032204490154981613, 0.00064314884366467595, 0.0095633538439869881, 0.0002921668638009578, 0.0049282386898994446, 0.011817333288490772, 0.00077858445001766086, 0.00038002358633093536, 0.010943431407213211, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(8) int32_t tensor_data42[8] = { 26239, 6238, -2418, 1934, -14743, 3516, 22324, -6072, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 4.2796251364052296e-05, 0.00011046981671825051, 0.00011649716907413676, 7.9529905633535236e-05, 2.6981648261426017e-05, 9.5795774541329592e-05, 3.7245528801577166e-05, 2.926185516116675e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[2] = { 1717, 658, };
const TfArray<1, int> tensor_dimension43 = { 1, { 2 } };
const TfArray<2, float> quant43_scale = { 2, { 0.00053762865718454123, 0.00067848264006897807, } };
const TfArray<2, int> quant43_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.049344770610332489, } };
const TfArray<1, int> quant46_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.058978337794542313, } };
const TfArray<1, int> quant47_zero = { 1, { -32 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.054635357111692429, } };
const TfArray<1, int> quant51_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.059583429247140884, } };
const TfArray<1, int> quant54_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.075510449707508087, } };
const TfArray<1, int> quant55_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.053432218730449677, } };
const TfArray<1, int> quant59_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.072617746889591217, } };
const TfArray<1, int> quant62_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.078278563916683197, } };
const TfArray<1, int> quant63_zero = { 1, { 31 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.098048783838748932, } };
const TfArray<1, int> quant66_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.10797091573476791, } };
const TfArray<1, int> quant67_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.016182307153940201, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.067157335579395294, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.17761649191379547, } };
const TfArray<1, int> quant70_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,16,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,31,9 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,17,32 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,18,4 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,5 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,19,34 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,20,6 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,35,7 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,21,36 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,22,8 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,37,10 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,23,38 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,24,11 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,39,12 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,25,40 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,26,13 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,41,14 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,27,42 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,28,15 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,29,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,30,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 288, (TfLiteIntArray*)&tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 72;
  for(size_t i = 0; i < 72; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 28; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
