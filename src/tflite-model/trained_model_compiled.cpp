/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 10.12.2021 01:55:51

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 237296;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[72];
TfLiteEvalTensor tflEvalTensors[72];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[28];

const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[32] = { -3747, 3194, -3785, -3722, 4796, -3723, 337, -3732, -2620, -3793, -5142, -3749, -3891, -1052, -3917, -3711, -3742, 4122, -1844, 5774, -3771, -3726, -2148, -3773, 614, -588, 1025, 3714, -3737, -3753, -628, 2049, };
const TfArray<1, int> tensor_dimension2 = { 1, { 32 } };
const TfArray<32, float> quant2_scale = { 32, { 0.00016026097000576556, 0.0001269978383788839, 0.00015855095989536494, 0.000161316929734312, 0.00041630558553151786, 0.00016129127470776439, 0.00017288187518715858, 0.00016088281699921936, 0.00015991721011232585, 0.00015830536722205579, 0.00020294552086852491, 0.00016017853340599686, 0.00015430190251208842, 0.00023692021204624325, 0.0001533134636702016, 0.00016140835941769183, 0.00016046586097218096, 0.00021896277030464262, 0.00014385736722033471, 0.00017398002091795206, 0.0001592480402905494, 0.00016113676247186959, 0.00024428084725514054, 0.00015916296979412436, 0.00020082711125724018, 0.00024089337966870517, 0.000146175516420044, 0.0002237616281490773, 0.00016068553668446839, 0.00015991904365364462, 0.00018311641179025173, 0.00015709591389168054, } };
const TfArray<32, int> quant2_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[8] = { -33570, -9826396, -5692, -63131, 46150, 50373, 32838, -16102, };
const TfArray<1, int> tensor_dimension3 = { 1, { 8 } };
const TfArray<8, float> quant3_scale = { 8, { 6.8689791078213602e-05, 1.2339499733116099e-07, 5.7024426496354863e-05, 2.5590377845219336e-05, 4.0337235986953601e-05, 3.2147210731636733e-05, 3.6958765122108161e-05, 7.5885123806074262e-05, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[48] = { -5615, 6630, -12924, -6673, -33131, -1597, 2691, -980, -4762, -82407, 17506, -34951, 7505, -8344, -2071, 4932, -8721, 12839, -9623, 4841, 7043, 6654, 3800, 9787, 511, -205, -3554, 1698, -7071, -4823, -9166, 25554, -8457, 18422, 5580, -111480, -1343, 3072, -235985, -19454, 2852, -16131, -6616, 2221, -9121, 375, -1131, -6219, };
const TfArray<1, int> tensor_dimension4 = { 1, { 48 } };
const TfArray<48, float> quant4_scale = { 48, { 0.00019883198547177017, 9.6181560365948826e-05, 0.00014034715422894806, 0.00023864526883699, 4.3755819206126034e-05, 0.00017196667613461614, 0.0002098919649142772, 0.00018998818995896727, 0.00017999927513301373, 1.280347987631103e-05, 8.2961589214392006e-05, 2.7389272872824222e-05, 0.00015769488527439535, 0.00014272586849983782, 0.00030653926660306752, 0.0001925347896758467, 0.00018549378728494048, 7.0845308073330671e-05, 0.00012699092621915042, 0.00018313479085918516, 0.00020945808500982821, 0.00022376002743840218, 0.00048494746442884207, 0.00010131809540325776, 0.00017943901184480637, 0.00021532473328988999, 0.00017199755529873073, 0.00057952996576204896, 0.00032516749342903495, 0.0001946244592545554, 0.00013269789633341134, 5.9935053286608309e-05, 0.00014371085853781551, 7.1493028372060508e-05, 0.00030395697103813291, 1.412135134160053e-05, 0.00013062210928183049, 8.961460116552189e-05, 4.7551015995850321e-06, 7.3661765782162547e-05, 0.00036672604619525373, 4.7532186727039516e-05, 0.00027508594212122262, 0.00055356306256726384, 0.00011634034308372065, 0.00039445428410544991, 0.00031841170857660472, 0.00019891760894097388, } };
const TfArray<48, int> quant4_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[48] = { 9803, -7592, 11549, 5214, 107, -51490, 49062, -6877, 3174, -243, -12884, -2490, 21778, -7211, -18648, 6632, -23975, -615958, 1565, -13784, 4533, -8863, 1430, 10199, 20126, -320677, -1238, 17167, -6749, -7787, 14260, -23600, 18003, 22115, -11681, -183, -13121, 7031, -44, -99358, -433, -7181, 18764, 43981, -7450, 13869, -125572, -2173, };
const TfArray<1, int> tensor_dimension5 = { 1, { 48 } };
const TfArray<48, float> quant5_scale = { 48, { 0.00017926303553394973, 0.0001622198469704017, 8.8802451500669122e-05, 6.4020074205473065e-05, 0.0077274413779377937, 1.3280045095598325e-05, 1.9982539015472867e-05, 4.1680468712002039e-05, 0.00059818109730258584, 0.0026448953431099653, 0.00013226654846221209, 0.00043464804184623063, 2.9015149266342632e-05, 8.1464313552714884e-05, 8.69393115863204e-05, 0.00012561029870994389, 4.2809486330952495e-05, 1.1486243920444394e-06, 0.00012339132081251591, 9.2212561867199838e-05, 0.00027059871354140341, 0.00035457496414892375, 0.00035068124998360872, 0.00022106089454609901, 3.8691028748871759e-05, 3.4095182854798622e-06, 0.00024649081751704216, 7.3515497206244618e-05, 0.00017781625501811504, 0.00012862992298323661, 5.0223159632878378e-05, 3.5678691347129643e-05, 5.8405545132700354e-05, 9.9276192486286163e-05, 0.00013570526789408177, 0.0066025699488818645, 4.1106490243691951e-05, 2.2219332095119171e-05, 0.0019430617103353143, 1.2222081750223879e-05, 0.00031833534012548625, 0.00013814005069434643, 7.3200841143261641e-05, 2.8931968699907884e-05, 0.00012164636427769437, 0.00010830418614204973, 5.3555381782643963e-06, 0.00042912593926303089, } };
const TfArray<48, int> quant5_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[48] = { 264, -246069, 74, 5120, -1, -332, -1791, 8173, -3988, -767, 834, -208, 194, -1282, 609, -5494, 2856, 1112, -17011, 2101, -252, -2572, -3058, -387, -4485, -343, 573, 880, -81062, 3739, 5040, 5243, 2008, 4808, -3302, 1676, 885, 1173, 3575, 748, -19490, 142, 10355, -4714, -1043, 892, -106, -199, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00059279741253703833, 6.5106046349683311e-06, 0.00019546126713976264, 0.00025403336621820927, 0.00056187954032793641, 0.000635030388366431, 0.00027548609068617225, 0.00012124438217142597, 0.00020660634618252516, 0.00024914299137890339, 0.00045206921640783548, 0.00046357890823855996, 0.00048423311091028154, 0.0005210281815379858, 0.00035700242733582854, 0.00011286736844340339, 0.00020098847744520754, 0.00024155230494216084, 5.3666848543798551e-05, 0.00031111817224882543, 0.00044459049240685999, 0.00024327760911546648, 0.00023508879530709237, 0.00041518322541378438, 0.00030961126321926713, 0.00065445288782939315, 0.00022174461628310382, 0.00062900996999815106, 1.464680735807633e-05, 0.00020732842676807195, 0.00010766032210085541, 0.00015238304331433028, 0.00021108955843374133, 0.00020551738271024078, 0.00018767341680359095, 0.00037683753180317581, 0.00036970956716686487, 0.00035286106867715716, 0.00030297538614831865, 0.00055448117200285196, 5.5774045904399827e-05, 0.00059441459598019719, 7.9121222370304167e-05, 0.0002474857319612056, 0.00023169818450696766, 0.00027969569782726467, 0.00067705381661653519, 0.00025075126904994249, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int32_t tensor_data7[48] = { -25638, 5, -15202, 12122, -9186, 10536, -34909, -11593, -3837, -9533, -18313, -17113, 7336, 13680, -11808, -1791, -961, -6625, -1250, -19056, -37663, -9402, -8244, -13316, -1576, -23662, -5404, 5844, -100, -5838, -23773, -21393, -11428, 9221, -2971, 8173, 758, 12650, 9932, 4866, -1168, -3109, -131704, 3203, -27440, 14890, 6457, -4138, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 7.8748329542577267e-05, 0.0093021541833877563, 3.1898114684736356e-05, 0.00019512577273417264, 7.84441435826011e-05, 0.00016515934839844704, 4.6479599404847249e-05, 2.4425680749118328e-05, 0.00026172806974500418, 0.00010505900718271732, 1.9464183424133807e-05, 2.4100812879623845e-05, 3.66771018889267e-05, 0.00011488380550872535, 8.8953012891579419e-05, 0.00044606439769268036, 6.7701148509513587e-05, 2.7054173187934794e-05, 0.00051857542712241411, 0.0001028321057674475, 2.385815059824381e-05, 0.00012289060396142304, 0.00019502088252920657, 7.5106247095391154e-05, 0.0004275620449334383, 3.1286948797060177e-05, 6.3793515437282622e-05, 0.00019411568064242601, 0.0030831764452159405, 0.0001771353418007493, 8.4557170339394361e-05, 2.3639455321244895e-05, 7.9519770224578679e-05, 0.00012566099758259952, 0.00018685939721763134, 0.00012588113895617425, 0.00010673420183593407, 0.00010741477308329195, 9.5974457508418709e-05, 0.0001384022762067616, 0.00049933465197682381, 5.3014169679954648e-05, 6.4852374634938315e-06, 0.00015553052071481943, 2.0012936147395521e-05, 2.8437452783691697e-05, 0.00013691291678696871, 0.00010411660332465544, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[48] = { 453, 328, 636, 3059, 1642, 1755, 843, 12493, 371, -1968, 419, -328, 210, 309, 4511, -345, 1142, 50, -2159, -3799, -236, -973, -265, 377, -86871, -19583, -417, 670, -7706, 864, -1061, -4853, -1916, -146567, 1998, 1837, -34, -2356, 16997, 12675, 8541, -182387, 3441, 2206, 2698, -6769, 79, -1287, };
const TfArray<1, int> tensor_dimension8 = { 1, { 48 } };
const TfArray<48, float> quant8_scale = { 48, { 0.00065543246455490589, 0.00066300149774178863, 0.0003713194455485791, 0.00035481716622598469, 0.00045807851711288095, 0.00040257972432300448, 0.00059224129654467106, 0.00010317515261704102, 0.000416497205151245, 0.00026995132793672383, 0.00061876699328422546, 0.00034298686659894884, 0.00053925055544823408, 0.00079426460433751345, 0.00017366012616548687, 0.00036461337003856897, 0.00040642358362674713, 0.00053082697559148073, 0.00025044273934327066, 0.00017511255282443017, 0.0004604634887073189, 0.00028587353881448507, 0.00076660420745611191, 0.00042243502684868872, 1.7994143490795977e-05, 5.4635769629385322e-05, 0.00048367801355198026, 0.00073816732037812471, 0.00018237586482428014, 0.00059148686705157161, 0.00029785599326714873, 0.00021642466890625656, 0.00043694188934750855, 7.8628872870467603e-06, 0.00032584503060206771, 0.00033308006823062897, 0.00075396720785647631, 0.00036302432999946177, 6.9837544288020581e-05, 0.00011616764822974801, 0.00014982104767113924, 4.8182200771407224e-06, 0.00043599528726190329, 0.00034555874299257994, 0.00030264604720287025, 0.00016652980411890894, 0.00041146037983708084, 0.00054598780116066337, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int32_t tensor_data9[8] = { -64627, 60, 6129, 5967, -17985, 9330, -9717, -70458, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 1.8759565136861056e-05, 0.0066325301304459572, 0.00014482361439149827, 0.00034803719609044492, 9.5753603090997785e-05, 0.00017794281302485615, 0.00010757354175439104, 1.22903202282032e-05, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[48] = { 12417, 65230, -261852, -4755, -10518, 1812, 781, -44056, -23152, -143817, 24341, -9546, 7050, 7476, 13299, 58067, -9217, -4485, -32683, -9172, -3667, -127462, -4496, -67702, -306, -153, -8671, -18293, 743, 47463, -2238, 5183, -1449, 54, 9193, 13864, -21442, -697, -11796, 9460, 16100, 379, 2745, -3004, 17820, -573, -2311, -2627, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.00013106572441756725, 2.0570263586705551e-05, 1.6543123138035298e-06, 0.00013913412112742662, 0.00020763977954629809, 0.00010110628500115126, 0.00024790834868326783, 1.1726152479241136e-05, 3.9717873733025044e-05, 3.2858397389645688e-06, 8.6485786596313119e-05, 4.5807253627572209e-05, 0.00021209138503763825, 0.00013246973685454577, 0.00015568984963465482, 1.8325383280171081e-05, 0.00012329555465839803, 0.0001085808762582019, 5.3504802053794265e-05, 9.4241724582388997e-05, 5.9461199271026999e-05, 7.7312752182479016e-06, 6.3108134781941772e-05, 1.1077280760218855e-05, 0.003615332767367363, 0.00075071252649649978, 2.8614607799681835e-05, 5.8766105212271214e-05, 0.00033021642593666911, 4.9047313950723037e-05, 8.4025159594602883e-05, 0.00014875593478791416, 0.00027110308292321861, 0.0096068829298019409, 6.3645209593232721e-05, 7.0863403379917145e-05, 4.1637504182290286e-05, 0.00073590356623753905, 0.00024142683832906187, 9.1897250968031585e-05, 8.7565094872843474e-05, 0.0020455913618206978, 0.00018126801296602935, 2.6520168830757029e-05, 3.6053988878848031e-05, 0.001220078207552433, 0.00018156750593334436, 0.0002646732609719038, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[48] = { 2997, -1615, -35737, 3576, 1558, 1913, 574, 12565, -1281, -25714, 1416, 259, -24, -1809, 736, 4493, -664, 453, 3106, 5921, 39406, -9391, -323, 9888, 506, -476, 6002, -800, 8150, 563, -2554, 1080, -1759, -2837, -15782, 7571, 1308, 512, -1231, 1068, 20589, -226, 1044, -509, 455, 4807, -30699, -6095, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.00034145187237299979, 0.00032711451058275998, 3.0128017897368409e-05, 0.00018564182391855866, 0.00019816399435512722, 0.00021631098934449255, 0.00042037825915031135, 8.1603815488051623e-05, 0.00023188981867861003, 3.2551128242630512e-05, 0.00040748913306742907, 0.00030813962803222239, 0.00070481403963640332, 0.00029142931452952325, 0.0010042630601674318, 0.00021305809787008911, 0.00027074571698904037, 0.00064069795189425349, 0.00028100298368372023, 0.00020364715601317585, 3.8151618355186656e-05, 0.0001136352657340467, 0.00053002062486484647, 0.00010462477075634524, 0.00023956521181389689, 0.00028326941537670791, 0.00021136362920515239, 0.00027713610325008631, 0.00012851321662310511, 0.00047214128426276147, 0.00036799762165173888, 0.00026741618057712913, 0.00036223442293703556, 0.00013269748887978494, 9.2961192422080785e-05, 0.00013013424177188426, 0.0004939583595842123, 0.00041354037239216268, 0.00030234744190238416, 0.00031695194775238633, 8.0431469541508704e-05, 0.00034271355252712965, 0.00036531576188281178, 0.00026652254746295512, 0.00025530921993777156, 0.00020217207202222198, 3.3629396057222039e-05, 0.00018370756879448891, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[48] = { -20453, 9035, 189, 40875, 2092, -10025, 5774, 1253, -6284, -293, -7454, -29843, -2882, -337933, 11376, -27700, -1477, -77648, 6479, 14088, 19229, -72, -17422, 3990, -4148, -666, -2267, -9520, 7567, -21147, -2599, 4038, -952, -33918, -461, -8116, -166851, -31867, -4378, -4046, 15884, -9535, -4982, 17903, -18945, 1970, -576, -1158, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00010896450112340972, 0.00016194945783354342, 0.0043305284343659878, 1.4527659004670568e-05, 9.6119292720686644e-05, 0.00019216971122659743, 0.00021078818826936185, 4.9174308514920995e-05, 0.00018886959878727794, 0.0018039498245343566, 0.00014156545512378216, 5.5521129979752004e-05, 0.00014054737403057516, 2.0292015960876597e-06, 0.0001245638559339568, 8.1851940194610506e-05, 0.00022719029220752418, 1.6298065020237118e-05, 0.00032117066439241171, 0.00014434684999287128, 0.00014746026135981083, 0.0062382426112890244, 6.6360385972075164e-05, 0.00031536826281808317, 0.00022176066704560071, 0.0001473873999202624, 9.4241026090458035e-05, 1.3028168723394629e-05, 0.0004198572423774749, 8.3210754382889718e-05, 0.00024713631137274206, 3.9906124584376812e-05, 0.00082070392090827227, 3.1784980819793418e-05, 0.00075297907460480928, 0.00012475071707740426, 6.7064856921206228e-06, 4.2983019739040174e-06, 0.00035906664561480284, 0.00012703053653240204, 0.00025661513791419566, 0.00015921135491225868, 0.00017843426030594856, 3.7531368434429169e-05, 5.9709556808229536e-05, 7.5606018071994185e-05, 0.00062520644860342145, 0.00059751933440566063, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(8) int32_t tensor_data13[48] = { -477, -4664, -2119, -3297, 4930, -8453, -2644, -2363, 331, 2409, 4020, 1709, -1542, -47, -1339, -1301, -229, 1172, -11107, -1423, -60919, 8233, 603, 1756, -42236, -1267, 180, -13797, 1309, -1090, 644, -2521, -154, 6012, -251, 64, -504, 1993, -7771, -2144, 3047, 172, 1642, 50, -7970, -80881, -610, -325032, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00042129354551434517, 0.00015498077846132219, 0.00020522098930086941, 0.00025605695554986596, 0.00013740012946072966, 0.00015229318523779511, 0.00030808398150838912, 0.00020423918613232672, 0.00058159098261967301, 0.00023301740293391049, 0.00022927676036488265, 0.00022113879094831645, 0.00023159911506809294, 0.00026819825870916247, 0.00034684425918385386, 0.00019666008302010596, 0.00069725530920550227, 0.0004412640118971467, 8.183194586308673e-05, 0.00020807846158277243, 2.1235948224784806e-05, 9.5141593192238361e-05, 0.00035182613646611571, 0.00027956414851360023, 3.4971395507454872e-05, 0.00025107982219196856, 0.0002800284419208765, 6.1008660850347951e-05, 0.00025264450232498348, 0.00028677500085905194, 0.00036362791433930397, 0.0004240522684995085, 0.0011875173076987267, 0.00014469848247244954, 0.00020067267178092152, 0.00036110330256633461, 0.00054179423023015261, 0.00030440874979831278, 8.4737432189285755e-05, 0.00021497896523214877, 0.0001730178773868829, 0.00044039005297236145, 0.00019013250130228698, 0.00018000559066422284, 8.8620981841813773e-05, 8.6920508692855947e-06, 0.00038102696998976171, 3.9543701859656721e-06, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(8) int32_t tensor_data14[48] = { -4836, -2825, -9549, 246, 22525, 1540, 14088, -15940, 5208, -40405, 16730, 9221, -9112, -10930, 28487, -8709, -7269, -136499, -2388, 10097, -85, -9869, -26690, -594, -70, -21546, 25381, -22061, -10796, 33272, 6592, -9073, -29728, 2549, -3916, -7839, -4387, -6266, -394, -1287, -2103, -1833, 14993, -13525, -3647, -212, -1554, -123, };
const TfArray<1, int> tensor_dimension14 = { 1, { 48 } };
const TfArray<48, float> quant14_scale = { 48, { 0.00011460393579909578, 0.00044733533286489546, 0.00016290429630316794, 0.00018456346879247576, 5.6023869547061622e-05, 0.00063377106562256813, 9.6789408416952938e-05, 1.6792411770438775e-05, 0.00023722791229374707, 3.7833542592125013e-05, 0.00017040235979948193, 9.2765898443758488e-05, 0.0001615476212464273, 9.5189236162696034e-05, 4.7731537051731721e-05, 3.4265729482285678e-05, 0.00020014711481053382, 7.6741625889553688e-06, 0.00031485731597058475, 0.00016038997273426503, 0.0058914120309054852, 6.964267959119752e-05, 1.3960097021481488e-05, 0.00016745596076361835, 0.0048072929494082928, 7.8446551924571395e-05, 6.417275290004909e-05, 4.1779607272474095e-05, 9.9108248832635581e-05, 2.669458081072662e-05, 0.00010400438623037189, 0.000143225202918984, 4.4197611714480445e-05, 0.00017988910258281976, 0.00011670196545310318, 0.00017448447761125863, 0.00021024358284194022, 0.00021510929218493402, 0.0016403347253799438, 0.00019847985822707415, 6.5551597799640149e-05, 8.5360792581923306e-05, 0.00017021884559653699, 4.5679265895159915e-05, 0.00027530628722161055, 0.0017743606586009264, 0.00014123979781288654, 0.0065008304081857204, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(8) int32_t tensor_data15[48] = { 1110, -74098, 5147, -145991, -32901, -65446, -19282, -118745, -18504, -215094, -17678, 1003, 1024, -11867, -14508, -21821, 1121, -243991, -61481, 1135, 1358, -40644, -2260, -1919, -7044, -1235, -16414, -11939, 5914, 2296, -1083568, -11695, 1465, -35254, -20680, 105, -3003411, -16465, 157, -325, -19670, 1833, -28689, -91, -32613, -2727, 523, -214571, };
const TfArray<1, int> tensor_dimension15 = { 1, { 48 } };
const TfArray<48, float> quant15_scale = { 48, { 0.00038616574602201581, 1.2706555025943089e-05, 0.00016443042841274291, 7.8030561780906282e-06, 3.4752807550830767e-05, 1.7060965546988882e-05, 3.9009086322039366e-05, 8.2735095929820091e-06, 4.471650390769355e-05, 5.0666017159528565e-06, 4.2041185224661604e-05, 0.00051052554044872522, 0.00053343357285484672, 6.3135565142147243e-05, 4.5728142140433192e-05, 4.7361780161736533e-05, 0.00041413615690544248, 3.9914034459798131e-06, 1.733771750878077e-05, 0.00032756655127741396, 0.00016406248323619366, 2.1920921426499262e-05, 8.4317507571540773e-05, 0.00023593180230818689, 0.00010941184882540256, 0.00010871576523641124, 4.2753810703288764e-05, 5.7356024626642466e-05, 0.00019436805450823158, 0.00040056699072010815, 9.5856069037836278e-07, 5.94062585150823e-05, 0.0004052571312058717, 2.5536748580634594e-05, 3.7259804230416194e-05, 0.00037567649269476533, 3.7470638858394523e-07, 4.4697084376821294e-05, 0.00021901052969042212, 0.00027566909557208419, 4.4134158088127151e-05, 0.00018424265726935118, 3.0783096008235589e-05, 0.00070502900052815676, 3.262957397964783e-05, 9.4164519396144897e-05, 0.00061276764608919621, 4.6730947360629216e-06, } };
const TfArray<48, int> quant15_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(8) int8_t tensor_data16[8*3*3*1] = { 
  /* [0][0][][] */ 9, 49, 18, 
  /* [0][1][][] */ 81, 77, 55, 
  /* [0][2][][] */ 127, 124, 99, 
  /* [1][0][][] */ -5, -63, -127, 
  /* [1][1][][] */ -7, -39, -73, 
  /* [1][2][][] */ 70, 5, -39, 
  /* [2][0][][] */ 38, 61, 76, 
  /* [2][1][][] */ 57, 36, 47, 
  /* [2][2][][] */ 84, 127, 40, 
  /* [3][0][][] */ 20, 127, 76, 
  /* [3][1][][] */ 112, 100, 18, 
  /* [3][2][][] */ 95, 89, 34, 
  /* [4][0][][] */ -98, -80, -127, 
  /* [4][1][][] */ -91, -69, -105, 
  /* [4][2][][] */ -91, -82, -111, 
  /* [5][0][][] */ -4, -24, -98, 
  /* [5][1][][] */ 13, 11, -49, 
  /* [5][2][][] */ -127, -73, -38, 
  /* [6][0][][] */ -93, -127, -67, 
  /* [6][1][][] */ -79, 5, -11, 
  /* [6][2][][] */ -63, -113, -69, 
  /* [7][0][][] */ 66, 19, -48, 
  /* [7][1][][] */ 127, 71, -29, 
  /* [7][2][][] */ 84, 46, 8, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant16_scale = { 8, { 0.017515895888209343, 3.1465722713619471e-05, 0.014541228301823139, 0.006525545846670866, 0.010285994969308376, 0.0081975385546684265, 0.0094244843348860741, 0.019350705668330193, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(8) int8_t tensor_data17[8*1*1*8] = { 
  /* [0][0][][] */ 45,49,-14,-127,-43,83,-38,-30, 
  /* [1][0][][] */ 103,23,100,30,-28,-127,-93,-102, 
  /* [2][0][][] */ 24,112,-113,2,-127,-116,-21,-68, 
  /* [3][0][][] */ -43,30,-57,-127,-120,-70,-50,-3, 
  /* [4][0][][] */ 44,-51,-44,-15,90,34,127,94, 
  /* [5][0][][] */ -14,81,-37,-127,44,15,24,-31, 
  /* [6][0][][] */ -45,45,54,-127,-73,17,-69,57, 
  /* [7][0][][] */ -64,-72,7,127,-19,-1,57,19, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant17_scale = { 8, { 0.0072096618823707104, 0.0059889517724514008, 0.0037204234395176172, 0.010628204792737961, 0.0079828472808003426, 0.0083935847505927086, 0.015343682840466499, 0.001968771917745471, } };
const TfArray<8, int> quant17_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(8) int8_t tensor_data18[48*1*1*8] = { 
  /* [0][0][][] */ -37,-85,58,-127,83,5,-21,-49, 
  /* [1][0][][] */ 82,-109,87,40,-127,-82,121,-34, 
  /* [2][0][][] */ 32,-3,127,0,69,75,13,46, 
  /* [3][0][][] */ 127,-11,88,-85,29,10,-59,104, 
  /* [4][0][][] */ -49,-127,-23,33,-96,-14,97,-63, 
  /* [5][0][][] */ -2,-108,74,24,127,-12,63,61, 
  /* [6][0][][] */ -33,-60,-50,-13,127,39,-55,-7, 
  /* [7][0][][] */ 34,-57,-19,18,83,127,106,94, 
  /* [8][0][][] */ -71,-23,-39,-79,100,127,-1,31, 
  /* [9][0][][] */ 82,-55,96,-38,56,9,8,127, 
  /* [10][0][][] */ -104,-17,-38,-40,44,32,50,-127, 
  /* [11][0][][] */ 127,-98,51,-82,18,-63,-80,-25, 
  /* [12][0][][] */ -124,-21,-127,-20,89,-30,-93,-66, 
  /* [13][0][][] */ 127,-102,107,54,31,38,89,83, 
  /* [14][0][][] */ -66,11,-76,7,42,127,-2,-36, 
  /* [15][0][][] */ -122,127,-66,-65,-94,-56,93,-47, 
  /* [16][0][][] */ 52,-38,88,32,83,104,127,17, 
  /* [17][0][][] */ -127,-70,-25,33,24,31,-2,-25, 
  /* [18][0][][] */ -33,-70,43,-78,121,107,-127,38, 
  /* [19][0][][] */ -29,23,26,-14,127,-29,-66,12, 
  /* [20][0][][] */ -127,84,-119,-6,-34,-27,52,-32, 
  /* [21][0][][] */ -109,14,-71,-19,-13,-54,17,-127, 
  /* [22][0][][] */ -53,39,33,11,-71,-127,29,7, 
  /* [23][0][][] */ 71,11,53,127,-21,-22,25,81, 
  /* [24][0][][] */ 104,61,13,26,-127,-25,50,54, 
  /* [25][0][][] */ 117,108,-52,-48,-127,0,35,-18, 
  /* [26][0][][] */ -92,47,127,-54,3,-98,96,-60, 
  /* [27][0][][] */ -29,16,-127,13,33,59,96,-74, 
  /* [28][0][][] */ 2,127,106,1,45,8,-55,114, 
  /* [29][0][][] */ 127,64,49,-8,25,-74,-17,96, 
  /* [30][0][][] */ 88,-31,-12,127,39,51,49,49, 
  /* [31][0][][] */ -24,-67,79,56,-62,-89,127,-55, 
  /* [32][0][][] */ 127,9,60,44,-29,41,8,-8, 
  /* [33][0][][] */ 41,-16,-62,78,-94,-17,127,-77, 
  /* [34][0][][] */ -42,-13,-94,127,-65,-16,126,-75, 
  /* [35][0][][] */ -49,0,-16,19,-76,-54,-127,17, 
  /* [36][0][][] */ -127,52,-2,-47,49,74,-104,42, 
  /* [37][0][][] */ 101,80,85,127,-107,-55,89,17, 
  /* [38][0][][] */ 90,-52,-1,54,-93,-112,127,-101, 
  /* [39][0][][] */ 127,-47,104,31,115,97,28,114, 
  /* [40][0][][] */ -10,4,-59,-127,17,-57,45,-35, 
  /* [41][0][][] */ -80,-75,30,112,127,95,-75,-107, 
  /* [42][0][][] */ 30,-63,35,23,63,127,73,43, 
  /* [43][0][][] */ -26,-110,-32,82,73,-8,24,-127, 
  /* [44][0][][] */ -54,-74,-3,-105,127,112,-85,-57, 
  /* [45][0][][] */ 40,92,-65,-18,-79,-33,127,37, 
  /* [46][0][][] */ 29,127,-2,-62,64,15,-95,75, 
  /* [47][0][][] */ -70,-51,72,122,-29,88,127,-117, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant18_scale = { 48, { 0.003505094675347209, 0.0016955293249338865, 0.0024740991648286581, 0.0042069400660693645, 0.00077134615276008844, 0.0030315015465021133, 0.0037000647280365229, 0.0033491924405097961, 0.0031731035560369492, 0.00022570518194697797, 0.001462482032366097, 0.00048282972420565784, 0.0027799124363809824, 0.0025160321965813637, 0.0054038041271269321, 0.0033940849825739861, 0.0032699631992727518, 0.0012488911161199212, 0.0022386498749256134, 0.0032283777836710215, 0.0036924160085618496, 0.0039445366710424423, 0.0085488595068454742, 0.0017860783264040947, 0.0031632271129637957, 0.0037958356551826, 0.0030320459045469761, 0.010216199792921543, 0.0057321903295814991, 0.0034309225156903267, 0.0023392548318952322, 0.0010565605480223894, 0.0025333960074931383, 0.0012603094801306725, 0.0053582824766635895, 0.00024893716908991337, 0.0023026620037853718, 0.0015797641826793551, 8.3824947068933398e-05, 0.001298540853895247, 0.0064648021943867207, 0.00083791755605489016, 0.0048493314534425735, 0.0097584445029497147, 0.0020508968736976385, 0.0069536073133349419, 0.0056130965240299702, 0.0035066038835793734, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(8) int8_t tensor_data19[8*1*1*48] = { 
  /* [0][0][][] */ 60,48,19,44,-34,54,-23,10,-75,25,-15,-68,45,41,34,-127,8,35,-33,1,7,7,-54,54,-42,-16,38,8,-19,13,-16,-54,-33,-6,-40,48,-50,4,-25,17,-62,18,-20,58,73,57,-25,1, 
  /* [1][0][][] */ 65,-42,10,29,-56,50,-16,-28,-127,-13,43,-8,4,-1,-11,36,-6,-5,-51,11,-35,-38,-81,82,-33,-26,58,-59,-7,74,37,-49,-22,12,48,14,-50,-14,35,3,29,-15,5,39,-37,-48,-9,11, 
  /* [2][0][][] */ 42,87,-63,-10,42,-85,95,10,-117,-18,33,-16,39,-21,-28,110,-102,80,-69,-19,-45,3,-63,-62,-115,-51,-74,-16,-127,-80,11,50,12,-94,93,-43,-28,-109,93,-12,37,15,-8,51,72,-86,-105,-15, 
  /* [3][0][][] */ -73,-52,-123,47,-115,-6,23,-27,-127,57,71,-63,12,-36,-80,14,-39,28,19,-3,73,81,-52,108,-20,7,18,-21,5,0,-67,-26,-76,8,80,-72,64,-12,45,-28,0,10,-35,-35,-72,-86,4,51, 
  /* [4][0][][] */ 5,-47,74,-127,-37,-7,33,43,-3,-78,-53,-13,-57,2,7,38,27,-37,34,-76,-78,-19,8,24,78,23,-36,9,69,17,67,30,51,27,-64,41,-41,60,-40,72,-96,33,-3,46,116,32,67,9, 
  /* [5][0][][] */ -56,-35,37,-112,108,46,25,-34,127,39,-5,-28,-69,-90,-68,-6,-54,23,-10,-78,-25,-94,68,-18,68,11,-82,-84,45,-72,17,53,49,-87,-15,73,14,-12,-21,-66,18,-54,36,11,-32,-89,41,11, 
  /* [6][0][][] */ 5,52,75,-8,-38,-16,-30,27,61,-32,14,34,-23,1,85,63,30,-50,114,11,-77,127,19,-7,-46,1,19,14,28,44,-81,29,30,66,11,22,14,36,25,39,37,44,15,29,64,-5,53,18, 
  /* [7][0][][] */ 97,73,8,55,11,31,53,-36,-20,-15,-29,32,50,71,-7,-28,69,25,16,-65,-70,24,-63,-89,-23,13,6,58,-127,3,35,26,74,15,-50,-31,39,27,-33,17,-80,-1,116,67,33,78,-32,-103, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant19_scale = { 8, { 0.0034907176159322262, 0.0041166394948959351, 0.0012117455480620265, 0.0020364965312182903, 0.0030032324139028788, 0.0022623843979090452, 0.0028397438582032919, 0.004102067556232214, } };
const TfArray<8, int> quant19_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(8) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ -127,107,111,73,-46,50,57,48, 
  /* [1][0][][] */ 6,-127,-25,-42,15,114,-67,-124, 
  /* [2][0][][] */ 103,127,-54,-44,75,-68,-82,87, 
  /* [3][0][][] */ -53,-127,-3,-95,-67,64,-32,19, 
  /* [4][0][][] */ -43,-67,-25,127,-124,16,-58,21, 
  /* [5][0][][] */ 3,45,-30,-16,6,127,-50,-6, 
  /* [6][0][][] */ -8,-115,-30,8,75,-97,127,-107, 
  /* [7][0][][] */ -64,-60,-40,-3,17,127,-54,-32, 
  /* [8][0][][] */ -45,-115,32,-8,58,-97,127,-4, 
  /* [9][0][][] */ -127,-61,-31,-51,-72,45,-18,-105, 
  /* [10][0][][] */ -7,9,-28,-20,-19,-29,-127,36, 
  /* [11][0][][] */ -61,-21,-26,-9,-42,127,23,-22, 
  /* [12][0][][] */ -113,-37,-59,127,-54,89,-7,-32, 
  /* [13][0][][] */ -127,1,101,70,-72,75,-14,-62, 
  /* [14][0][][] */ -89,-82,-98,57,-127,74,32,88, 
  /* [15][0][][] */ 40,-87,-41,1,46,2,44,-127, 
  /* [16][0][][] */ -64,1,8,20,-26,53,-92,-127, 
  /* [17][0][][] */ 54,77,-12,-80,32,53,-127,-26, 
  /* [18][0][][] */ -37,82,-6,-3,-127,61,-75,84, 
  /* [19][0][][] */ -104,-56,-57,-121,-12,12,127,6, 
  /* [20][0][][] */ 19,-127,-2,28,75,-2,70,28, 
  /* [21][0][][] */ 90,37,-76,-43,79,-5,127,20, 
  /* [22][0][][] */ -96,-127,15,-9,105,-51,39,14, 
  /* [23][0][][] */ 6,-99,4,12,71,-8,127,24, 
  /* [24][0][][] */ 85,-7,-17,49,-49,23,-33,-127, 
  /* [25][0][][] */ -33,-46,-127,18,27,16,47,66, 
  /* [26][0][][] */ 127,-81,-103,-25,118,-114,98,41, 
  /* [27][0][][] */ -59,10,114,127,-94,-56,86,15, 
  /* [28][0][][] */ 103,17,-88,-127,83,-72,93,-65, 
  /* [29][0][][] */ 127,-57,10,-38,-13,-30,20,95, 
  /* [30][0][][] */ 91,39,99,83,-2,127,-40,102, 
  /* [31][0][][] */ 107,8,2,-127,-17,62,-110,47, 
  /* [32][0][][] */ -68,-127,-50,-53,68,-69,93,-17, 
  /* [33][0][][] */ 82,95,126,-1,22,-37,-127,-68, 
  /* [34][0][][] */ 14,-45,92,127,-28,-47,22,62, 
  /* [35][0][][] */ -58,78,95,28,-55,127,-19,-38, 
  /* [36][0][][] */ -36,127,-117,28,53,73,-57,-110, 
  /* [37][0][][] */ 10,37,67,38,16,84,-32,-127, 
  /* [38][0][][] */ -5,68,106,-5,127,-13,10,-45, 
  /* [39][0][][] */ -24,-93,-86,31,-12,85,-127,-33, 
  /* [40][0][][] */ 122,127,-61,-102,49,17,-74,-91, 
  /* [41][0][][] */ -12,4,19,-34,72,15,-127,10, 
  /* [42][0][][] */ 81,62,102,-22,1,-127,-65,11, 
  /* [43][0][][] */ -105,15,127,32,-99,67,-23,58, 
  /* [44][0][][] */ -33,-87,97,83,101,122,-23,-127, 
  /* [45][0][][] */ -5,127,-9,-10,-32,-107,-74,72, 
  /* [46][0][][] */ -127,-92,-12,107,-24,47,-15,-85, 
  /* [47][0][][] */ -6,-71,-50,-46,58,66,127,-56, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.010042173787951469, 0.00011029167944798246, 0.0033111751545220613, 0.0043034045957028866, 0.009518415667116642, 0.010757613927125931, 0.0046668206341564655, 0.0020539178512990475, 0.0034999761264771223, 0.0042205601930618286, 0.0076581942848861217, 0.0078531717881560326, 0.0082030603662133217, 0.0088263805955648422, 0.0060477331280708313, 0.0019120085053145885, 0.0034048077650368214, 0.0040919715538620949, 0.00090913323219865561, 0.0052704392001032829, 0.0075315022841095924, 0.0041211987845599651, 0.0039824778214097023, 0.0070333336479961872, 0.0052449116483330727, 0.011086637154221535, 0.0037564232479780912, 0.010655625723302364, 0.00024812150513753295, 0.0035122085828334093, 0.0018237995682284236, 0.0025814163964241743, 0.003575923154130578, 0.0034815287217497826, 0.0031792463269084692, 0.0063837459310889244, 0.0062629957683384418, 0.0059775770641863346, 0.0051324977539479733, 0.0093930847942829132, 0.00094482977874577045, 0.010069569572806358, 0.0013403382617980242, 0.0041924859397113323, 0.0039250398986041546, 0.00473813246935606, 0.011469503864645958, 0.0042478051036596298, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(8) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -55,-26,-13,-9,-77,-114,-46,31,-127,30,-95,-9,-32,45,-58,-24,-2,-39,-18,-74,-34,-31,-93,-56,6,16,-81,-56,-65,33,-27,44,-26,13,45,-58,12,-67,-6,-37,-49,27,-30,-76,-43,29,17,-25, 
  /* [1][0][][] */ -6,75,-17,76,11,3,45,-41,-12,49,-41,-39,-41,-56,24,55,52,-8,13,11,7,50,17,54,127,11,34,56,5,-21,49,15,23,4,13,-21,60,-56,28,38,22,-1,49,25,4,-13,5,50, 
  /* [2][0][][] */ -124,-68,47,-85,-32,3,70,55,67,-102,44,24,45,-32,-89,-6,-87,-39,25,-67,-12,-6,-22,-41,-76,38,-67,-66,-13,19,-11,-49,-8,-67,-38,92,-73,-21,-75,-84,-47,18,-36,-79,-16,-12,-127,-60, 
  /* [3][0][][] */ 92,-26,-22,-92,-19,43,22,42,-71,-8,4,118,-34,10,-53,-97,-16,-45,95,-124,-5,0,-70,-75,-127,5,-24,-6,-79,1,70,11,-91,-6,18,-71,5,-16,-56,-91,-80,3,-17,-12,-19,-85,-16,-119, 
  /* [4][0][][] */ 45,60,-3,127,0,14,74,6,26,64,26,51,40,55,-33,8,-6,-24,51,94,62,62,12,78,69,-5,-17,-53,-35,13,66,27,89,82,20,-103,107,-35,10,29,-14,1,59,-21,-54,56,69,99, 
  /* [5][0][][] */ -21,-3,-62,-34,-3,127,-46,18,40,-48,10,-8,15,30,22,-43,-45,-9,-81,61,50,9,34,77,-9,24,4,-81,44,-74,53,-19,-21,43,-4,48,13,47,22,-10,-21,12,32,14,-6,-13,-116,82, 
  /* [6][0][][] */ -4,26,-6,-80,26,-4,15,-30,1,-90,22,12,-23,-127,13,11,40,49,-27,51,-3,27,43,52,47,-43,72,37,31,-29,43,63,9,-10,-72,42,20,-49,-27,55,-8,63,-46,22,54,-43,59,43, 
  /* [7][0][][] */ -127,-98,-9,53,-29,16,-6,44,57,40,-22,30,10,1,18,-44,53,21,-72,36,-36,9,-41,-23,-109,63,16,-33,52,-86,-36,11,-36,57,20,32,59,9,12,87,-37,-48,-50,78,-31,-1,-79,-15, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0012434577802196145, 0.0054328138940036297, 0.0024435238447040319, 0.0011876840144395828, 0.0017992220818996429, 0.0027553485706448555, 0.0025574215687811375, 0.0034307814203202724, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(8) int8_t tensor_data22[48*1*1*8] = { 
  /* [0][0][][] */ 14,-24,7,68,-72,-11,-20,127, 
  /* [1][0][][] */ 111,4,74,-127,-16,-113,-81,18, 
  /* [2][0][][] */ -91,-1,-41,-56,-127,126,118,-13, 
  /* [3][0][][] */ -1,-127,-30,22,-15,61,-41,47, 
  /* [4][0][][] */ 53,-84,84,127,-119,38,-71,-36, 
  /* [5][0][][] */ -29,-35,-27,31,76,-127,45,-119, 
  /* [6][0][][] */ -81,-115,40,127,-18,14,-116,-59, 
  /* [7][0][][] */ -127,97,-68,-82,30,-50,-14,8, 
  /* [8][0][][] */ -35,-127,74,36,-58,43,-44,22, 
  /* [9][0][][] */ -127,13,-65,-99,6,12,114,-84, 
  /* [10][0][][] */ -9,-33,31,-6,-127,-13,-53,-57, 
  /* [11][0][][] */ 48,17,-17,-39,93,127,-12,2, 
  /* [12][0][][] */ -125,-114,-47,-25,0,-67,18,-127, 
  /* [13][0][][] */ -69,-1,22,-14,-85,127,5,-67, 
  /* [14][0][][] */ -9,-21,66,54,-38,48,-127,44, 
  /* [15][0][][] */ -60,-41,-58,-44,127,56,71,-20, 
  /* [16][0][][] */ -115,-108,0,20,127,66,83,41, 
  /* [17][0][][] */ -55,48,-74,53,30,-27,127,-47, 
  /* [18][0][][] */ -45,27,-73,-114,45,119,84,-127, 
  /* [19][0][][] */ -34,-62,-127,-51,50,105,19,-47, 
  /* [20][0][][] */ 41,76,-127,-32,50,-24,-9,-48, 
  /* [21][0][][] */ -44,-40,-38,-102,110,-41,127,-3, 
  /* [22][0][][] */ 34,54,-61,-36,18,-127,-64,31, 
  /* [23][0][][] */ 127,48,-25,4,-64,-2,-122,33, 
  /* [24][0][][] */ -39,127,-105,-10,87,-35,-25,-20, 
  /* [25][0][][] */ 105,18,92,-127,-4,-120,-70,-30, 
  /* [26][0][][] */ -103,-13,-17,84,66,59,41,127, 
  /* [27][0][][] */ 91,-14,6,-7,-10,-127,-61,63, 
  /* [28][0][][] */ -51,-127,57,-16,11,51,4,50, 
  /* [29][0][][] */ 30,73,-50,-70,127,5,-10,-14, 
  /* [30][0][][] */ -104,86,-69,-127,32,96,59,27, 
  /* [31][0][][] */ -118,-48,-47,14,47,-20,104,127, 
  /* [32][0][][] */ -45,101,39,18,29,-55,-24,-127, 
  /* [33][0][][] */ -34,-95,84,-10,91,-120,100,127, 
  /* [34][0][][] */ 75,68,9,-48,-127,8,10,-53, 
  /* [35][0][][] */ 127,26,18,-26,-23,47,-114,50, 
  /* [36][0][][] */ -62,-55,-6,26,127,22,-8,1, 
  /* [37][0][][] */ 43,42,-55,4,-58,-127,48,79, 
  /* [38][0][][] */ 58,33,-72,84,-127,38,-47,38, 
  /* [39][0][][] */ 50,-34,52,-1,-83,-127,-13,79, 
  /* [40][0][][] */ -26,-2,48,34,5,121,110,-127, 
  /* [41][0][][] */ 66,49,127,80,-5,-97,19,-45, 
  /* [42][0][][] */ 18,-1,-34,123,-36,-127,75,-117, 
  /* [43][0][][] */ -13,-4,-127,-87,25,-45,44,-88, 
  /* [44][0][][] */ -98,117,-58,38,-21,-18,127,-6, 
  /* [45][0][][] */ -54,127,18,-50,18,30,80,-39, 
  /* [46][0][][] */ 127,-61,115,-61,-117,-46,-3,49, 
  /* [47][0][][] */ 32,44,-45,64,-73,-52,39,-127, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant22_scale = { 48, { 0.0060454849153757095, 0.0061152991838753223, 0.0034249236341565847, 0.003272712230682373, 0.0042251595295965672, 0.0037132576107978821, 0.0054626311175525188, 0.00095165229868143797, 0.0038416278548538685, 0.0024899388663470745, 0.0057072951458394527, 0.0031635935883969069, 0.0049738627858459949, 0.0073260250501334667, 0.0016017815796658397, 0.0033630691468715668, 0.0037487121298909187, 0.004896166268736124, 0.0023099982645362616, 0.0016151783056557178, 0.0042471578344702721, 0.0026367998216301203, 0.0070708952844142914, 0.0038963961414992809, 0.00016597182548139244, 0.00050394167192280293, 0.0044612805359065533, 0.0068086031824350357, 0.0016821726458147168, 0.0054556727409362793, 0.0027473217342048883, 0.0019962270744144917, 0.0040302025154232979, 7.2524584538768977e-05, 0.0030054831877350807, 0.0030722166411578655, 0.0069543356075882912, 0.003348412225022912, 0.00064415764063596725, 0.001071490696631372, 0.0013818980660289526, 4.4441614591050893e-05, 0.0040214713662862778, 0.003187315771356225, 0.0027915036771446466, 0.0015360140241682529, 0.00379516975954175, 0.0050360048189759254, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(8) int8_t tensor_data23[8*1*1*48] = { 
  /* [0][0][][] */ -8,-10,6,10,33,29,49,70,-47,15,-21,78,6,99,-43,-25,55,63,19,36,71,75,-70,-48,127,-40,-59,-98,19,-9,93,75,90,54,5,-32,39,38,114,1,34,62,28,-13,5,49,-1,-22, 
  /* [1][0][][] */ -75,-40,43,37,10,-8,0,-16,44,41,-7,22,127,-43,22,-33,59,-9,33,-14,-13,24,-21,27,42,14,15,11,34,-46,48,-55,61,-3,-20,60,-42,-49,-12,-79,-20,-26,-49,18,27,14,48,69, 
  /* [2][0][][] */ -9,9,-51,28,61,-99,45,17,76,-78,-127,0,20,-25,-122,-30,-61,-33,-36,-40,-11,-14,-68,-6,-3,17,-30,-19,4,27,-93,31,-22,90,-67,-29,-18,34,-15,-12,57,-77,-77,-55,72,-9,22,-26, 
  /* [3][0][][] */ -82,24,-17,60,21,-30,-116,-6,12,-4,28,29,-34,127,-12,-17,38,-46,-71,7,-58,-35,-11,-21,-48,-25,30,-60,-18,-90,-69,-50,-59,43,8,-27,17,-83,-30,0,8,-1,9,26,2,-29,-5,-105, 
  /* [4][0][][] */ -68,-85,-50,40,60,-47,69,-69,-45,-89,-23,54,-30,-25,-87,90,-99,108,-5,-59,79,72,13,3,8,-16,68,96,21,-6,-50,78,57,7,-25,-61,7,-37,31,-55,32,69,-127,-10,37,71,-55,33, 
  /* [5][0][][] */ 100,71,57,55,66,-13,47,18,47,56,-48,-3,58,-32,-44,-43,10,-15,54,4,-19,68,24,-28,92,21,-45,-52,44,44,98,6,55,17,-16,23,6,102,2,97,13,-50,41,27,-4,23,82,127, 
  /* [6][0][][] */ 47,-47,-36,0,-11,14,-103,48,25,11,-36,-66,-5,77,-29,98,-98,-127,3,-57,-29,-83,117,1,-117,-39,7,47,-44,0,-93,69,-108,24,-55,-107,-88,0,-18,-39,74,41,-50,-64,50,0,111,-89, 
  /* [7][0][][] */ -22,-36,2,-44,-118,29,56,50,16,-12,27,54,-68,-32,-1,38,-65,23,59,29,-7,-43,71,41,30,-55,-2,21,-43,-5,13,59,11,-24,-1,9,-31,127,-61,-42,53,-30,118,3,19,47,47,-54, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant23_scale = { 8, { 0.0011629753280431032, 0.0034716229420155287, 0.0017321736086159945, 0.0031259490642696619, 0.00036365579580888152, 0.0019798087887465954, 0.0022135768085718155, 0.0043680011294782162, } };
const TfArray<8, int> quant23_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(8) int8_t tensor_data24[48*1*1*8] = { 
  /* [0][0][][] */ 57,41,20,127,78,-30,-3,-31, 
  /* [1][0][][] */ 84,106,-1,-16,-72,127,-32,52, 
  /* [2][0][][] */ 60,49,18,47,108,-82,127,-3, 
  /* [3][0][][] */ -70,-17,58,25,-94,-52,127,-63, 
  /* [4][0][][] */ 127,72,-49,-105,94,84,-92,24, 
  /* [5][0][][] */ -26,35,126,21,66,3,127,45, 
  /* [6][0][][] */ -66,23,57,58,-60,-64,127,-28, 
  /* [7][0][][] */ -34,-30,35,71,-97,-127,102,-78, 
  /* [8][0][][] */ 49,-74,-48,-44,-87,55,25,127, 
  /* [9][0][][] */ -31,-59,83,127,30,-22,113,45, 
  /* [10][0][][] */ 127,-58,-33,-8,-32,62,-97,51, 
  /* [11][0][][] */ 36,-127,30,102,34,-46,81,-28, 
  /* [12][0][][] */ -82,-13,-1,-127,5,-16,-27,-120, 
  /* [13][0][][] */ -127,-81,-33,20,69,-84,-9,74, 
  /* [14][0][][] */ 98,-74,-52,100,9,-29,1,127, 
  /* [15][0][][] */ 24,-33,122,58,44,-82,127,125, 
  /* [16][0][][] */ 53,115,-127,-41,-122,79,-100,111, 
  /* [17][0][][] */ 16,127,19,-75,11,30,20,-75, 
  /* [18][0][][] */ 53,127,-14,-41,-18,70,-11,8, 
  /* [19][0][][] */ -18,127,-45,-22,-31,12,13,-60, 
  /* [20][0][][] */ -8,-127,44,-119,10,-77,39,-23, 
  /* [21][0][][] */ -95,-100,9,83,67,-127,67,-57, 
  /* [22][0][][] */ -1,-13,27,-96,-25,10,-37,-127, 
  /* [23][0][][] */ -65,98,-127,-79,-22,60,-122,42, 
  /* [24][0][][] */ 94,97,-19,127,-18,49,-81,-108, 
  /* [25][0][][] */ -20,-80,107,-71,20,123,5,127, 
  /* [26][0][][] */ -11,-127,100,-76,12,-77,-13,4, 
  /* [27][0][][] */ -15,19,127,16,-35,25,91,-84, 
  /* [28][0][][] */ 48,-89,127,55,-11,-54,121,-39, 
  /* [29][0][][] */ -88,-60,90,14,32,-127,93,22, 
  /* [30][0][][] */ -40,-6,109,37,-49,34,103,-127, 
  /* [31][0][][] */ 47,-18,-88,21,0,24,-127,101, 
  /* [32][0][][] */ 47,-49,-22,23,-17,9,27,-127, 
  /* [33][0][][] */ -79,127,-54,-20,-35,58,-83,-111, 
  /* [34][0][][] */ 75,41,-17,-35,4,61,-127,-17, 
  /* [35][0][][] */ -58,-127,95,21,52,-83,107,-3, 
  /* [36][0][][] */ 2,-17,127,-42,-43,4,57,-46, 
  /* [37][0][][] */ 8,17,-100,48,56,9,-127,56, 
  /* [38][0][][] */ -70,-111,-32,127,-1,-24,-6,-119, 
  /* [39][0][][] */ 58,10,78,-83,-1,37,-26,127, 
  /* [40][0][][] */ -15,127,77,64,-66,-50,65,-95, 
  /* [41][0][][] */ 106,-69,47,-94,-39,110,-99,127, 
  /* [42][0][][] */ -51,-77,17,81,-45,-10,44,-127, 
  /* [43][0][][] */ 58,-98,-29,98,17,-19,84,127, 
  /* [44][0][][] */ -3,84,95,-27,57,93,-24,-127, 
  /* [45][0][][] */ -74,-37,80,-61,-23,-65,127,-23, 
  /* [46][0][][] */ 26,58,-38,-89,111,127,-103,116, 
  /* [47][0][][] */ -25,-77,-127,-37,95,-104,-94,-72, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0056432122364640236, 0.0054062572307884693, 0.0004979290533810854, 0.0030681227799504995, 0.00327507802285254, 0.0035749953240156174, 0.0069476375356316566, 0.0013486752286553383, 0.0038324682973325253, 0.0005379760405048728, 0.0067346175201237202, 0.005092657171189785, 0.011648538522422314, 0.0048164841718971729, 0.01659756526350975, 0.0035212344955652952, 0.0044746440835297108, 0.01058888528496027, 0.0046441671438515186, 0.0033656987361609936, 0.00063053594203665853, 0.0018780624959617853, 0.0087597090750932693, 0.0017291450640186667, 0.0039593204855918884, 0.0046816244721412659, 0.0034932298585772514, 0.0045802588574588299, 0.0021239519119262695, 0.007803130429238081, 0.0060819368809461594, 0.0044196164235472679, 0.0059866877272725105, 0.00219310587272048, 0.0015363798011094332, 0.0021507428027689457, 0.0081637036055326462, 0.0068346266634762287, 0.0049969293177127838, 0.0052382992580533028, 0.0013292996445670724, 0.0056640640832483768, 0.0060376133769750595, 0.0044048470444977283, 0.0042195231653749943, 0.0033413199707865715, 0.00055579672334715724, 0.0030361551325768232, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(8) int8_t tensor_data25[8*1*1*48] = { 
  /* [0][0][][] */ 21,71,21,0,75,78,-16,-10,93,-42,71,9,0,24,16,-31,127,22,43,-55,70,70,-44,37,74,66,-95,48,-41,23,-110,-54,68,76,54,-14,-34,-85,56,19,-85,-39,-29,28,2,28,13,70, 
  /* [1][0][][] */ -14,-45,-34,-17,26,-51,82,-15,-79,34,-8,-23,117,-6,-106,-112,55,-19,-1,-28,3,44,34,38,54,80,11,-7,86,8,40,-22,18,34,70,-63,-41,5,96,15,70,-1,26,53,-30,-3,19,-127, 
  /* [2][0][][] */ -51,-94,58,-4,-81,-45,114,-45,50,6,-25,55,77,-86,-7,67,31,-26,127,-67,36,-106,-25,100,-79,24,37,0,-33,-116,-32,-43,-85,56,18,-35,1,15,-20,35,-38,56,-29,-43,-28,-71,86,-37, 
  /* [3][0][][] */ -39,44,-31,23,-14,-27,43,25,-22,6,-59,15,1,-22,-79,12,-75,-48,-84,-39,-20,16,-24,2,-90,44,29,-35,-61,32,-12,32,-32,-46,-89,21,17,35,37,-82,127,-82,-47,39,1,45,16,28, 
  /* [4][0][][] */ -127,-67,65,9,-58,-56,123,-14,-28,-6,-38,-28,17,-30,-24,-64,36,-39,-19,5,30,-73,-55,-66,-44,-33,-37,-9,89,-28,-47,36,-32,-5,-77,-62,79,18,-37,59,37,12,0,-18,-33,-33,29,0, 
  /* [5][0][][] */ -42,-32,-27,91,-112,53,127,-33,-23,-58,29,-84,102,18,116,41,29,64,10,-22,93,31,-45,86,-54,81,-30,-42,22,62,102,-20,6,-7,-97,3,83,25,71,72,-14,74,-100,-51,-20,76,-34,-18, 
  /* [6][0][][] */ 73,25,59,-6,-63,6,30,76,-2,-25,-109,-7,64,43,-23,56,-8,-1,-75,-88,-48,-22,-3,-27,-78,96,5,-31,-109,65,23,-12,-41,-46,-49,25,-44,-79,-85,22,-6,-127,-15,-61,-55,20,6,-36, 
  /* [7][0][][] */ -50,-39,73,35,24,-122,-58,-65,-76,90,62,63,-25,-13,32,-20,-2,20,-22,97,101,-13,64,-82,122,-24,66,-15,96,-23,-103,39,95,87,127,-21,52,36,-50,113,23,110,99,0,8,48,87,-21, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant25_scale = { 8, { 0.00043546647066250443, 0.0025031052064150572, 0.0016505332896485925, 0.0043835919350385666, 0.0020267385989427567, 0.00042902975110337138, 0.0011144959134981036, 0.0027048462070524693, } };
const TfArray<8, int> quant25_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(8) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ 48,14,-100,-58,41,36,-127,-10, 
  /* [1][0][][] */ -15,127,-77,-9,-9,105,-89,77, 
  /* [2][0][][] */ 68,94,-2,11,-30,7,-127,2, 
  /* [3][0][][] */ -15,45,-51,90,-34,-23,-127,66, 
  /* [4][0][][] */ 117,-40,99,40,-79,44,118,-127, 
  /* [5][0][][] */ -127,-46,33,-54,11,-4,57,94, 
  /* [6][0][][] */ 37,127,-115,-7,79,4,-99,5, 
  /* [7][0][][] */ 14,102,75,86,82,73,115,-127, 
  /* [8][0][][] */ 79,16,127,-72,13,13,-29,-107, 
  /* [9][0][][] */ 5,-26,81,90,7,0,39,-127, 
  /* [10][0][][] */ -15,-41,108,-5,60,-14,127,14, 
  /* [11][0][][] */ -2,-34,63,127,7,16,79,-69, 
  /* [12][0][][] */ 26,127,-59,3,-57,0,-115,-84, 
  /* [13][0][][] */ 18,3,16,-127,-20,15,-67,90, 
  /* [14][0][][] */ -15,127,-84,-15,82,72,-72,-50, 
  /* [15][0][][] */ 89,57,-43,-59,-53,-74,-63,127, 
  /* [16][0][][] */ 59,38,-44,127,29,1,18,-44, 
  /* [17][0][][] */ -44,12,46,3,116,73,-127,-51, 
  /* [18][0][][] */ 94,113,104,-77,-93,64,-127,126, 
  /* [19][0][][] */ 33,127,-68,-12,-119,61,-86,84, 
  /* [20][0][][] */ 127,50,5,-80,15,73,-121,113, 
  /* [21][0][][] */ -127,-22,-37,19,-60,-23,-115,-89, 
  /* [22][0][][] */ 110,-102,121,-46,52,111,-27,-127, 
  /* [23][0][][] */ 68,-61,-43,-127,23,58,22,0, 
  /* [24][0][][] */ -53,-44,113,72,-11,-123,55,-127, 
  /* [25][0][][] */ -37,127,-81,-50,-37,-90,40,-19, 
  /* [26][0][][] */ 12,37,-28,-127,13,-43,-15,59, 
  /* [27][0][][] */ -7,127,-96,-57,8,65,-33,43, 
  /* [28][0][][] */ -11,-77,6,127,-39,36,33,-34, 
  /* [29][0][][] */ -48,83,-50,12,-13,10,-29,127, 
  /* [30][0][][] */ -43,-31,38,127,11,25,4,-42, 
  /* [31][0][][] */ 127,113,-86,-6,-90,71,-35,2, 
  /* [32][0][][] */ -92,91,-5,3,-127,-24,25,43, 
  /* [33][0][][] */ -1,-16,33,127,29,-62,3,-80, 
  /* [34][0][][] */ 127,115,16,-64,-108,6,-24,107, 
  /* [35][0][][] */ 16,26,-36,7,-25,52,44,-127, 
  /* [36][0][][] */ 59,-89,28,3,-41,35,10,-127, 
  /* [37][0][][] */ 24,-58,41,13,-26,65,127,-68, 
  /* [38][0][][] */ -37,48,52,-51,127,15,-117,-75, 
  /* [39][0][][] */ 119,47,-101,-4,-127,-95,107,-86, 
  /* [40][0][][] */ -127,-89,24,125,-5,48,98,-89, 
  /* [41][0][][] */ -8,-45,-64,111,-127,-24,85,29, 
  /* [42][0][][] */ 16,-98,125,127,-33,-125,85,-74, 
  /* [43][0][][] */ -92,56,127,-86,40,-25,-121,113, 
  /* [44][0][][] */ 80,69,-2,-99,-15,127,-81,122, 
  /* [45][0][][] */ 106,53,96,-88,-93,-61,-18,127, 
  /* [46][0][][] */ 127,4,-34,-39,76,-42,-69,18, 
  /* [47][0][][] */ -49,-23,19,-94,57,-122,56,-127, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.005002906545996666, 0.0018404136644676328, 0.0024370215833187103, 0.0030407041776925325, 0.0016316414112225175, 0.0018084981711581349, 0.00365853076800704, 0.0024253625888377428, 0.0069064558483660221, 0.0027671069838106632, 0.0027226863894611597, 0.0026260472368448973, 0.0027502647135406733, 0.0031848836224526167, 0.0041188132017850876, 0.0023353598080575466, 0.0082799829542636871, 0.0052400580607354641, 0.0009717632201500237, 0.0024709543213248253, 0.00025217919028364122, 0.0011298167519271374, 0.0041779736056923866, 0.0033198546152561903, 0.00041528913425281644, 0.0029816003516316414, 0.0033253680448979139, 0.00072448450373485684, 0.0030001809354871511, 0.0034054843708872795, 0.0043181208893656731, 0.00503566674888134, 0.014101897366344929, 0.0017183101736009121, 0.0023830097634345293, 0.0042881411500275135, 0.0064338655211031437, 0.0036148868966847658, 0.0010062662186101079, 0.0025528986006975174, 0.0020546060986816883, 0.0052296798676252365, 0.0022578442003577948, 0.0021375860087573528, 0.0010523837991058826, 0.00010321904846932739, 0.0045247366651892662, 4.6958575694588944e-05, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(8) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 69,127,73,-44,2,-24,-25,28,104,-34,7,-15,28,51,-87,33,46,0,50,78,92,-20,25,0,39,92,40,39,82,-42,-28,-3,16,25,-23,18,-30,-17,36,13,3,29,-6,-42,85,-33,58,100, 
  /* [1][0][][] */ -65,-24,38,-16,4,21,57,-41,-46,-6,-51,-22,-94,40,50,-1,-8,-50,72,-19,30,-22,50,-33,-32,-51,-42,48,-29,23,65,-127,8,-58,10,82,-14,-60,-56,70,-29,83,-69,-1,-30,46,-78,-28, 
  /* [2][0][][] */ 86,-77,4,-22,25,-61,-58,69,108,-80,98,-75,45,-64,-68,-67,5,-61,-30,-127,-45,-41,4,20,-42,-37,-93,-16,-29,-82,0,100,-95,54,-75,-83,-100,-70,62,-68,-101,-41,33,91,-25,-8,91,7, 
  /* [3][0][][] */ -81,-48,-98,46,-12,127,76,-18,-77,10,41,48,-20,-24,15,-56,-44,-17,-83,61,-71,-11,-43,-10,-15,57,-32,11,-49,13,21,-104,13,-62,65,72,-20,-9,-9,58,30,56,33,-30,-113,-19,-82,-61, 
  /* [4][0][][] */ -15,-127,-86,74,37,78,-11,62,56,10,38,28,-103,-35,13,-11,42,14,-48,-10,-24,-7,-14,-63,-10,2,-14,1,-6,-2,-35,-20,-57,-6,16,-46,3,-16,9,33,-58,40,71,5,-70,-59,-26,-43, 
  /* [5][0][][] */ -68,110,127,36,-87,62,-24,-35,-16,66,-72,115,-69,65,-37,46,44,31,43,18,20,89,-48,42,82,3,-38,45,-91,7,-72,30,34,-9,94,41,23,-12,-42,-20,20,-1,-37,-56,51,-44,1,63, 
  /* [6][0][][] */ -33,3,-60,-20,78,17,-47,-19,-86,-47,45,45,-32,62,-5,-11,-66,-40,-21,-38,34,-54,-15,96,10,-2,-74,-18,-34,-40,69,-63,-36,-38,-11,38,-127,-125,-3,-45,30,17,14,18,31,-19,6,18, 
  /* [7][0][][] */ -90,66,83,51,6,-19,127,44,-46,39,-91,19,-58,-46,30,42,127,14,-6,61,15,3,-25,-51,-20,-22,-31,59,71,7,-46,68,10,-12,-1,-27,35,0,-8,-47,10,7,-87,-25,44,-42,8,17, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0024640331976115704, 6.093010597396642e-05, 0.0024021835997700691, 0.0029972461052238941, 0.0021135066635906696, 0.00097991107031702995, 0.0039045447483658791, 0.0037703525740653276, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(8) int8_t tensor_data28[48*1*1*8] = { 
  /* [0][0][][] */ 13,61,110,19,115,-14,127,-1, 
  /* [1][0][][] */ -41,81,-71,59,-12,12,127,-53, 
  /* [2][0][][] */ -95,39,-21,127,-9,-39,85,-57, 
  /* [3][0][][] */ 117,-127,1,-121,-57,21,-19,2, 
  /* [4][0][][] */ -127,-71,78,-33,-11,-37,-114,-25, 
  /* [5][0][][] */ -127,-56,-19,112,86,2,92,-33, 
  /* [6][0][][] */ 88,79,121,43,-76,94,-92,-127, 
  /* [7][0][][] */ -59,-65,127,-82,-65,74,77,42, 
  /* [8][0][][] */ -43,69,127,79,-9,-81,21,-105, 
  /* [9][0][][] */ 115,56,-67,-127,-73,-78,-32,117, 
  /* [10][0][][] */ -14,-60,67,127,32,66,48,51, 
  /* [11][0][][] */ 26,127,21,-31,-27,-30,16,20, 
  /* [12][0][][] */ -27,-19,-28,-32,-34,127,88,75, 
  /* [13][0][][] */ 99,36,-11,10,-127,-78,-32,-11, 
  /* [14][0][][] */ 74,24,-76,-106,25,52,-127,26, 
  /* [15][0][][] */ -59,-81,-36,105,127,-106,-127,116, 
  /* [16][0][][] */ 43,85,-44,47,-127,5,29,-58, 
  /* [17][0][][] */ 94,76,-5,-41,-94,109,-104,127, 
  /* [18][0][][] */ 127,33,-111,21,47,-71,-75,-59, 
  /* [19][0][][] */ 35,127,30,-44,-56,-3,-30,17, 
  /* [20][0][][] */ -74,115,15,127,74,-61,119,-35, 
  /* [21][0][][] */ -79,35,83,72,-21,-38,-48,-127, 
  /* [22][0][][] */ 2,11,40,41,8,19,127,-90, 
  /* [23][0][][] */ 10,43,18,15,13,25,42,-127, 
  /* [24][0][][] */ 63,127,100,62,18,-48,45,-21, 
  /* [25][0][][] */ 77,55,26,-127,-125,108,43,100, 
  /* [26][0][][] */ -108,39,48,100,127,-37,-31,23, 
  /* [27][0][][] */ 53,-91,-4,90,41,36,127,-97, 
  /* [28][0][][] */ -71,32,51,60,83,34,127,18, 
  /* [29][0][][] */ 76,127,-12,38,-59,-36,21,-59, 
  /* [30][0][][] */ 57,87,-67,-25,-52,69,-127,-30, 
  /* [31][0][][] */ 68,62,1,-4,-127,60,-80,81, 
  /* [32][0][][] */ -15,-12,-39,34,-42,17,127,-3, 
  /* [33][0][][] */ 122,-75,22,-105,-127,59,24,58, 
  /* [34][0][][] */ 127,83,95,-86,-2,105,-80,15, 
  /* [35][0][][] */ 39,27,109,-51,14,127,57,-25, 
  /* [36][0][][] */ -83,50,53,127,101,111,114,54, 
  /* [37][0][][] */ 64,17,-20,86,43,102,127,118, 
  /* [38][0][][] */ 10,-54,-10,-111,-43,20,-45,127, 
  /* [39][0][][] */ -24,35,77,-22,75,103,40,-127, 
  /* [40][0][][] */ 51,41,-103,-18,5,-17,-127,66, 
  /* [41][0][][] */ -69,127,-25,86,121,-53,-27,-105, 
  /* [42][0][][] */ 6,50,90,127,-29,64,114,23, 
  /* [43][0][][] */ -29,127,9,4,-84,-33,37,-40, 
  /* [44][0][][] */ -56,29,-127,1,-51,-61,-83,-64, 
  /* [45][0][][] */ 127,34,59,-111,-65,78,-66,9, 
  /* [46][0][][] */ 83,40,-44,-43,-44,-45,127,14, 
  /* [47][0][][] */ -117,22,56,127,-25,108,81,-99, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant28_scale = { 48, { 0.0032228038180619478, 0.00010604445560602471, 0.001372278667986393, 6.5121566876769066e-05, 0.00029003474628552794, 0.00014238482981454581, 0.00032555614598095417, 6.9047811848577112e-05, 0.00037318826070986688, 4.2284082155674696e-05, 0.00035086099524050951, 0.0042606671340763569, 0.0044518494978547096, 0.00052690727170556784, 0.00038163104909472167, 0.00039526479667983949, 0.0034562351647764444, 3.3310854632873088e-05, 0.0001446945097995922, 0.002733755623921752, 0.0013692079810425639, 0.00018294432084076107, 0.00070368434535339475, 0.0019690040498971939, 0.00091311288997530937, 0.0009073036490008235, 0.00035680830478668213, 0.00047867326065897942, 0.0016221276018768549, 0.0033429916948080063, 7.9998117143986747e-06, 0.00049578381003811955, 0.0033821337856352329, 0.00021312074386514723, 0.00031095725717023015, 0.0031352641526609659, 3.1271681564248865e-06, 0.00037302618147805333, 0.0018277850467711687, 0.0023006375413388014, 0.00036832821206189692, 0.0015376246301457286, 0.00025690492475405335, 0.005883924663066864, 0.000272314966423437, 0.00078586407471448183, 0.0051139439456164837, 3.9000009564915672e-05, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(8) int8_t tensor_data29[32*1*1*48] = { 
  /* [0][0][][] */ -81,-67,-77,-115,-113,-84,-89,-64,-93,-100,-127,-118,-123,-49,-107,-66,-74,-57,-81,-87,-101,-122,-101,-79,-55,-123,-87,-51,-68,-116,-64,-87,-114,-57,-78,-109,-97,-84,-119,-94,-122,-103,-51,-112,-65,-94,-115,-52, 
  /* [1][0][][] */ 19,75,77,113,30,16,73,121,92,127,22,82,-48,-36,96,32,-38,66,99,-24,67,119,-7,10,37,24,-30,67,118,-37,72,46,-27,18,-20,-23,89,0,-101,46,63,58,93,23,95,50,-29,90, 
  /* [2][0][][] */ -88,-111,-116,-127,-102,-85,-64,-88,-71,-105,-108,-105,-71,-62,-112,-127,-120,-76,-104,-77,-119,-105,-78,-80,-115,-65,-103,-104,-96,-100,-116,-77,-71,-111,-71,-87,-114,-81,-114,-65,-69,-99,-50,-62,-108,-95,-71,-79, 
  /* [3][0][][] */ -113,-54,-66,-115,-51,-51,-60,-61,-51,-79,-72,-107,-51,-72,-50,-48,-127,-61,-105,-52,-110,-61,-113,-85,-50,-60,-121,-80,-68,-74,-101,-49,-121,-76,-77,-118,-118,-100,-114,-106,-116,-100,-108,-78,-111,-121,-96,-97, 
  /* [4][0][][] */ -49,25,-34,20,31,25,0,-29,19,37,-11,-41,-127,33,22,8,-25,-9,7,-24,-51,39,-16,-9,-3,-30,29,32,-25,-42,35,31,-71,36,17,-15,37,-8,57,7,30,-14,10,-45,-9,49,-30,-13, 
  /* [5][0][][] */ -121,-50,-104,-107,-79,-97,-104,-67,-94,-119,-69,-75,-116,-77,-51,-52,-127,-48,-54,-91,-51,-85,-106,-51,-127,-71,-101,-109,-98,-76,-66,-89,-112,-65,-65,-68,-52,-109,-109,-102,-61,-90,-93,-108,-53,-49,-86,-91, 
  /* [6][0][][] */ 103,26,48,29,-39,3,77,-34,30,93,21,69,7,32,11,88,-24,58,64,48,-47,100,35,-28,34,10,8,20,67,-21,48,76,-13,32,85,46,-1,6,-83,48,-37,23,80,-52,-35,51,-127,24, 
  /* [7][0][][] */ -61,-73,-104,-125,-52,-93,-97,-107,-78,-113,-90,-97,-103,-50,-54,-67,-61,-87,-101,-68,-62,-119,-91,-106,-52,-111,-68,-52,-118,-97,-92,-83,-127,-101,-65,-99,-49,-88,-87,-120,-122,-75,-107,-60,-83,-108,-117,-105, 
  /* [8][0][][] */ -95,-71,-110,-72,-26,-60,-86,-89,-9,-127,-18,-99,-48,-90,-119,-91,-53,7,-25,-76,-23,-79,-57,-95,-95,-116,-12,-41,-112,-96,-95,-88,-64,27,-83,-36,-60,-107,-95,-124,-86,-60,-66,-50,-16,-115,-39,-42, 
  /* [9][0][][] */ -100,-100,-81,-64,-79,-69,-60,-77,-84,-73,-66,-69,-53,-70,-99,-97,-92,-109,-111,-115,-118,-61,-81,-96,-115,-109,-103,-71,-67,-127,-99,-72,-119,-110,-51,-98,-98,-90,-112,-110,-54,-58,-88,-86,-75,-69,-79,-96, 
  /* [10][0][][] */ -110,-94,-109,-106,-54,54,-4,-118,-80,-17,-68,-54,-84,-105,37,-114,-52,-43,6,-3,-99,-112,-127,14,-21,22,21,-55,-36,-2,35,-111,-73,-74,77,-13,-56,18,-19,-86,50,-15,55,-103,-100,13,-122,-40, 
  /* [11][0][][] */ -61,-67,-111,-116,-58,-92,-103,-118,-118,-73,-74,-92,-80,-113,-71,-115,-126,-64,-95,-106,-103,-102,-66,-115,-121,-56,-66,-60,-87,-74,-88,-75,-70,-61,-127,-112,-84,-49,-107,-113,-71,-125,-53,-124,-60,-79,-122,-96, 
  /* [12][0][][] */ -120,-106,-121,-51,-89,-108,-112,-120,-99,-90,-110,-78,-119,-125,-110,-68,-79,-107,-82,-50,-127,-104,-69,-75,-96,-59,-122,-92,-56,-123,-63,-65,-81,-104,-93,-121,-90,-124,-65,-69,-62,-60,-74,-122,-81,-97,-115,-61, 
  /* [13][0][][] */ 77,45,32,36,25,43,60,14,26,15,34,37,93,60,19,58,51,54,38,58,41,33,-14,-23,67,22,47,17,127,12,24,48,63,17,65,34,3,14,27,-12,-9,-12,63,-12,40,23,16,58, 
  /* [14][0][][] */ -109,-115,-62,-72,-73,-123,-87,-97,-95,-69,-104,-117,-93,-54,-102,-80,-125,-102,-100,-127,-95,-79,-111,-107,-107,-101,-69,-84,-67,-122,-66,-108,-107,-60,-52,-84,-83,-67,-124,-125,-56,-52,-52,-85,-65,-118,-94,-109, 
  /* [15][0][][] */ -78,-69,80,60,-120,-55,-84,-68,-124,-102,120,-101,-92,-105,-102,-99,-93,-56,-123,-81,-95,-115,-106,-96,-88,-90,-53,-49,-92,-114,-127,-77,-66,-51,-101,-96,61,-52,-99,-115,-108,-48,-50,61,-55,-68,-111,-118, 
  /* [16][0][][] */ -90,-79,-121,-48,-58,-109,-54,-51,-100,-73,-59,-110,-105,-58,-127,-97,-76,-60,-106,-97,-126,-95,-122,-82,-51,-110,-113,-79,-104,-55,-50,-76,-115,-103,-81,-83,-92,-57,-126,-66,-72,-76,-61,-106,-119,-92,-121,-107, 
  /* [17][0][][] */ -66,46,-77,-7,19,49,-10,44,32,-18,49,-87,13,33,21,-54,-38,60,15,4,-7,-52,-15,-3,-9,-4,34,12,-69,7,56,-46,-44,37,45,-27,21,16,127,-42,11,29,17,-45,59,35,-45,-2, 
  /* [18][0][][] */ -44,-55,-127,-32,84,51,-86,-125,-10,7,-26,-120,-39,72,-27,-31,-71,13,-112,-33,-108,73,7,-41,33,-50,68,-22,-77,-30,35,-38,-106,112,120,-125,65,-40,-30,-34,-42,3,-15,-111,-34,15,6,-74, 
  /* [19][0][][] */ 66,99,80,89,109,96,41,74,97,76,69,86,-34,110,103,56,23,52,62,120,43,66,44,55,102,6,72,75,52,42,115,34,-24,62,34,65,55,19,-74,63,79,127,81,77,59,36,19,100, 
  /* [20][0][][] */ -90,-119,-95,-67,-55,-79,-60,-72,-107,-112,-81,-88,-97,-117,-88,-120,-94,-107,-51,-74,-68,-127,-55,-97,-124,-50,-116,-82,-86,-114,-105,-86,-74,-53,-60,-109,-53,-82,-124,-81,-54,-126,-118,-96,-72,-82,-102,-103, 
  /* [21][0][][] */ -61,-50,-50,-114,-97,-102,-115,-101,-95,-51,-78,-116,-104,-111,-118,-119,-96,-93,-112,-121,-98,-67,-49,-104,-54,-76,-60,-92,-106,-121,-52,-85,-118,-77,-53,-51,-123,-113,-123,-78,-85,-69,-100,-82,-111,-54,-127,-63, 
  /* [22][0][][] */ -77,6,-49,8,9,-14,12,32,38,34,-11,-63,7,36,18,-34,-52,33,10,12,-38,80,-59,-44,-72,-86,19,67,-77,-67,-9,14,-80,77,20,-73,56,-34,-62,-73,-24,-69,6,-47,53,-127,25,-72, 
  /* [23][0][][] */ -102,-89,-86,-102,-120,-87,-69,-85,-83,-123,-70,-125,-127,-60,-67,-105,-78,-75,-72,-81,-72,-56,-69,-91,-72,-107,-113,-111,-123,-63,-91,-51,-62,-111,-54,-96,-90,-52,-64,-117,-50,-74,-56,-123,-122,-90,-122,-54, 
  /* [24][0][][] */ 82,85,103,88,78,57,21,83,56,36,38,81,74,57,55,34,51,72,41,82,93,51,49,64,50,70,43,45,127,97,90,51,110,53,62,40,70,44,-68,30,60,92,37,58,43,67,73,43, 
  /* [25][0][][] */ -18,-38,-72,58,-50,6,14,-30,-38,44,-29,-19,-46,9,8,-33,-66,-19,3,-12,-41,28,-64,-23,13,-68,6,-6,-4,-11,-38,39,-67,-5,75,90,-127,26,-31,-18,-57,-16,50,-90,-17,-18,-101,-53, 
  /* [26][0][][] */ 119,44,82,82,115,47,122,56,100,80,46,78,31,56,96,63,104,86,53,55,81,72,96,98,80,30,102,105,127,82,66,67,65,109,107,105,91,113,-102,107,109,81,72,9,76,81,122,76, 
  /* [27][0][][] */ 39,38,31,67,29,24,0,-15,13,70,25,-33,-127,34,55,-7,14,-31,19,-95,6,58,37,-10,-39,-28,-29,57,85,-11,42,-3,51,24,37,8,79,25,23,9,27,42,20,31,35,-47,8,-5, 
  /* [28][0][][] */ -127,-49,-104,-61,-84,-56,-124,-90,-69,-111,-122,-61,-66,-113,-81,-123,-112,-63,-75,-57,-55,-63,-85,-117,-65,-111,-62,-50,-106,-81,-96,-75,-96,-82,-100,-107,-75,-55,-102,-48,-120,-97,-90,-66,-52,-51,-93,-87, 
  /* [29][0][][] */ -81,-96,-76,-81,-98,-86,-81,-126,-107,-99,-105,-117,-65,-95,-113,-97,-57,-57,-112,-55,-78,-111,-117,-118,-59,-110,-122,-104,-103,-59,-109,-79,-122,-49,-52,-89,-97,-120,-80,-99,-51,-106,-94,-77,-116,-68,-127,-87, 
  /* [30][0][][] */ 20,17,-26,33,62,81,70,33,11,75,41,38,127,72,-9,8,16,87,76,26,15,35,57,-26,63,47,50,59,119,27,61,63,15,46,74,7,10,32,25,13,24,-6,32,-51,60,66,-54,35, 
  /* [31][0][][] */ 97,126,127,67,61,83,117,53,54,76,103,64,11,62,108,91,62,104,73,105,69,78,91,45,111,78,70,68,86,103,107,109,77,97,104,94,108,113,-106,39,71,121,48,82,90,89,105,81, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant29_scale = { 32, { 0.006811091210693121, 0.0053974082693457603, 0.0067384154535830021, 0.0068559693172574043, 0.017692986875772476, 0.0068548787385225296, 0.0073474794626235962, 0.0068375198170542717, 0.0067964810878038406, 0.0067279781214892864, 0.0086251841858029366, 0.0068075875751674175, 0.0065578306093811989, 0.010069108568131924, 0.0065158219076693058, 0.0068598552606999874, 0.0068197990767657757, 0.0093059176579117775, 0.0061139380559325218, 0.0073941508308053017, 0.0067680412903428078, 0.0068483124487102032, 0.010381936095654964, 0.0067644263617694378, 0.0085351523011922836, 0.010237968526780605, 0.0062124594114720821, 0.0095098689198493958, 0.0068291351199150085, 0.0067965593189001083, 0.0077824476175010204, 0.0066765761002898216, } };
const TfArray<32, int> quant29_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(8) int8_t tensor_data30[3*1*1*32] = { 
  /* [0][0][][] */ 60,-25,56,92,-38,59,10,41,-17,85,73,42,127,86,65,76,64,-122,9,74,99,31,27,55,27,92,68,29,100,117,-9,111, 
  /* [1][0][][] */ -33,-47,-98,-67,-127,-51,-42,-91,48,-23,-33,-64,-29,10,-69,-91,-29,67,-32,-80,-25,-69,59,-50,-74,-5,-47,-63,-42,-64,50,-58, 
  /* [2][0][][] */ -71,-3,-27,-29,127,-40,-35,-46,45,-55,-99,-31,-62,-67,-30,-48,-34,53,22,-2,-62,-56,46,-48,-91,-14,-45,0,-59,-35,-50,-28, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant30_scale = { 3, { 0.007130542304366827, 0.0087796784937381744, 0.0089780287817120552, } };
const TfArray<3, int> quant30_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(8) int8_t tensor_data31[1*3*3*8] = { 
  /* [0][0][][] */ 54,-41,-107,-127,95,-12,12,-114, 88,-112,-26,7,127,4,21,-16, 32,29,127,40,42,15,33,-87, 
  /* [0][1][][] */ 71,-31,-95,-62,77,-58,9,-71, 93,-56,-110,-11,56,-127,120,-78, 127,-91,50,-26,70,-48,124,-63, 
  /* [0][2][][] */ 111,63,-6,-53,94,8,67,51, 103,-89,97,-39,40,-25,89,-63, 67,-127,98,7,42,-72,127,-127, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant31_scale = { 8, { 0.00079728150740265846, 0.28188252449035645, 0.0061550033278763294, 0.014791580848395824, 0.0040695280767977238, 0.0075625693425536156, 0.0045718755573034286, 0.00052233861060813069, } };
const TfArray<8, int> quant31_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 3 };
const ALIGN(8) int32_t tensor_data32[8] = { 9600, -4268, 6261, 15249, -390, 8278, 8662, -9861, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00016963911184575409, 0.00014091651246417314, 8.7539374362677336e-05, 0.00025007541989907622, 0.0001878316979855299, 0.00019749611965380609, 0.00036102783633396029, 4.6324046707013622e-05, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(8) int8_t tensor_data33[1*3*3*48] = { 
  /* [0][0][][] */ -97,-18,-104,14,-93,-85,-111,90,127,127,-46,127,-127,4,114,-54,38,6,42,-40,-124,127,-35,43,107,-31,-4,-42,5,-6,-123,35,-102,-58,127,38,58,-99,80,43,-39,54,-127,-103,46,-27,-27,127, -38,49,-100,38,-93,-66,-61,40,117,46,-8,58,-66,-31,45,51,3,127,110,127,-127,81,-127,45,-35,94,-95,-49,84,-26,-23,89,-89,-41,36,-4,111,-100,37,83,-20,92,-82,-81,56,-44,127,56, -127,-94,-110,44,-95,70,-106,-42,20,22,89,102,-89,2,124,127,-10,-107,79,117,67,51,12,5,-83,30,-92,-68,12,62,64,107,-57,-31,48,40,13,-127,-82,93,24,91,-53,-96,13,-35,118,-10, 
  /* [0][1][][] */ -114,127,-86,83,7,-114,-53,8,-19,76,14,-121,-100,34,87,-80,76,-82,65,54,-44,-46,-77,8,-91,127,31,-59,-10,127,-114,35,-127,-45,99,96,119,-38,-42,127,-78,77,-67,-127,60,-95,119,51, 48,43,-127,51,-127,-81,-109,-22,-57,-62,83,45,-98,-5,24,47,21,-63,56,74,-33,-32,-79,19,-112,55,-66,-32,71,9,-127,-27,-41,-64,64,65,69,-70,-75,85,28,74,-66,-121,56,-104,85,18, -36,-87,-100,42,-16,-17,-127,-104,-64,33,95,102,-9,43,127,87,105,-106,127,80,24,73,26,-53,-127,85,-78,-83,-32,23,-11,127,-84,-102,58,19,127,-113,-115,-49,-54,85,-49,-65,83,7,102,-34, 
  /* [0][2][][] */ -29,123,37,73,-24,-127,-57,-67,-37,-93,20,48,45,127,54,-33,127,-98,19,-76,53,54,117,-46,-2,56,-58,-32,73,-19,-92,111,93,-127,-107,-23,126,-84,-88,-58,-17,37,55,-81,111,-22,-41,-30, -47,87,5,109,-127,-71,-122,-127,-57,-78,127,102,-83,59,-63,14,111,-42,-16,-26,40,-87,102,-60,-66,83,-127,-127,72,72,-113,92,-59,-43,-55,120,86,-123,-127,89,127,76,-3,-126,115,-127,87,12, 60,60,-113,127,-86,-84,-48,-26,-71,-70,11,58,-2,63,115,54,105,-105,27,-23,37,37,34,-127,-123,104,-67,-99,-127,21,-39,125,-47,-33,20,127,59,-45,41,98,64,127,85,-38,127,-97,49,5, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant33_scale = { 48, { 0.0076186787337064743, 0.0068943430669605732, 0.0037741041742265224, 0.0027208530809730291, 0.32841625809669495, 0.00056440191110596061, 0.00084925786359235644, 0.0017714198911562562, 0.025422696024179459, 0.11240804940462112, 0.0056213280186057091, 0.018472541123628616, 0.0012331438483670354, 0.0034622333478182554, 0.0036949208006262779, 0.0053384373895823956, 0.0018194031435996294, 4.8816535127116367e-05, 0.0052441307343542576, 0.0039190337993204594, 0.011500445194542408, 0.015069436281919479, 0.014903953298926353, 0.0093950880691409111, 0.0016443687491118908, 0.00014490452304016799, 0.010475859977304935, 0.0031244086567312479, 0.0075571909546852112, 0.0054667717777192593, 0.002134484238922596, 0.0015163443749770522, 0.0024822356645017862, 0.0042192381806671619, 0.0057674739509820938, 0.28060922026634216, 0.001747025758959353, 0.00094432156765833497, 0.082580119371414185, 0.00051943847211077809, 0.013529252260923386, 0.0058709518052637577, 0.0031110357958823442, 0.0012296086642891169, 0.0051699704490602016, 0.0046029277145862579, 0.00022761036234442145, 0.018237851560115814, } };
const TfArray<48, int> quant33_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 3 };
const ALIGN(8) int32_t tensor_data34[8] = { 5305, 10096, 4786, 22367, -4403, 5506, -24820, -18371, };
const TfArray<1, int> tensor_dimension34 = { 1, { 8 } };
const TfArray<8, float> quant34_scale = { 8, { 8.2134531112387776e-05, 9.6862109785433859e-05, 2.8511660275398754e-05, 4.7917565098032355e-05, 7.0664296799805015e-05, 5.3232575737638399e-05, 6.6817505285143852e-05, 9.6519237558823079e-05, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(8) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 6,95,15,0,24,-95,-16,-81,-69,115,-127,-19,-110,27,63,127,109,-127,-67,25,0,100,105,81,70,-16,-11,-114,10,-56,-68,-127,-7,127,-90,-83,127,-69,-18,127,50,-31,74,-73,-105,-112,1,64, 40,29,114,110,5,37,18,21,-46,67,-66,-96,-13,57,24,90,-16,-123,92,127,11,-6,65,127,48,-11,-17,-57,-118,12,72,46,27,-72,-72,-107,53,-31,107,94,40,-81,34,-57,61,-76,-93,126, 37,103,63,103,56,-17,127,-1,-34,127,-39,-80,38,-71,85,56,-30,-57,93,85,127,-32,28,42,127,-54,45,-50,49,44,67,-23,127,-78,-127,-50,18,-84,72,8,98,-88,61,1,42,-34,-103,97, 
  /* [0][1][][] */ 123,56,9,-123,92,-45,21,-116,41,35,18,-99,-107,-102,43,-77,-16,23,-56,9,95,-31,-23,98,69,-17,-26,55,14,-77,70,-98,-43,-114,-89,-127,42,12,-127,-75,-25,12,65,-123,25,-102,-8,72, 90,90,127,44,25,-70,30,-84,87,95,-94,-85,-127,-127,62,-69,62,-91,-10,47,108,71,79,-7,112,127,127,-55,-96,-51,58,44,23,-81,-125,2,-19,-90,-60,-6,123,-32,23,-90,127,-115,-22,5, 104,120,30,-83,127,3,70,13,73,103,-40,-76,-13,-81,96,46,82,40,88,-6,-36,-90,127,111,88,65,93,111,-127,127,-127,-77,95,54,89,79,-123,53,-45,-69,127,-101,13,-76,77,-15,32,-23, 
  /* [0][2][][] */ -50,127,23,-115,72,-127,53,-127,-19,94,-106,-64,-108,9,127,-26,-14,-118,127,77,109,127,-48,-32,107,70,-81,67,-10,35,85,-44,-15,-3,118,-66,104,-42,-99,-72,9,-127,127,-127,51,-127,127,-23, 77,60,7,-127,-33,-85,88,-39,127,-6,-4,-127,-62,-66,74,-51,127,-109,71,88,74,29,-75,89,-41,82,62,-127,-66,-46,78,23,60,-64,-52,-41,44,-127,-84,17,37,-49,99,-91,48,-36,4,100, 127,60,28,17,72,-19,116,58,1,41,-90,-60,7,-121,-20,-27,105,-98,-1,78,-98,-44,-41,72,-29,41,-60,76,-63,114,54,-94,84,-26,-115,76,108,-34,-2,-41,8,-52,13,30,108,19,-32,127, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0033468038309365511, 0.39534154534339905, 0.001355669810436666, 0.0082928454503417015, 0.00333387590944767, 0.0070192720741033554, 0.001975382911041379, 0.001038091373629868, 0.011123443022370338, 0.0044650076888501644, 0.00082722777733579278, 0.0010242845164611936, 0.0015587768284603953, 0.0048825615085661411, 0.0037805030588060617, 0.018957735970616341, 0.0028772987425327301, 0.0011498023523017764, 0.022039454430341721, 0.0043703643605113029, 0.0010139713995158672, 0.0052228504791855812, 0.0082883872091770172, 0.0031920154578983784, 0.018171386793255806, 0.0013296952238306403, 0.0027112243697047234, 0.008249916136264801, 0.13103500008583069, 0.0075282519683241844, 0.0035936797503381968, 0.0010046768002212048, 0.0033795901108533144, 0.0053405924700200558, 0.0079415244981646538, 0.0053499485366046429, 0.0045362035743892193, 0.0045651276595890522, 0.0040789144113659859, 0.0058820964768528938, 0.021221721544861794, 0.0022531021386384964, 0.00027562258765101433, 0.0066100470721721649, 0.00085054978262633085, 0.001208591740578413, 0.0058187991380691528, 0.0044249556958675385, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(8) int32_t tensor_data36[8] = { 17833, -15632, 33181, 23489, -29675, -3450, 382, -5442, };
const TfArray<1, int> tensor_dimension36 = { 1, { 8 } };
const TfArray<8, float> quant36_scale = { 8, { 2.9257831556606106e-05, 0.00012783092097379267, 5.7494678912917152e-05, 2.794550709950272e-05, 4.233463914715685e-05, 6.4831729105208069e-05, 6.0174625104991719e-05, 8.0724268627818674e-05, } };
const TfArray<8, int> quant36_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(8) int8_t tensor_data37[1*3*3*48] = { 
  /* [0][0][][] */ 127,-24,-110,117,107,-99,-39,-38,62,-102,-90,100,52,-52,-53,-36,-28,28,7,-24,-78,127,38,-71,127,-91,-92,23,-62,-127,78,-53,127,-60,-39,-54,72,127,107,96,-97,-71,-98,119,-102,-52,-32,127, 74,56,-64,-57,127,29,40,-12,42,-12,-112,61,68,-107,-36,-125,29,11,35,110,-67,113,54,61,49,-28,-95,-2,-41,-55,127,46,93,-13,-90,-66,84,-6,117,14,-22,-80,-64,-42,-33,127,-127,-18, -9,-31,-110,-47,-85,-87,-24,2,96,-124,79,-127,-12,15,18,-104,40,127,97,10,9,-35,78,-108,29,-52,-93,43,90,60,81,-127,43,-127,-38,-127,52,-54,-70,-31,63,-22,-121,-127,-53,34,-26,47, 
  /* [0][1][][] */ 22,-82,-27,36,77,-42,115,-48,127,-11,-34,23,32,74,3,-93,35,-51,23,-47,-127,-10,127,58,19,-79,-118,10,-99,-126,2,-113,-79,-13,-44,-20,127,94,127,37,-93,13,127,-103,-127,-59,83,-39, -82,-79,-124,-32,-21,-8,32,15,110,108,-35,84,53,-124,-125,-101,53,-54,38,127,-53,88,45,108,-50,-55,-62,55,-63,-57,119,-76,-7,18,-74,-20,121,-37,78,18,-127,-63,113,-118,-71,-42,29,-22, -71,-82,-78,-59,-22,-51,-10,62,113,83,-75,-68,-49,10,-67,-47,48,111,89,58,85,122,-37,95,-44,-127,-78,81,57,71,91,-77,6,-73,-48,-58,-15,5,-99,-127,-10,-127,-30,-56,15,85,-5,68, 
  /* [0][2][][] */ -24,-5,-110,127,85,35,-127,-127,97,73,-98,-23,3,74,-56,-127,63,50,97,-25,27,-30,69,75,3,66,-127,103,-127,-36,24,-61,20,-85,-77,-103,73,57,93,82,-32,-89,62,-87,-115,-48,49,-4, -115,-51,-127,33,-89,127,-94,-52,74,127,-127,-9,-127,-127,-67,-92,127,-16,102,102,-64,54,73,127,-7,-25,-94,74,-52,1,71,-94,-46,-42,-19,-94,-37,-35,-84,-63,-67,-56,94,-69,-22,47,44,-23, -63,-127,-114,10,-50,-18,40,40,37,50,-75,-50,-11,41,-127,0,33,63,127,96,25,104,95,74,-11,-42,-97,127,23,-29,104,-56,49,-95,-127,-76,6,-23,-84,-78,97,-105,-108,-124,-57,42,83,10, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0055702929385006428, 0.00087423616787418723, 7.0308269641827792e-05, 0.0059132003225386143, 0.0088246902450919151, 0.0042970171198248863, 0.010536104440689087, 0.00049836147809401155, 0.0016880095936357975, 0.00013964818208478391, 0.0036756459157913923, 0.0019468083046376705, 0.0090138837695121765, 0.0056299637071788311, 0.0066168182529509068, 0.00077882880577817559, 0.0052400608547031879, 0.0046146870590746403, 0.0022739539854228497, 0.0040052733384072781, 0.0025271009653806686, 0.00032857918995432556, 0.0026820956263691187, 0.00047078440547920763, 0.1536516398191452, 0.031905282288789749, 0.0012161207851022482, 0.0024975594133138657, 0.01403419766575098, 0.0020845108665525913, 0.0035710691008716822, 0.0063221273012459278, 0.011521880514919758, 0.40829253196716309, 0.0027049214113503695, 0.0030116946436464787, 0.0017695939168334007, 0.031275901943445206, 0.010260640643537045, 0.0039056329987943172, 0.0037215165793895721, 0.08693762868642807, 0.0077038900926709175, 0.0011271071853116155, 0.0015322945546358824, 0.051853325217962265, 0.0077166189439594746, 0.011248612776398659, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 3 };
const ALIGN(8) int32_t tensor_data38[8] = { -12401, -64, 12129, 21754, 8333, -30476, 6936, -405, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 2.73641253443202e-05, 8.1685248005669564e-05, 4.0757025999482721e-05, 7.355174602707848e-05, 8.5566070993081667e-06, 4.658373654820025e-05, 5.208416041568853e-05, 0.0001027764956234023, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(8) int8_t tensor_data39[1*3*3*48] = { 
  /* [0][0][][] */ 68,-74,-76,-127,-112,104,-69,-59,-1,10,-46,-2,10,19,-66,82,127,78,92,-26,-83,-26,-127,91,-85,89,-15,-97,-36,127,90,-30,-54,48,14,127,91,-127,127,36,-127,-3,98,-74,50,5,-99,127, 47,-28,-127,76,-82,-8,3,18,11,0,-13,127,105,63,-54,78,-72,51,-1,90,71,-81,48,10,-31,18,24,-63,-21,12,-99,-127,10,107,-32,100,-45,-92,-22,127,-94,127,64,-49,-19,33,127,49, 82,-78,-47,-11,-34,127,-52,-127,127,21,-37,63,127,92,-44,127,0,33,-44,55,-58,-56,102,-18,-15,-58,-127,-127,74,-24,-58,-98,127,120,123,-18,-123,-46,84,52,-65,13,-32,-127,-67,-84,43,90, 
  /* [0][1][][] */ 24,60,-37,-96,-19,34,-82,-47,5,25,52,27,37,50,-4,-17,-72,107,12,-127,-93,-21,-74,20,-13,47,119,-54,-55,-9,59,-71,16,127,30,-7,-6,-104,-25,-91,-3,-27,33,-55,65,-21,-102,70, 111,32,-17,-74,-80,-94,35,-3,-51,127,-49,-44,-53,23,-85,51,70,99,-27,69,-59,-110,37,-113,82,-59,-9,-58,93,17,91,-53,34,117,102,25,127,-91,35,8,27,23,1,-30,-127,24,83,-42, 7,54,-65,-50,-23,-64,-29,-86,-18,87,127,-12,-5,127,63,51,14,127,-13,-28,-6,-80,-30,87,10,-127,-79,-76,-7,22,-6,-121,-15,64,103,2,-2,-86,89,56,57,63,69,-103,-48,-125,-48,21, 
  /* [0][2][][] */ 127,127,-45,-52,49,83,36,-74,33,-56,110,68,1,28,-65,42,35,109,-127,-110,-127,127,86,-127,25,7,86,26,-127,4,81,-26,-57,72,127,86,14,-71,-20,-42,-41,0,-127,-63,46,-72,-123,3, 67,38,-70,-28,120,34,127,-79,11,53,84,-39,-65,-38,83,54,-23,-23,-29,-65,-29,113,58,-60,127,-61,34,-11,-12,90,127,91,-48,64,113,68,15,-91,10,-29,-22,-35,-72,-40,-99,69,-94,58, -11,9,-57,-42,127,62,7,-64,-64,-69,15,-102,73,83,127,45,11,-87,-27,-101,-18,108,63,10,87,-12,-73,63,-80,38,-86,-115,18,-49,29,-75,118,-67,71,-14,11,-28,-33,-105,-34,-127,-25,10, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant39_scale = { 48, { 0.0046309912577271461, 0.0068828519433736801, 0.18404744565486908, 0.00061742548132315278, 0.0040850699879229069, 0.0081672128289937973, 0.008958498015999794, 0.0020899081137031317, 0.0080269575119018555, 0.076667867600917816, 0.0060165319591760635, 0.0023596480023115873, 0.0059732631780207157, 8.6241067037917674e-05, 0.0052939634770154953, 0.0034787075128406286, 0.009655587375164032, 0.00069266773061826825, 0.013649753294885159, 0.0061347410082817078, 0.0062670609913766384, 0.26512530446052551, 0.002820316469296813, 0.01340315118432045, 0.0094248279929161072, 0.0062639643438160419, 0.0040052435360848904, 0.00055369717301800847, 0.017843931913375854, 0.0035364569630473852, 0.010503293015062809, 0.0016960102366283536, 0.034879915416240692, 0.00135086162481457, 0.032001610845327377, 0.0053019053302705288, 0.00028502562781795859, 0.00018267783161718398, 0.015260332264006138, 0.0053987978026270866, 0.010906143113970757, 0.0067664827220141888, 0.0075834556482732296, 0.0015950831584632397, 0.0025376561097800732, 0.0032132556661963463, 0.026571273803710938, 0.02539457194507122, } };
const TfArray<48, int> quant39_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 3 };
const ALIGN(8) int32_t tensor_data40[8] = { -15674, -9003, 2718, 14258, 6859, -20122, 19465, -13602, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 1.024626999424072e-05, 5.8896595874102786e-05, 3.8836078601889312e-05, 0.00010314334213035181, 4.768796861753799e-05, 1.0094818208017386e-05, 2.6223433451377787e-05, 6.3643441535532475e-05, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(8) int8_t tensor_data41[1*3*3*48] = { 
  /* [0][0][][] */ 39,37,56,35,-98,34,-38,-37,127,82,-88,-20,95,-37,-32,-83,-37,93,-53,-94,-18,-127,-127,117,46,-97,-3,-43,-67,-88,34,58,-82,-14,-127,127,-47,18,-42,-87,70,3,-127,-85,-49,5,98,127, 50,-23,45,-127,-42,-48,-62,-127,15,30,-80,114,75,-7,-60,-127,10,85,-80,-90,-69,104,-48,-125,127,-18,39,-70,48,-18,127,73,-57,-22,-92,32,-7,4,30,52,127,-65,-52,-33,-50,-65,47,-86, 61,5,41,86,-127,-22,-103,-93,-36,-14,-127,-45,-10,33,37,-40,-50,81,-28,-127,-71,-13,17,-117,-26,-33,-80,-116,-81,-61,88,-15,-47,-58,19,42,-64,-34,98,65,25,127,41,-63,33,-127,25,47, 
  /* [0][1][][] */ 24,60,84,-64,-42,29,-37,-37,-13,25,-10,-12,62,-57,-127,-116,-10,119,127,18,87,4,20,127,41,-4,15,16,80,-107,-73,52,85,-13,-32,58,69,127,-127,-66,-36,-87,-62,127,79,-82,127,74, 127,-15,127,-81,-37,-69,-54,-88,-27,84,9,-43,127,91,-84,104,-17,43,99,-11,68,51,-116,-39,62,127,-3,-127,-4,-86,56,127,6,-112,-49,69,16,-35,95,-127,109,8,-34,-71,80,-67,11,99, -46,58,94,-92,-82,83,-127,13,-47,123,-75,-127,52,18,-32,-28,127,95,35,17,65,20,-49,39,4,109,-127,-122,100,-117,-83,18,127,67,-38,36,18,61,-59,-119,-89,16,-58,29,127,-89,50,100, 
  /* [0][2][][] */ 70,127,124,-66,-77,58,-91,-104,2,127,16,18,-42,127,-110,-88,47,127,66,61,127,-93,31,125,81,104,7,-127,63,-91,-110,29,112,18,-3,-57,127,117,-32,-53,76,-101,45,-114,83,107,-76,92, 8,95,70,-5,-60,127,21,-29,34,114,70,-62,49,102,58,74,14,69,105,9,83,82,-75,-86,-63,74,-97,-46,127,-127,2,4,107,58,89,5,50,-35,-13,-78,21,-51,-52,78,108,113,-44,23, -4,16,71,14,-57,116,-48,34,-127,64,24,-118,-89,30,-80,1,70,34,39,-78,-39,-2,26,-66,68,71,-125,-104,59,4,-71,-7,-87,127,-31,-67,-43,-5,71,19,-59,-16,3,-118,19,51,-47,53, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant41_scale = { 48, { 0.0048706671223044395, 0.019011750817298889, 0.0069234324619174004, 0.0078439470380544662, 0.0023810144048184156, 0.026935270056128502, 0.0041135498322546482, 0.00071367749478667974, 0.010082186199724674, 0.001607925514690578, 0.0072420998476445675, 0.0039425506256520748, 0.0068657738156616688, 0.0040455423295497894, 0.0020285903010517359, 0.0014562935102730989, 0.0085062524303793907, 0.00032615190139040351, 0.013381435535848141, 0.0068165739066898823, 0.25038501620292664, 0.0029598136898130178, 0.00059330411022529006, 0.007116878405213356, 0.20430995523929596, 0.0033339783549308777, 0.0027273420710116625, 0.0017756333108991385, 0.0042121005244553089, 0.0011345196980983019, 0.0044201863929629326, 0.0060870707966387272, 0.0018783984705805779, 0.0076452866196632385, 0.0049598333425819874, 0.0074155903421342373, 0.0089353518560528755, 0.0091421445831656456, 0.069714225828647614, 0.0084353936836123466, 0.0027859429828822613, 0.0036278336774557829, 0.0072343009524047375, 0.001941368798725307, 0.011700516566634178, 0.075410328805446625, 0.0060026911087334156, 0.27628529071807861, } };
const TfArray<48, int> quant41_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(8) int32_t tensor_data42[8] = { -16202, 39308, 13103, 4894, 3201, 1273, 20042, 16, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 5.7977253163699061e-05, 1.4336495723910048e-06, 5.6521967053413391e-05, 7.0523441536352038e-05, 4.9729569582268596e-05, 2.3056731151882559e-05, 9.187163959722966e-05, 8.8714179582893848e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(8) int32_t tensor_data43[3] = { 757, -670, -118, };
const TfArray<1, int> tensor_dimension43 = { 1, { 3 } };
const TfArray<3, float> quant43_scale = { 3, { 0.0007182959234341979, 0.00088442186824977398, 0.00090440269559621811, } };
const TfArray<3, int> quant43_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.05336163192987442, } };
const TfArray<1, int> quant46_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.056726567447185516, } };
const TfArray<1, int> quant47_zero = { 1, { -41 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.059030786156654358, } };
const TfArray<1, int> quant51_zero = { 1, { 38 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.080559678375720978, } };
const TfArray<1, int> quant54_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.1084168553352356, } };
const TfArray<1, int> quant55_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.060506649315357208, } };
const TfArray<1, int> quant59_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.045289535075426102, } };
const TfArray<1, int> quant62_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.084209755063056946, } };
const TfArray<1, int> quant63_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.065226823091506958, } };
const TfArray<1, int> quant66_zero = { 1, { 25 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.1198229119181633, } };
const TfArray<1, int> quant67_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.10073510557413101, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.41657087206840515, } };
const TfArray<1, int> quant70_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,16,3 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,31,9 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,17,32 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,18,4 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,5 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,19,34 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,20,6 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,35,7 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,21,36 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,22,8 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,37,10 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,23,38 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,24,11 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,39,12 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,25,40 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,26,13 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,41,14 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,27,42 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,28,15 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,29,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,30,43 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data21, (TfLiteIntArray*)&tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data22, (TfLiteIntArray*)&tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data23, (TfLiteIntArray*)&tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data24, (TfLiteIntArray*)&tensor_dimension24, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data25, (TfLiteIntArray*)&tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data26, (TfLiteIntArray*)&tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data27, (TfLiteIntArray*)&tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data28, (TfLiteIntArray*)&tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data29, (TfLiteIntArray*)&tensor_dimension29, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data30, (TfLiteIntArray*)&tensor_dimension30, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data31, (TfLiteIntArray*)&tensor_dimension31, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data32, (TfLiteIntArray*)&tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data33, (TfLiteIntArray*)&tensor_dimension33, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data34, (TfLiteIntArray*)&tensor_dimension34, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data35, (TfLiteIntArray*)&tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data36, (TfLiteIntArray*)&tensor_dimension36, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data37, (TfLiteIntArray*)&tensor_dimension37, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data38, (TfLiteIntArray*)&tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data39, (TfLiteIntArray*)&tensor_dimension39, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data40, (TfLiteIntArray*)&tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data41, (TfLiteIntArray*)&tensor_dimension41, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data42, (TfLiteIntArray*)&tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant42))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data43, (TfLiteIntArray*)&tensor_dimension43, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant43))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 36864, (TfLiteIntArray*)&tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant44))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant45))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 18432, (TfLiteIntArray*)&tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant46))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant47))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant48))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant49))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 115248, (TfLiteIntArray*)&tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant50))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 55296, (TfLiteIntArray*)&tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant51))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant52))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant53))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 27648, (TfLiteIntArray*)&tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant54))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant55))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant56))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant57))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 30000, (TfLiteIntArray*)&tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant58))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 14976, (TfLiteIntArray*)&tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant59))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant60))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant61))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant62))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 13824, (TfLiteIntArray*)&tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant63))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant64))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant65))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 8064, (TfLiteIntArray*)&tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant66))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant67))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant68))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6912, (TfLiteIntArray*)&tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant69))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 432, (TfLiteIntArray*)&tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant70))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant71))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_ADD, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, nullptr, OP_PAD, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_ADD, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs21, (TfLiteIntArray*)&outputs21, const_cast<void*>(static_cast<const void*>(&opdata21)), OP_DEPTHWISE_CONV_2D, },
  { (TfLiteIntArray*)&inputs22, (TfLiteIntArray*)&outputs22, const_cast<void*>(static_cast<const void*>(&opdata22)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs23, (TfLiteIntArray*)&outputs23, const_cast<void*>(static_cast<const void*>(&opdata23)), OP_ADD, },
  { (TfLiteIntArray*)&inputs24, (TfLiteIntArray*)&outputs24, const_cast<void*>(static_cast<const void*>(&opdata24)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs25, (TfLiteIntArray*)&outputs25, const_cast<void*>(static_cast<const void*>(&opdata25)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs26, (TfLiteIntArray*)&outputs26, const_cast<void*>(static_cast<const void*>(&opdata26)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs27, (TfLiteIntArray*)&outputs27, const_cast<void*>(static_cast<const void*>(&opdata27)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 72;
  for(size_t i = 0; i < 72; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 28; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 28; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  71, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 28; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
